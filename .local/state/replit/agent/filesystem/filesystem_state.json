{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# PetManager Pro - Sistema de Gestão para Pet Shops\n\n## Overview\n\nPetManager Pro é uma plataforma profissional de gestão para pet shops no Brasil. O sistema foca no gerenciamento de pacotes de serviços, fidelização de clientes e automação de processos para otimizar as operações do pet shop. A aplicação oferece uma interface limpa e intuitiva para gerenciar pacotes de clientes, rastrear uso, monitorar renovações e manter relacionamentos com clientes.\n\nO sistema foi projetado em torno da necessidade central de serviços baseados em pacotes, onde clientes compram conjuntos de serviços com períodos de validade específicos e limites de uso. O dashboard oferece insights acionáveis e ferramentas de automação para ajudar proprietários de pet shops a manter o engajamento dos clientes e reduzir a rotatividade.\n\n### Versões do Sistema\n\n**Versão 1.0 - Versão da Loja (Atual)**\n- Desenvolvida especificamente para a Gloss Pet\n- Sistema completo de gestão interna\n- CRUD completo para todas as entidades\n- Dashboard com métricas e insights\n- Banco PostgreSQL totalmente funcional\n- Interface administrativa profissional\n\n**Versão 2.0 - Versão do Cliente (Planejada)**\n- Portal do cliente para autoatendimento\n- Agendamento online pelos próprios clientes\n- Acompanhamento de pacotes em tempo real\n- Histórico de serviços e pets\n- Notificações automáticas por WhatsApp\n- App mobile para clientes\n\nO Gloss Pet é o primeiro cliente da plataforma PetManager Pro, servindo como caso de uso piloto e validação do sistema.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (January 2025)\n\n- **Rebranding**: Sistema rebatizado de \"Gloss Pet Dashboard\" para \"PetManager Pro\"\n- **Posicionamento**: Transformado em plataforma de gestão profissional para pet shops\n- **Autenticação Simplificada**: Removida funcionalidade de registro, mantido apenas login admin/admin\n- **Arquitetura Demo**: Sistema funciona independente do banco de dados para demonstração\n- **Cliente Piloto**: Gloss Pet posicionado como primeiro cliente da plataforma PetManager Pro\n\n### Latest Updates (January 11, 2025)\n- **Dashboard Inteligente**: Implementada fila de ações inteligentes com insights acionáveis\n- **Sistema de Suporte**: Nova aba de suporte com envio de emails para morningloryfox@gmail.com\n- **Solicitações de Clientes**: Sistema para gerenciar feedbacks e mensagens dos clientes\n- **Páginas Completas**: Agendamentos, Relatórios e Mensagens totalmente funcionais\n- **Relatórios Avançados**: Página de relatórios com gráficos de receita, distribuição de serviços e crescimento\n- **Banco PostgreSQL**: Sistema configurado com banco PostgreSQL do Replit funcionando perfeitamente\n- **Dados Demo**: Empresa Gloss Pet, serviços e pacotes inseridos e funcionais\n- **UI Melhorada**: Removido nome \"Marina Silva\" do footer, mantendo apenas ícone do usuário\n- **Correções**: Resolvidos erros de TypeScript e compatibilidade de tipos\n- **Autenticação Corrigida**: Resolvidos problemas de sessões e middleware de autenticação\n- **Criação de Clientes Unificada**: Ambos os botões usam a mesma função enhanced modal\n- **Migração PostgreSQL Completa**: Sistema totalmente migrado do armazenamento demo para PostgreSQL real\n- **Validação de Campos Aprimorada**: Correção na validação de CEP e campos opcionais de endereço\n- **UUID Real da Empresa**: Gloss Pet funcionando com UUID PostgreSQL: 550e8400-e29b-41d4-a716-446655440000\n- **Formulário de Clientes Completo**: Todos os campos de endereço funcionando corretamente no PostgreSQL\n- **Otimização de Código**: Limpeza abrangente de redundâncias\n  - Storage.ts otimizado: 739 linhas (reduzido de 819)\n  - Removidos modais duplicados e arquivos obsoletos\n  - Simplificados métodos de CRUD\n  - Mantidos apenas modais essenciais\n- **Correções Críticas de Funcionalidade**:\n  - **Criação de Pacotes**: Corrigido endpoint de /api/packages para /api/package-types\n  - **Criação de Clientes**: Corrigida função de mutação no modal de clientes\n  - **Persistência de Dados**: Todos os formulários agora salvam corretamente no PostgreSQL\n  - **Validação**: Schemas e tipos alinhados entre frontend e backend\n\n### Status Atual - Versão 1.0 (Versão da Loja)\n- **CRUD Completo**: Clientes, Pets, Serviços, Tipos de Pacotes e Pacotes de Clientes\n- **Dashboard Funcional**: Métricas, ações inteligentes, gráficos de receita\n- **Relatórios**: Página completa com visualizações de dados\n- **Sistema de Suporte**: Integração de email funcionando\n- **Banco de Dados**: PostgreSQL totalmente funcional com dados reais\n- **Interface**: Design responsivo e intuitivo com Radix UI + Tailwind\n- **Autenticação**: Sistema seguro com sessões e middleware\n\n### Roadmap - Próximas Fases\n\n**Fase 2: Automação e Comunicação**\n- Integração WhatsApp Business API para notificações automáticas\n- Sistema de lembretes de vencimento de pacotes\n- Notificações push para administradores\n- Templates de mensagens personalizáveis\n- Relatórios avançados com exportação PDF/Excel\n\n**Fase 3: Portal do Cliente (Versão 2.0)**\n- Interface dedicada para clientes\n- Sistema de agendamento self-service\n- Acompanhamento de pacotes em tempo real\n- Histórico completo de serviços realizados\n- Perfil de pets com fotos e informações\n- Notificações automáticas por WhatsApp e email\n\n**Fase 4: Expansão Multi-tenant**\n- Plataforma completa para múltiplas empresas\n- Sistema de assinatura e planos\n- Isolamento total de dados por empresa\n- Personalização de marca por cliente\n- Dashboard de administração da plataforma\n\n**Fase 5: Mobile e IA**\n- App mobile nativo para clientes\n- Sistema de recomendação inteligente\n- Análise preditiva de churn\n- Chatbot para atendimento automatizado\n- Otimização de preços baseada em dados\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using React 18 with TypeScript, utilizing Vite as the build tool for fast development and optimized production builds. The application follows a component-based architecture with:\n\n- **Router**: Wouter for lightweight client-side routing\n- **UI Framework**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with Inter font family and dark mode support\n- **State Management**: TanStack Query for server state management and caching\n- **Forms**: React Hook Form with Zod validation\n- **Charts**: Recharts for data visualization\n\nThe folder structure separates concerns with dedicated directories for pages, components (including layout and modals), hooks, and utilities. The UI follows a modern dashboard pattern with a persistent sidebar navigation and main content area.\n\n### Backend Architecture\nThe server is built with Express.js and TypeScript, implementing a RESTful API architecture:\n\n- **Framework**: Express.js with TypeScript for type safety\n- **Database Layer**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints organized by domain (customers, packages, dashboard metrics)\n- **Middleware**: Request logging, JSON parsing, and error handling\n- **Development**: Vite integration for hot module replacement in development\n\nThe API follows a resource-based structure with endpoints for dashboard metrics, customer management, package operations, and action queue management.\n\n### Data Storage Solutions\nThe application uses PostgreSQL as the primary database with Drizzle ORM for schema management and queries:\n\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with TypeScript integration\n- **Schema**: Comprehensive data model covering users, customers, pets, services, packages, and notifications\n- **Migrations**: Drizzle Kit for database schema migrations\n- **Connection**: Neon serverless database with connection pooling\n\nThe database schema supports complex package management with relationships between customers, pets, package types, customer packages, and usage tracking.\n\n### Authentication and Authorization\nO sistema implementa autenticação simplificada para demonstração:\n\n- **Login Demo**: Credenciais admin/admin para acesso ao sistema\n- **Gerenciamento de Sessões**: Sessões Express com armazenamento em memória\n- **Segurança**: Hash de senhas bcryptjs e autenticação baseada em sessão\n- **Controle de Acesso**: Rotas de API protegidas e proteção de rotas no cliente\n- **Dados Demo**: Sistema funciona sem necessidade de banco de dados conectado\n\n### PWA Features\nThe application is designed as a Progressive Web App:\n\n- **Manifest**: Web app manifest for installation\n- **Icons**: Favicon and app icons for mobile devices\n- **Responsive Design**: Mobile-first responsive layout\n- **Service Worker**: Prepared for offline functionality\n\n## External Dependencies\n\n### Database and Hosting\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Vercel/Replit**: Prepared for deployment on modern hosting platforms\n\n### UI and Design\n- **Radix UI**: Accessible component primitives for complex UI components\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Inter Font**: Modern, readable typography via Google Fonts\n- **Lucide React**: Icon library for consistent iconography\n\n### WhatsApp Integration\n- **Meta Cloud API**: Planned integration for automated WhatsApp messaging\n- **Twilio/Zenvia**: Alternative WhatsApp API providers for message automation\n- **Fallback Email**: Resend API for email notifications when WhatsApp is unavailable\n\n### Development Tools\n- **TypeScript**: Type safety across the full stack\n- **Vite**: Fast build tool with HMR for development\n- **Drizzle Kit**: Database schema management and migrations\n- **TanStack Query**: Server state management with caching and background updates\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation for forms and API data\n\n### Third-Party Services\n- **Google Fonts**: Web font delivery for Inter typography\n- **Unsplash**: Placeholder images for development and demo content\n- **Date-fns**: Date manipulation and formatting utilities\n\nThe architecture prioritizes simplicity, type safety, and developer experience while maintaining the flexibility to scale with business needs. The system is designed to handle the core pet shop business operations efficiently while providing room for future enhancements like advanced scheduling, inventory management, and expanded messaging capabilities.","size_bytes":10537},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db-storage.ts":{"content":"import { \n  type User, type InsertUser, type Customer, type InsertCustomer,\n  type Pet, type InsertPet, type Service, type InsertService,\n  type PackageType, type InsertPackageType, type CustomerPackage, type InsertCustomerPackage,\n  type PackageUsage, type InsertPackageUsage, type Appointment, type InsertAppointment,\n  type Notification, type InsertNotification,\n  users, customers, pets, services, packageTypes, customerPackages, packageUsages,\n  appointments, notifications\n} from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, and, gte, lte, desc } from \"drizzle-orm\";\n\n// Extended interfaces for dashboard data\nexport interface DashboardMetrics {\n  activePackages: number;\n  renewalsThisMonth: number;\n  churnRate: number;\n  riskyClients: number;\n}\n\nexport interface ActionQueueItem {\n  id: string;\n  customerId: string;\n  customerName: string;\n  petName: string;\n  petBreed: string;\n  petImage: string;\n  packageId: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  reason: string;\n  expiresIn?: number;\n  remainingUses?: number;\n  lastUsedDays?: number;\n}\n\nexport interface CustomerWithPackages extends Customer {\n  packages: CustomerPackage[];\n  pets: Pet[];\n}\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<Customer>): Promise<Customer | undefined>;\n  deleteCustomer(id: string): Promise<boolean>;\n\n  // Pets\n  getPetsByCustomer(customerId: string): Promise<Pet[]>;\n  createPet(pet: InsertPet): Promise<Pet>;\n  updatePet(id: string, pet: Partial<Pet>): Promise<Pet | undefined>;\n\n  // Services\n  getServices(): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<Service>): Promise<Service | undefined>;\n\n  // Package Types\n  getPackageTypes(): Promise<PackageType[]>;\n  createPackageType(packageType: InsertPackageType): Promise<PackageType>;\n  updatePackageType(id: string, packageType: Partial<PackageType>): Promise<PackageType | undefined>;\n\n  // Customer Packages\n  getCustomerPackages(): Promise<CustomerPackage[]>;\n  getActivePackages(): Promise<CustomerPackage[]>;\n  createCustomerPackage(customerPackage: InsertCustomerPackage): Promise<CustomerPackage>;\n  updateCustomerPackage(id: string, customerPackage: Partial<CustomerPackage>): Promise<CustomerPackage | undefined>;\n  renewPackage(packageId: string): Promise<CustomerPackage>;\n\n  // Package Usage\n  createPackageUsage(usage: InsertPackageUsage): Promise<PackageUsage>;\n  getPackageUsages(packageId: string): Promise<PackageUsage[]>;\n\n  // Appointments\n  getAppointments(): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<Appointment>): Promise<Appointment | undefined>;\n\n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotifications(customerId?: string): Promise<Notification[]>;\n\n  // Dashboard specific methods\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n  getActionQueue(): Promise<ActionQueueItem[]>;\n  getRecentActivity(): Promise<any[]>;\n  getRevenueByService(): Promise<any[]>;\n}\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    try {\n      // Check if services already exist\n      const existingServices = await db.select().from(services).limit(1);\n      \n      if (existingServices.length === 0) {\n        // Seed services\n        await db.insert(services).values([\n          { name: \"Banho & Tosa\", description: \"Banho completo com tosa\", basePrice: \"50.00\", duration: 90, active: true },\n          { name: \"Tosa Higiênica\", description: \"Tosa higiênica\", basePrice: \"25.00\", duration: 30, active: true },\n          { name: \"Corte de Unhas\", description: \"Corte e lixamento das unhas\", basePrice: \"15.00\", duration: 15, active: true },\n          { name: \"Hidratação\", description: \"Hidratação do pelo\", basePrice: \"35.00\", duration: 45, active: true },\n        ]);\n      }\n\n      // Check if package types already exist\n      const existingPackageTypes = await db.select().from(packageTypes).limit(1);\n      \n      if (existingPackageTypes.length === 0) {\n        // Seed package types\n        await db.insert(packageTypes).values([\n          { name: \"Pacote Básico\", description: \"4 banhos e tosas\", validityDays: 90, totalUses: 4, price: \"150.00\", active: true },\n          { name: \"Pacote Premium\", description: \"8 banhos e tosas + extras\", validityDays: 120, totalUses: 8, price: \"280.00\", active: true },\n          { name: \"Pacote Completo\", description: \"10 serviços variados\", validityDays: 150, totalUses: 10, price: \"350.00\", active: true },\n        ]);\n      }\n    } catch (error) {\n      console.log('Seed data already exists or database not ready yet:', error);\n    }\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers);\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const result = await db.select().from(customers).where(eq(customers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const result = await db.insert(customers).values(insertCustomer).returning();\n    return result[0];\n  }\n\n  async updateCustomer(id: string, customerUpdate: Partial<Customer>): Promise<Customer | undefined> {\n    const result = await db.update(customers)\n      .set(customerUpdate)\n      .where(eq(customers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCustomer(id: string): Promise<boolean> {\n    const result = await db.delete(customers).where(eq(customers.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Pets\n  async getPetsByCustomer(customerId: string): Promise<Pet[]> {\n    return await db.select().from(pets).where(eq(pets.customerId, customerId));\n  }\n\n  async createPet(insertPet: InsertPet): Promise<Pet> {\n    const result = await db.insert(pets).values(insertPet).returning();\n    return result[0];\n  }\n\n  async updatePet(id: string, petUpdate: Partial<Pet>): Promise<Pet | undefined> {\n    const result = await db.update(pets)\n      .set(petUpdate)\n      .where(eq(pets.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Services\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services).where(eq(services.active, true));\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const result = await db.insert(services).values(insertService).returning();\n    return result[0];\n  }\n\n  async updateService(id: string, serviceUpdate: Partial<Service>): Promise<Service | undefined> {\n    const result = await db.update(services)\n      .set(serviceUpdate)\n      .where(eq(services.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Package Types\n  async getPackageTypes(): Promise<PackageType[]> {\n    return await db.select().from(packageTypes).where(eq(packageTypes.active, true));\n  }\n\n  async createPackageType(insertPackageType: InsertPackageType): Promise<PackageType> {\n    const result = await db.insert(packageTypes).values(insertPackageType).returning();\n    return result[0];\n  }\n\n  async updatePackageType(id: string, packageTypeUpdate: Partial<PackageType>): Promise<PackageType | undefined> {\n    const result = await db.update(packageTypes)\n      .set(packageTypeUpdate)\n      .where(eq(packageTypes.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Customer Packages\n  async getCustomerPackages(): Promise<CustomerPackage[]> {\n    return await db.select().from(customerPackages);\n  }\n\n  async getActivePackages(): Promise<CustomerPackage[]> {\n    const now = new Date();\n    return await db.select().from(customerPackages).where(\n      and(\n        eq(customerPackages.status, \"active\"),\n        gte(customerPackages.validUntil, now),\n        gte(customerPackages.remainingUses, 1)\n      )\n    );\n  }\n\n  async createCustomerPackage(insertCustomerPackage: InsertCustomerPackage): Promise<CustomerPackage> {\n    const result = await db.insert(customerPackages).values(insertCustomerPackage).returning();\n    return result[0];\n  }\n\n  async updateCustomerPackage(id: string, packageUpdate: Partial<CustomerPackage>): Promise<CustomerPackage | undefined> {\n    const result = await db.update(customerPackages)\n      .set(packageUpdate)\n      .where(eq(customerPackages.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async renewPackage(packageId: string): Promise<CustomerPackage> {\n    const originalPackage = await db.select().from(customerPackages)\n      .where(eq(customerPackages.id, packageId))\n      .limit(1);\n    \n    if (!originalPackage[0]) throw new Error(\"Package not found\");\n\n    const packageType = await db.select().from(packageTypes)\n      .where(eq(packageTypes.id, originalPackage[0].packageTypeId))\n      .limit(1);\n    \n    if (!packageType[0]) throw new Error(\"Package type not found\");\n\n    // Mark original as renewed\n    await this.updateCustomerPackage(packageId, { status: \"renewed\" });\n\n    // Create new package\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + packageType[0].validityDays);\n\n    return this.createCustomerPackage({\n      customerId: originalPackage[0].customerId,\n      packageTypeId: originalPackage[0].packageTypeId,\n      remainingUses: packageType[0].totalUses,\n      validUntil,\n      status: \"active\",\n      renewedFromId: packageId,\n      purchasePrice: packageType[0].price,\n    });\n  }\n\n  // Package Usage\n  async createPackageUsage(insertUsage: InsertPackageUsage): Promise<PackageUsage> {\n    const result = await db.insert(packageUsages).values(insertUsage).returning();\n\n    // Update package remaining uses\n    const customerPackage = await db.select().from(customerPackages)\n      .where(eq(customerPackages.id, insertUsage.customerPackageId))\n      .limit(1);\n      \n    if (customerPackage[0]) {\n      const newRemainingUses = customerPackage[0].remainingUses - 1;\n      const newStatus = newRemainingUses <= 0 ? \"consumed\" : \"active\";\n      await this.updateCustomerPackage(insertUsage.customerPackageId, {\n        remainingUses: newRemainingUses,\n        status: newStatus\n      });\n    }\n\n    return result[0];\n  }\n\n  async getPackageUsages(packageId: string): Promise<PackageUsage[]> {\n    return await db.select().from(packageUsages)\n      .where(eq(packageUsages.customerPackageId, packageId));\n  }\n\n  // Appointments\n  async getAppointments(): Promise<Appointment[]> {\n    return await db.select().from(appointments);\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const result = await db.insert(appointments).values(insertAppointment).returning();\n    return result[0];\n  }\n\n  async updateAppointment(id: string, appointmentUpdate: Partial<Appointment>): Promise<Appointment | undefined> {\n    const result = await db.update(appointments)\n      .set(appointmentUpdate)\n      .where(eq(appointments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Notifications\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(insertNotification).returning();\n    return result[0];\n  }\n\n  async getNotifications(customerId?: string): Promise<Notification[]> {\n    if (customerId) {\n      return await db.select().from(notifications)\n        .where(eq(notifications.customerId, customerId));\n    }\n    return await db.select().from(notifications);\n  }\n\n  // Dashboard specific methods\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const activePackages = await this.getActivePackages();\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    const renewalsThisMonth = await db.select().from(customerPackages).where(\n      and(\n        eq(customerPackages.renewedFromId, \"not null\" as any), // This is a placeholder, need proper SQL\n        gte(customerPackages.acquiredAt, monthStart)\n      )\n    );\n\n    const expiredPackages = await db.select().from(customerPackages).where(\n      and(\n        lte(customerPackages.validUntil, now),\n        eq(customerPackages.status, \"expired\")\n      )\n    );\n    \n    const totalPackages = await db.select().from(customerPackages);\n    const churnRate = totalPackages.length > 0 ? (expiredPackages.length / totalPackages.length) * 100 : 0;\n\n    // Clients at risk: packages expiring in 15 days or less\n    const riskDate = new Date();\n    riskDate.setDate(riskDate.getDate() + 15);\n    const riskyClients = activePackages.filter(pkg => pkg.validUntil <= riskDate).length;\n\n    return {\n      activePackages: activePackages.length,\n      renewalsThisMonth: renewalsThisMonth.length,\n      churnRate: Number(churnRate.toFixed(1)),\n      riskyClients,\n    };\n  }\n\n  async getActionQueue(): Promise<ActionQueueItem[]> {\n    const items: ActionQueueItem[] = [];\n    const now = new Date();\n    \n    // Get packages that need attention\n    const activePackages = await this.getActivePackages();\n    \n    for (const pkg of activePackages) {\n      const customer = await this.getCustomer(pkg.customerId);\n      const petsResult = await this.getPetsByCustomer(pkg.customerId);\n      const usages = await this.getPackageUsages(pkg.id);\n      \n      if (!customer || petsResult.length === 0) continue;\n\n      const pet = petsResult[0]; // Take first pet for simplicity\n      const daysTillExpiry = Math.ceil((pkg.validUntil.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n      const lastUsage = usages.sort((a, b) => {\n        const aTime = a.usedAt ? a.usedAt.getTime() : 0;\n        const bTime = b.usedAt ? b.usedAt.getTime() : 0;\n        return bTime - aTime;\n      })[0];\n      const daysSinceLastUse = lastUsage && lastUsage.usedAt\n        ? Math.floor((now.getTime() - lastUsage.usedAt.getTime()) / (1000 * 60 * 60 * 24))\n        : 999;\n\n      let priority: \"high\" | \"medium\" | \"low\" = \"low\";\n      let reason = \"\";\n\n      if (daysTillExpiry <= 3) {\n        priority = \"high\";\n        reason = `Pacote expira em ${daysTillExpiry} dias`;\n      } else if (pkg.remainingUses <= 1) {\n        priority = \"medium\";\n        reason = `Saldo: ${pkg.remainingUses} uso restante`;\n      } else if (daysSinceLastUse >= 25) {\n        priority = \"low\";\n        reason = `Inativo há ${daysSinceLastUse} dias`;\n      } else {\n        continue; // Skip if no action needed\n      }\n\n      items.push({\n        id: pkg.id,\n        customerId: customer.id,\n        customerName: customer.name,\n        petName: pet.name,\n        petBreed: pet.breed || pet.species,\n        petImage: this.getPetImageUrl(pet.species),\n        packageId: pkg.id,\n        priority,\n        reason,\n        expiresIn: daysTillExpiry > 0 ? daysTillExpiry : undefined,\n        remainingUses: pkg.remainingUses,\n        lastUsedDays: daysSinceLastUse < 999 ? daysSinceLastUse : undefined,\n      });\n    }\n\n    // Sort by priority\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return items.sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority]);\n  }\n\n  private getPetImageUrl(species: string): string {\n    const images = {\n      dog: \"https://images.unsplash.com/photo-1552053831-71594a27632d?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\",\n      cat: \"https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\",\n    };\n    return images[species as keyof typeof images] || images.dog;\n  }\n\n  async getRecentActivity(): Promise<any[]> {\n    const activities = [];\n    \n    // Get recent package usages\n    const recentUsages = await db.select().from(packageUsages)\n      .orderBy(desc(packageUsages.usedAt))\n      .limit(5);\n\n    for (const usage of recentUsages) {\n      const customerPackage = await db.select().from(customerPackages)\n        .where(eq(customerPackages.id, usage.customerPackageId))\n        .limit(1);\n        \n      const customer = customerPackage[0] ? await this.getCustomer(customerPackage[0].customerId) : null;\n      const pet = await db.select().from(pets).where(eq(pets.id, usage.petId)).limit(1);\n      const service = await db.select().from(services).where(eq(services.id, usage.serviceId)).limit(1);\n\n      if (customer && pet[0] && service[0] && usage.usedAt) {\n        activities.push({\n          type: \"package_used\",\n          title: \"Pacote usado\",\n          description: `${pet[0].name} (${pet[0].breed || pet[0].species})`,\n          details: `${service[0].name} • ${this.formatTimeAgo(usage.usedAt)}`,\n          icon: \"check\",\n          color: \"green\",\n        });\n      }\n    }\n\n    return activities;\n  }\n\n  async getRevenueByService(): Promise<any[]> {\n    const servicesResult = await this.getServices();\n    const revenues = [];\n\n    for (const service of servicesResult) {\n      const usages = await db.select().from(packageUsages)\n        .where(eq(packageUsages.serviceId, service.id));\n      \n      const revenue = usages.length * Number(service.basePrice || 0);\n      \n      revenues.push({\n        name: service.name,\n        revenue: revenue,\n        color: this.getServiceColor(service.name),\n      });\n    }\n\n    return revenues.sort((a, b) => b.revenue - a.revenue);\n  }\n\n  private getServiceColor(serviceName: string): string {\n    const colors: Record<string, string> = {\n      \"Banho & Tosa\": \"blue\",\n      \"Tosa Higiênica\": \"green\",\n      \"Corte de Unhas\": \"purple\",\n      \"Hidratação\": \"orange\",\n    };\n    return colors[serviceName] || \"gray\";\n  }\n\n  private formatTimeAgo(date: Date): string {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"há poucos minutos\";\n    if (diffInHours < 24) return `há ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `há ${diffInDays} dia${diffInDays > 1 ? 's' : ''}`;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":19107},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Configure sessions\nconst MemoryStoreSession = MemoryStore(session);\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'gloss-pet-secret-key-2025',\n  resave: false,\n  saveUninitialized: false,\n  store: new MemoryStoreSession({\n    checkPeriod: 86400000 // prune expired entries every 24h\n  }),\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    httpOnly: true\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2594},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, DatabaseStorage } from \"./storage\";\nimport { insertCustomerSchema, insertPetSchema, insertPackageUsageSchema, insertAppointmentSchema, insertCustomerPackageSchema, insertCompanySchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\nimport session from \"express-session\";\n\n// Extend session to include user\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: {\n      id: string;\n      email: string;\n      name: string;\n      role: string;\n      companyId: string;\n      company: {\n        id: string;\n        name: string;\n      };\n    };\n  }\n}\n\n// Auth middleware\nconst requireAuth = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.session?.user) {\n    return res.status(401).json({ error: 'Não autorizado' });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Simple admin login for demo purposes\n      if (email === 'admin' && password === 'admin') {\n        // Create session for demo user\n        req.session.user = {\n          id: 'demo-admin',\n          email: 'admin',\n          name: 'Administrador',\n          role: 'admin',\n          companyId: '550e8400-e29b-41d4-a716-446655440000',\n          company: {\n            id: '550e8400-e29b-41d4-a716-446655440000',\n            name: 'Gloss Pet',\n          },\n        };\n        \n        res.json(req.session.user);\n        return;\n      }\n      \n      // Try to authenticate against database users\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (user && await bcrypt.compare(password, user.password)) {\n          req.session.user = {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            companyId: user.companyId,\n            company: {\n              id: user.companyId,\n              name: 'Gloss Pet', // Could fetch from companies table\n            },\n          };\n          \n          res.json(req.session.user);\n          return;\n        }\n      } catch (dbError) {\n        console.error('Database authentication error:', dbError);\n      }\n      \n      return res.status(401).json({ error: 'Usuário ou senha incorretos' });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.session?.user) {\n      res.json(req.session.user);\n    } else {\n      res.status(401).json({ error: 'Não autenticado' });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ error: 'Erro ao fazer logout' });\n      }\n      res.json({ message: 'Logout realizado com sucesso' });\n    });\n  });\n  \n  // Dashboard routes (protected)\n  app.get(\"/api/dashboard/metrics\", requireAuth, async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/action-queue\", requireAuth, async (req, res) => {\n    try {\n      const actionQueue = await storage.getActionQueue();\n      res.json(actionQueue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch action queue\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activity\", requireAuth, async (req, res) => {\n    try {\n      const activity = await storage.getRecentActivity();\n      res.json(activity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/revenue\", requireAuth, async (req, res) => {\n    try {\n      const revenue = await storage.getRevenueByService();\n      console.log('Revenue data from storage:', revenue);\n      res.json(revenue);\n    } catch (error) {\n      console.error('Error getting revenue data:', error);\n      res.status(500).json({ message: \"Failed to fetch revenue data\" });\n    }\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const customers = await storage.getCustomersWithPetCount(user.companyId);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const { pets, packages, ...customerBody } = req.body;\n      \n      // Convert empty strings to null for optional fields\n      const cleanData = Object.entries(customerBody).reduce((acc, [key, value]) => {\n        acc[key] = value === \"\" ? null : value;\n        return acc;\n      }, {} as any);\n      \n      // Add companyId to customer data\n      const customerData = {\n        ...cleanData,\n        companyId: user.companyId\n      };\n      \n      console.log(\"Creating customer with data:\", customerData);\n      console.log(\"Pets to create:\", pets);\n      console.log(\"Packages to create:\", packages);\n      \n      // Create customer first\n      const customer = await storage.createCustomer(customerData);\n      \n      // Create pets for this customer\n      if (pets && pets.length > 0) {\n        for (const petData of pets) {\n          const cleanPetData = Object.entries(petData).reduce((acc, [key, value]) => {\n            acc[key] = value === \"\" ? null : value;\n            return acc;\n          }, {} as any);\n          \n          const petToCreate = {\n            ...cleanPetData,\n            customerId: customer.id\n          };\n          \n          console.log(\"Creating pet:\", petToCreate);\n          await storage.createPet(petToCreate);\n        }\n      }\n      \n      // Create packages for this customer\n      if (packages && packages.length > 0) {\n        for (const packageData of packages) {\n          const packageType = await storage.getPackageType(packageData.packageTypeId);\n          if (packageType) {\n            const packageToCreate = {\n              customerId: customer.id,\n              packageTypeId: packageData.packageTypeId,\n              remainingUses: packageType.totalUses,\n              validUntil: new Date(new Date(packageData.startDate).getTime() + packageType.validityDays * 24 * 60 * 60 * 1000),\n              status: \"ativo\",\n              purchasePrice: packageType.price,\n              acquiredAt: new Date(packageData.startDate)\n            };\n            \n            console.log(\"Creating package:\", packageToCreate);\n            await storage.createCustomerPackage(packageToCreate);\n          }\n        }\n      }\n      \n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.get(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      // Get customer's pets\n      const pets = await storage.getPetsByCustomer(req.params.id);\n      \n      // Get customer's packages with full details\n      const customerPackages = await storage.getCustomerPackagesByCustomer(req.params.id);\n      \n      // Get package types for packages\n      const packagesWithDetails = await Promise.all(\n        customerPackages.map(async (pkg) => {\n          const packageType = await storage.getPackageType(pkg.packageTypeId);\n          return {\n            ...pkg,\n            packageType\n          };\n        })\n      );\n      \n      const customerWithDetails = {\n        ...customer,\n        pets,\n        packages: packagesWithDetails\n      };\n      \n      res.json(customerWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  app.patch(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    try {\n      const updates = req.body;\n      const customer = await storage.updateCustomer(req.params.id, updates);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      \n      // Convert empty strings to null for optional fields\n      const cleanData = Object.entries(req.body).reduce((acc, [key, value]) => {\n        acc[key] = value === \"\" ? null : value;\n        return acc;\n      }, {} as any);\n      \n      // Add companyId to customer data\n      const customerData = {\n        ...cleanData,\n        companyId: user.companyId\n      };\n      \n      console.log(\"Updating customer with data:\", customerData);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deleteCustomer(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json({ message: \"Customer deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Pet routes\n  app.get(\"/api/pets\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const pets = await storage.getPets(user.companyId);\n      res.json(pets);\n    } catch (error) {\n      console.error(\"Error fetching pets:\", error);\n      res.status(500).json({ message: \"Failed to fetch pets\" });\n    }\n  });\n\n  app.get(\"/api/customers/:customerId/pets\", async (req, res) => {\n    try {\n      const pets = await storage.getPetsByCustomer(req.params.customerId);\n      res.json(pets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pets\" });\n    }\n  });\n\n  app.post(\"/api/pets\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating pet with data:\", req.body);\n      const petData = req.body;\n      \n      // Clean and validate data\n      const cleanData = {\n        ...petData,\n        weight: petData.weight ? parseFloat(petData.weight) : null,\n        birthDate: petData.birthDate || null,\n      };\n      \n      const pet = await storage.createPet(cleanData);\n      res.status(201).json(pet);\n    } catch (error) {\n      console.error(\"Error creating pet:\", error);\n      res.status(500).json({ message: \"Failed to create pet\", error: error.message });\n    }\n  });\n\n  app.patch(\"/api/pets/:id\", requireAuth, async (req, res) => {\n    try {\n      const updates = req.body;\n      const pet = await storage.updatePet(req.params.id, updates);\n      if (!pet) {\n        return res.status(404).json({ message: \"Pet not found\" });\n      }\n      res.json(pet);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pet\" });\n    }\n  });\n\n  app.get(\"/api/pets\", requireAuth, async (req, res) => {\n    try {\n      const pets = await storage.getPets(req.session.user!.companyId);\n      res.json(pets);\n    } catch (error) {\n      console.error(\"Error fetching pets:\", error);\n      res.status(500).json({ error: \"Failed to fetch pets\" });\n    }\n  });\n\n  app.post(\"/api/pets\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating pet with data:\", req.body);\n      \n      const result = insertPetSchema.omit({ customerId: true }).extend({\n        customerId: z.string().min(1, \"Cliente é obrigatório\"),\n        birthDate: z.string().optional().nullable(),\n      }).safeParse(req.body);\n      \n      if (!result.success) {\n        console.error(\"Validation error:\", result.error);\n        return res.status(400).json({\n          error: \"Dados inválidos\",\n          details: result.error.flatten().fieldErrors\n        });\n      }\n\n      const petData = {\n        ...result.data,\n        birthDate: result.data.birthDate ? new Date(result.data.birthDate) : null,\n      };\n\n      const pet = await storage.createPet(petData);\n      console.log(\"Pet created successfully:\", pet);\n      res.status(201).json(pet);\n    } catch (error) {\n      console.error(\"Error creating pet:\", error);\n      res.status(500).json({ error: \"Failed to create pet\" });\n    }\n  });\n\n  app.put(\"/api/pets/:id\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Updating pet with data:\", req.body);\n      \n      const result = insertPetSchema.omit({ customerId: true }).extend({\n        customerId: z.string().min(1, \"Cliente é obrigatório\"),\n        birthDate: z.string().optional().nullable(),\n      }).safeParse(req.body);\n      \n      if (!result.success) {\n        console.error(\"Validation error:\", result.error);\n        return res.status(400).json({\n          error: \"Dados inválidos\",\n          details: result.error.flatten().fieldErrors\n        });\n      }\n\n      const petData = {\n        ...result.data,\n        birthDate: result.data.birthDate ? new Date(result.data.birthDate) : null,\n      };\n\n      const pet = await storage.updatePet(req.params.id, petData);\n      if (!pet) {\n        return res.status(404).json({ message: \"Pet not found\" });\n      }\n      console.log(\"Pet updated successfully:\", pet);\n      res.json(pet);\n    } catch (error) {\n      console.error(\"Error updating pet:\", error);\n      res.status(500).json({ error: \"Failed to update pet\" });\n    }\n  });\n\n  app.delete(\"/api/pets/:id\", requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deletePet(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Pet not found\" });\n      }\n      res.json({ message: \"Pet deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete pet\" });\n    }\n  });\n\n  // Service routes\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Package Type routes\n  app.get(\"/api/package-types\", requireAuth, async (req, res) => {\n    try {\n      const packageTypes = await storage.getPackageTypes();\n      res.json(packageTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch package types\" });\n    }\n  });\n\n  app.post(\"/api/package-types\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating package type with data:\", req.body);\n      const packageData = req.body;\n      const packageType = await storage.createPackageType(packageData);\n      console.log(\"Package type created successfully:\", packageType);\n      res.status(201).json(packageType);\n    } catch (error) {\n      console.error(\"Error creating package type:\", error);\n      res.status(500).json({ message: \"Failed to create package type\", error: error.message });\n    }\n  });\n\n  app.patch(\"/api/package-types/:id\", requireAuth, async (req, res) => {\n    try {\n      const updates = req.body;\n      const packageType = await storage.updatePackageType(req.params.id, updates);\n      if (!packageType) {\n        return res.status(404).json({ message: \"Package type not found\" });\n      }\n      res.json(packageType);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update package type\" });\n    }\n  });\n\n  app.put(\"/api/package-types/:id\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Updating package type with data:\", req.body);\n      const packageData = req.body;\n      const packageType = await storage.updatePackageType(req.params.id, packageData);\n      if (!packageType) {\n        return res.status(404).json({ message: \"Package type not found\" });\n      }\n      console.log(\"Package type updated successfully:\", packageType);\n      res.json(packageType);\n    } catch (error) {\n      console.error(\"Error updating package type:\", error);\n      res.status(500).json({ message: \"Failed to update package type\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/package-types/:id\", requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deletePackageType(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Package type not found\" });\n      }\n      res.json({ message: \"Package type deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete package type\" });\n    }\n  });\n\n  // Customer Package routes\n  app.get(\"/api/customer-packages\", requireAuth, async (req, res) => {\n    try {\n      const customerPackages = await storage.getCustomerPackages();\n      res.json(customerPackages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer packages\" });\n    }\n  });\n\n  // Package Type routes\n  app.get(\"/api/package-types\", async (req, res) => {\n    try {\n      const packageTypes = await storage.getPackageTypes();\n      res.json(packageTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch package types\" });\n    }\n  });\n\n  // Customer Package routes\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const packages = await storage.getCustomerPackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch packages\" });\n    }\n  });\n\n  app.get(\"/api/packages/active\", async (req, res) => {\n    try {\n      const packages = await storage.getActivePackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active packages\" });\n    }\n  });\n\n  app.post(\"/api/packages\", async (req, res) => {\n    try {\n      const packageData = insertCustomerPackageSchema.parse(req.body);\n      const customerPackage = await storage.createCustomerPackage(packageData);\n      res.status(201).json(customerPackage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid package data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create package\" });\n      }\n    }\n  });\n\n  app.post(\"/api/packages/:id/renew\", async (req, res) => {\n    try {\n      const renewedPackage = await storage.renewPackage(req.params.id);\n      res.json(renewedPackage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to renew package\" });\n    }\n  });\n\n  // Package Usage routes\n  app.post(\"/api/packages/:id/use\", async (req, res) => {\n    try {\n      const usageData = insertPackageUsageSchema.parse({\n        ...req.body,\n        customerPackageId: req.params.id\n      });\n      const usage = await storage.createPackageUsage(usageData);\n      res.status(201).json(usage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid usage data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to register package usage\" });\n      }\n    }\n  });\n\n  app.get(\"/api/packages/:id/usages\", async (req, res) => {\n    try {\n      const usages = await storage.getPackageUsages(req.params.id);\n      res.json(usages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch package usages\" });\n    }\n  });\n\n  // Appointment routes\n  app.get(\"/api/appointments\", requireAuth, async (req, res) => {\n    try {\n      const appointments = await storage.getAppointments();\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching appointments:\", error);\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.get(\"/api/appointments/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getAppointmentStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching appointment stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch appointment stats\" });\n    }\n  });\n\n  app.post(\"/api/appointments\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating appointment with data:\", req.body);\n      \n      // Transform the data to match database schema\n      const appointmentData = {\n        ...req.body,\n        scheduledDate: new Date(`${req.body.date}T${req.body.time}:00`),\n      };\n      \n      // Remove frontend fields not needed in database\n      delete appointmentData.date;\n      delete appointmentData.time;\n      \n      const validatedData = insertAppointmentSchema.parse(appointmentData);\n      const appointment = await storage.createAppointment(validatedData);\n      console.log(\"Appointment created successfully:\", appointment);\n      res.status(201).json(appointment);\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid appointment data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create appointment\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/appointments/:id\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Updating appointment with data:\", req.body);\n      const updates = req.body;\n      const appointment = await storage.updateAppointment(req.params.id, updates);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      console.log(\"Appointment updated successfully:\", appointment);\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error updating appointment:\", error);\n      res.status(500).json({ message: \"Failed to update appointment\" });\n    }\n  });\n\n  app.delete(\"/api/appointments/:id\", requireAuth, async (req, res) => {\n    try {\n      const deleted = await storage.deleteAppointment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json({ message: \"Appointment deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting appointment:\", error);\n      res.status(500).json({ message: \"Failed to delete appointment\" });\n    }\n  });\n\n  // Support endpoints\n  app.post(\"/api/support/send-email\", async (req, res) => {\n    try {\n      const { name, email, subject, category, message } = req.body;\n      \n      // TODO: Implement SendGrid email sending\n      // For now, just log and return success\n      console.log('Support email received:', { name, email, subject, category, message });\n      \n      res.json({ success: true, message: \"Support email sent successfully\" });\n    } catch (error) {\n      console.error('Support email error:', error);\n      res.status(500).json({ message: \"Failed to send support email\" });\n    }\n  });\n\n  // Users routes\n  app.get(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const userSession = req.session.user!;\n      const userStorage = new DatabaseStorage(userSession.companyId);\n      const users = await userStorage.getUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const userSession = req.session.user!;\n      const userStorage = new DatabaseStorage(userSession.companyId);\n      \n      const userDataForValidation = { ...req.body };\n      const validatedData = insertUserSchema.parse(userDataForValidation);\n      const user = await userStorage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create user\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/users/:id/toggle-status\", requireAuth, async (req, res) => {\n    try {\n      const userSession = req.session.user!;\n      const userStorage = new DatabaseStorage(userSession.companyId);\n      const { isActive } = req.body;\n      const user = await userStorage.toggleUserStatus(req.params.id, isActive);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error toggling user status:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const userSession = req.session.user!;\n      const userStorage = new DatabaseStorage(userSession.companyId);\n      await userStorage.deleteUser(req.params.id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Client requests endpoints\n  app.get(\"/api/client-requests\", async (req, res) => {\n    try {\n      // Return demo client requests for now\n      const demoRequests = [\n        {\n          id: \"1\",\n          customerName: \"Maria Silva\",\n          type: \"feedback\",\n          subject: \"Excelente atendimento!\",\n          message: \"Adorei o novo sistema de agendamento. Muito mais fácil marcar os banhos da Luna.\",\n          status: \"resolved\",\n          priority: \"low\",\n          createdAt: \"2025-01-10T14:30:00\",\n          rating: 5\n        }\n      ];\n      res.json(demoRequests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch client requests\" });\n    }\n  });\n\n  // Messages routes\n  app.get(\"/api/messages\", requireAuth, async (req, res) => {\n    try {\n      // Return demo messages for now\n      const demoMessages = [\n        {\n          id: \"msg_001\",\n          customerName: \"Maria Silva\", \n          customerId: \"cust_001\",\n          type: \"whatsapp\",\n          content: \"Olá! Seu agendamento para Luna está confirmado para amanhã às 09:00h\",\n          status: \"delivered\",\n          createdAt: \"2025-01-10T16:30:00\",\n          direction: \"sent\"\n        },\n        {\n          id: \"msg_002\",\n          customerName: \"João Santos\",\n          customerId: \"cust_002\", \n          type: \"whatsapp\",\n          content: \"Obrigado! Estaremos lá pontualmente.\",\n          status: \"read\",\n          createdAt: \"2025-01-10T17:15:00\",\n          direction: \"received\"\n        },\n        {\n          id: \"msg_003\",\n          customerName: \"Ana Costa\",\n          customerId: \"cust_003\",\n          type: \"email\",\n          subject: \"Lembrete de agendamento\",\n          content: \"Lembramos que o banho da Mel está agendado para amanhã às 10:00h\",\n          status: \"sent\", \n          createdAt: \"2025-01-11T08:00:00\",\n          direction: \"sent\"\n        }\n      ];\n      res.json(demoMessages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/messages/send\", requireAuth, async (req, res) => {\n    try {\n      const { customerId, type, subject, content } = req.body;\n      \n      // Log message sending\n      console.log(`Sending ${type} message to customer ${customerId}: ${content}`);\n      \n      // Create notification record\n      await storage.createNotification({\n        customerId,\n        type: \"manual_message\",\n        title: subject || \"Nova mensagem\",\n        message: content,\n        read: false\n      });\n\n      res.json({ success: true, message: \"Message sent successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // WhatsApp integration placeholder\n  app.post(\"/api/whatsapp/send\", requireAuth, async (req, res) => {\n    try {\n      const { customerId, message, type } = req.body;\n      \n      // Create notification record\n      await storage.createNotification({\n        customerId,\n        type: type || \"manual\",\n        title: \"Mensagem WhatsApp\",\n        message,\n        read: false\n      });\n\n      res.json({ success: true, message: \"Message sent via WhatsApp\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send WhatsApp message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29130},"server/storage.ts":{"content":"import { \n  type Company, type InsertCompany, type User, type InsertUser, type Customer, type InsertCustomer,\n  type Pet, type InsertPet, type Service, type InsertService,\n  type PackageType, type InsertPackageType, type PackageTypeService, type InsertPackageTypeService,\n  type CustomerPackage, type InsertCustomerPackage, type CustomerPackageService, type InsertCustomerPackageService,\n  type PackageUsage, type InsertPackageUsage, type Appointment, type InsertAppointment,\n  type Notification, type InsertNotification,\n  companies, users, customers, pets, services, packageTypes, packageTypeServices, customerPackages, \n  customerPackageServices, packageUsages, appointments, notifications\n} from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, and, gte, lte, desc, count, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\n// Extended interfaces for dashboard data\nexport interface DashboardMetrics {\n  activePackages: number;\n  renewalsThisMonth: number;\n  churnRate: number;\n  riskyClients: number;\n}\n\nexport interface ActionQueueItem {\n  id: string;\n  customerId: string;\n  customerName: string;\n  petName: string;\n  petBreed: string;\n  petImage: string;\n  packageId: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  reason: string;\n  expiresIn?: number;\n  remainingUses?: number;\n  lastUsedDays?: number;\n}\n\nexport interface CustomerWithPackages extends Customer {\n  packages: CustomerPackage[];\n  pets: Pet[];\n}\n\nexport interface IStorage {\n  // Companies\n  getCompany(id: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string, companyId?: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLastLogin(id: string): Promise<void>;\n\n  // Customers\n  getCustomers(companyId?: string): Promise<Customer[]>;\n  getCustomersWithPetCount(companyId?: string): Promise<(Customer & { petCount: number })[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<Customer>): Promise<Customer | undefined>;\n  deleteCustomer(id: string): Promise<boolean>;\n\n  // Pets\n  getPets(companyId?: string): Promise<(Pet & { customerName?: string })[]>;\n  getPetsByCustomer(customerId: string): Promise<Pet[]>;\n  createPet(pet: InsertPet): Promise<Pet>;\n  updatePet(id: string, pet: Partial<Pet>): Promise<Pet | undefined>;\n  deletePet(id: string): Promise<boolean>;\n\n  // Services\n  getServices(): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<Service>): Promise<Service | undefined>;\n\n  // Package Types\n  getPackageTypes(): Promise<PackageType[]>;\n  createPackageType(packageType: InsertPackageType): Promise<PackageType>;\n  updatePackageType(id: string, packageType: Partial<PackageType>): Promise<PackageType | undefined>;\n\n  // Customer Packages\n  getCustomerPackages(): Promise<CustomerPackage[]>;\n  getActivePackages(): Promise<CustomerPackage[]>;\n  createCustomerPackage(customerPackage: InsertCustomerPackage): Promise<CustomerPackage>;\n  updateCustomerPackage(id: string, customerPackage: Partial<CustomerPackage>): Promise<CustomerPackage | undefined>;\n  renewPackage(packageId: string): Promise<CustomerPackage>;\n\n  // Package Usage\n  createPackageUsage(usage: InsertPackageUsage): Promise<PackageUsage>;\n  getPackageUsages(packageId: string): Promise<PackageUsage[]>;\n\n  // Appointments\n  getAppointments(): Promise<any[]>;\n  getAppointmentStats(): Promise<{ today: number; thisWeek: number; pending: number; occupancyRate: number; }>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<Appointment>): Promise<Appointment | undefined>;\n  deleteAppointment(id: string): Promise<boolean>;\n\n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotifications(customerId?: string): Promise<Notification[]>;\n\n  // Dashboard specific methods\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n  getActionQueue(): Promise<ActionQueueItem[]>;\n  getRecentActivity(): Promise<any[]>;\n  getRevenueByService(): Promise<any[]>;\n}\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DatabaseStorage implements IStorage {\n  private companyId: string;\n\n  constructor(companyId: string = '550e8400-e29b-41d4-a716-446655440000') {\n    this.companyId = companyId;\n  }\n\n  // Seed method removed - data should be seeded via migrations or admin interface\n\n  // Companies\n  async getCompany(id: string): Promise<Company | undefined> {\n    try {\n      const result = await db.select().from(companies).where(eq(companies.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.log('Database error getting company:', error);\n      return undefined;\n    }\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const result = await db.insert(companies).values(insertCompany).returning();\n    return result[0];\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const result = await db.select()\n        .from(users)\n        .leftJoin(companies, eq(users.companyId, companies.id))\n        .where(eq(users.id, id))\n        .limit(1);\n      \n      if (result[0]) {\n        return {\n          ...result[0].users,\n          company: result[0].companies\n        } as any;\n      }\n      return undefined;\n    } catch (error) {\n      console.log('Database error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByEmail(email: string, companyId?: string): Promise<User | undefined> {\n    try {\n      let query = db.select()\n        .from(users)\n        .leftJoin(companies, eq(users.companyId, companies.id))\n        .where(eq(users.email, email));\n\n      if (companyId) {\n        query = query.where(and(eq(users.email, email), eq(users.companyId, companyId))) as any;\n      }\n\n      const result = await query.limit(1);\n      \n      if (result[0]) {\n        return {\n          ...result[0].users,\n          company: result[0].companies\n        } as any;\n      }\n      return undefined;\n    } catch (error) {\n      console.log('Database error getting user by email:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUserLastLogin(id: string): Promise<void> {\n    try {\n      await db.update(users)\n        .set({ lastLoginAt: new Date() })\n        .where(eq(users.id, id));\n    } catch (error) {\n      console.log('Database error updating user last login:', error);\n    }\n  }\n\n  // Customers\n  async getCustomers(companyId?: string): Promise<Customer[]> {\n    if (companyId) {\n      return await db.select().from(customers).where(eq(customers.companyId, companyId)).orderBy(desc(customers.createdAt));\n    }\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomersWithPetCount(companyId?: string): Promise<(Customer & { petCount: number })[]> {\n    const query = db\n      .select({\n        id: customers.id,\n        companyId: customers.companyId,\n        name: customers.name,\n        phone: customers.phone,\n        email: customers.email,\n        notes: customers.notes,\n        address: customers.address,\n        cep: customers.cep,\n        city: customers.city,\n        state: customers.state,\n        neighborhood: customers.neighborhood,\n        complement: customers.complement,\n        createdAt: customers.createdAt,\n        petCount: count(pets.id).as('petCount')\n      })\n      .from(customers)\n      .leftJoin(pets, eq(customers.id, pets.customerId))\n      .groupBy(customers.id)\n      .orderBy(desc(customers.createdAt));\n\n    if (companyId) {\n      return await query.where(eq(customers.companyId, companyId));\n    }\n    return await query;\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const result = await db.select().from(customers).where(eq(customers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const result = await db.insert(customers).values(insertCustomer).returning();\n    return result[0];\n  }\n\n  async updateCustomer(id: string, customerUpdate: Partial<Customer>): Promise<Customer | undefined> {\n    const result = await db.update(customers)\n      .set(customerUpdate)\n      .where(eq(customers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCustomer(id: string): Promise<boolean> {\n    const result = await db.delete(customers).where(eq(customers.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Pets\n  async getAllPets(): Promise<Pet[]> {\n    return await db.select().from(pets);\n  }\n\n  async getPets(companyId?: string): Promise<(Pet & { customerName?: string })[]> {\n    try {\n      const result = await db.select({\n        id: pets.id,\n        customerId: pets.customerId,\n        name: pets.name,\n        species: pets.species,\n        breed: pets.breed,\n        weight: pets.weight,\n        birthDate: pets.birthDate,\n        gender: pets.gender,\n        color: pets.color,\n        specialNeeds: pets.specialNeeds,\n        preferredFood: pets.preferredFood,\n        notes: pets.notes,\n        createdAt: pets.createdAt,\n        updatedAt: pets.updatedAt,\n        customerName: customers.name,\n      })\n      .from(pets)\n      .leftJoin(customers, eq(pets.customerId, customers.id));\n      \n      return result as (Pet & { customerName?: string })[];\n    } catch (error) {\n      console.log('Database error getting pets:', error);\n      return [];\n    }\n  }\n\n  async getPetsByCustomer(customerId: string): Promise<Pet[]> {\n    try {\n      return await db.select().from(pets).where(eq(pets.customerId, customerId));\n    } catch (error) {\n      console.log('Database error:', error);\n      return [];\n    }\n  }\n\n  async createPet(insertPet: InsertPet): Promise<Pet> {\n    const petData = {\n      ...insertPet,\n      id: undefined, // Let DB generate\n      weight: insertPet.weight ? parseFloat(insertPet.weight.toString()) : null,\n      birthDate: insertPet.birthDate ? new Date(insertPet.birthDate) : null,\n    };\n    const result = await db.insert(pets).values(petData).returning();\n    return result[0];\n  }\n\n  async updatePet(id: string, petUpdate: Partial<Pet>): Promise<Pet | null> {\n    try {\n      const updateData = {\n        ...petUpdate,\n        weight: petUpdate.weight ? parseFloat(petUpdate.weight.toString()) : null,\n        birthDate: petUpdate.birthDate ? new Date(petUpdate.birthDate) : null,\n        updatedAt: new Date(),\n      };\n      const result = await db.update(pets)\n        .set(updateData)\n        .where(eq(pets.id, id))\n        .returning();\n      return result[0] || null;\n    } catch (error) {\n      console.log('Database error updating pet:', error);\n      return null;\n    }\n  }\n\n  async deletePet(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(pets)\n        .where(eq(pets.id, id))\n        .returning();\n      return result.length > 0;\n    } catch (error) {\n      console.log('Database error deleting pet:', error);\n      return false;\n    }\n  }\n\n  // Services\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services).where(eq(services.active, true));\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const result = await db.insert(services).values(insertService).returning();\n    return result[0];\n  }\n\n  async updateService(id: string, serviceUpdate: Partial<Service>): Promise<Service | undefined> {\n    const result = await db.update(services)\n      .set(serviceUpdate)\n      .where(eq(services.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Package Types\n  async getPackageTypes(): Promise<PackageType[]> {\n    return await db.select().from(packageTypes).where(eq(packageTypes.active, true));\n  }\n\n  async getPackageType(id: string): Promise<PackageType | undefined> {\n    const result = await db.select().from(packageTypes).where(eq(packageTypes.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPackageType(insertPackageType: InsertPackageType): Promise<PackageType> {\n    const result = await db.insert(packageTypes).values(insertPackageType).returning();\n    return result[0];\n  }\n\n  async updatePackageType(id: string, packageTypeUpdate: Partial<PackageType>): Promise<PackageType | undefined> {\n    const result = await db.update(packageTypes)\n      .set(packageTypeUpdate)\n      .where(eq(packageTypes.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePackageType(id: string): Promise<boolean> {\n    const result = await db.update(packageTypes)\n      .set({ active: false })\n      .where(eq(packageTypes.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Customer Packages\n  async getCustomerPackages(): Promise<any[]> {\n    try {\n      const result = await db.select({\n        id: customerPackages.id,\n        customerName: customers.name,\n        packageTypeName: packageTypes.name,\n        purchaseDate: customerPackages.acquiredAt,\n        expiryDate: customerPackages.validUntil,\n        remainingUses: customerPackages.remainingUses,\n        totalUses: packageTypes.totalUses,\n        status: customerPackages.status,\n        customerId: customerPackages.customerId,\n        packageTypeId: customerPackages.packageTypeId\n      })\n      .from(customerPackages)\n      .leftJoin(customers, eq(customerPackages.customerId, customers.id))\n      .leftJoin(packageTypes, eq(customerPackages.packageTypeId, packageTypes.id))\n      .orderBy(desc(customerPackages.acquiredAt));\n      \n      console.log('Customer packages fetched:', result.length);\n      return result;\n    } catch (error) {\n      console.error('Error fetching customer packages:', error);\n      return [];\n    }\n  }\n\n  // Package Analytics\n  async getPackageAnalytics(): Promise<any> {\n    try {\n      // Get package types with active clients and revenue\n      const packageTypesQuery = await db\n        .select({\n          id: packageTypes.id,\n          name: packageTypes.name,\n          price: packageTypes.price,\n          totalUses: packageTypes.totalUses,\n          activeClients: count(customerPackages.id).as('activeClients'),\n          totalRevenue: sum(customerPackages.purchasePrice).as('totalRevenue'),\n          usedCount: sum(sql`${packageTypes.totalUses} - ${customerPackages.remainingUses}`).as('usedCount'),\n          totalPossibleUses: sum(packageTypes.totalUses).as('totalPossibleUses')\n        })\n        .from(packageTypes)\n        .leftJoin(customerPackages, and(\n          eq(packageTypes.id, customerPackages.packageTypeId),\n          eq(customerPackages.status, 'ativo')\n        ))\n        .where(eq(packageTypes.active, true))\n        .groupBy(packageTypes.id);\n\n      // Calculate average usage for each package type\n      const packageAnalytics = packageTypesQuery.map(pkg => ({\n        id: pkg.id,\n        name: pkg.name,\n        price: pkg.price,\n        activeClients: pkg.activeClients,\n        totalRevenue: Number(pkg.totalRevenue) || 0,\n        averageUsage: pkg.totalPossibleUses ? Math.round((Number(pkg.usedCount) / Number(pkg.totalPossibleUses)) * 100) : 0\n      }));\n\n      // Get most used services (mock data for now - would need service usage tracking)\n      const mostUsedServices = [\n        { serviceName: \"Banho e Tosa\", usageCount: 45, percentage: 35 },\n        { serviceName: \"Apenas Banho\", usageCount: 38, percentage: 30 },\n        { serviceName: \"Corte de Unhas\", usageCount: 25, percentage: 20 },\n        { serviceName: \"Limpeza de Ouvidos\", usageCount: 19, percentage: 15 }\n      ];\n\n      // Overall statistics\n      const totalActivePackages = await db\n        .select({ count: count() })\n        .from(customerPackages)\n        .where(eq(customerPackages.status, 'ativo'));\n\n      const totalActiveClients = await db\n        .select({ count: count(customers.id) })\n        .from(customers)\n        .innerJoin(customerPackages, eq(customers.id, customerPackages.customerId))\n        .where(eq(customerPackages.status, 'ativo'));\n\n      const totalRevenue = packageAnalytics.reduce((sum, pkg) => sum + pkg.totalRevenue, 0);\n      const averageUtilization = packageAnalytics.length > 0 \n        ? Math.round(packageAnalytics.reduce((sum, pkg) => sum + pkg.averageUsage, 0) / packageAnalytics.length)\n        : 0;\n\n      return {\n        packageTypes: packageAnalytics,\n        mostUsedServices,\n        overallStats: {\n          totalActivePackages: totalActivePackages[0]?.count || 0,\n          totalActiveClients: totalActiveClients[0]?.count || 0,\n          averagePackageUtilization: averageUtilization,\n          monthlyRecurringRevenue: totalRevenue\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching package analytics:', error);\n      return {\n        packageTypes: [],\n        mostUsedServices: [],\n        overallStats: {\n          totalActivePackages: 0,\n          totalActiveClients: 0,\n          averagePackageUtilization: 0,\n          monthlyRecurringRevenue: 0\n        }\n      };\n    }\n  }\n\n  async getCustomerPackagesByCustomer(customerId: string): Promise<CustomerPackage[]> {\n    return await db.select().from(customerPackages).where(eq(customerPackages.customerId, customerId));\n  }\n\n  async getActivePackages(): Promise<CustomerPackage[]> {\n    const now = new Date();\n    return await db.select().from(customerPackages).where(\n      and(\n        eq(customerPackages.status, \"ativo\"),\n        gte(customerPackages.validUntil, now),\n        gte(customerPackages.remainingUses, 1)\n      )\n    );\n  }\n\n  async createCustomerPackage(insertCustomerPackage: InsertCustomerPackage): Promise<CustomerPackage> {\n    const result = await db.insert(customerPackages).values(insertCustomerPackage).returning();\n    return result[0];\n  }\n\n  async updateCustomerPackage(id: string, packageUpdate: Partial<CustomerPackage>): Promise<CustomerPackage | undefined> {\n    const result = await db.update(customerPackages)\n      .set(packageUpdate)\n      .where(eq(customerPackages.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async renewPackage(packageId: string): Promise<CustomerPackage> {\n    const originalPackage = await db.select().from(customerPackages)\n      .where(eq(customerPackages.id, packageId))\n      .limit(1);\n    \n    if (!originalPackage[0]) throw new Error(\"Package not found\");\n\n    const packageType = await db.select().from(packageTypes)\n      .where(eq(packageTypes.id, originalPackage[0].packageTypeId))\n      .limit(1);\n    \n    if (!packageType[0]) throw new Error(\"Package type not found\");\n\n    // Mark original as renewed\n    await this.updateCustomerPackage(packageId, { status: \"renewed\" });\n\n    // Create new package\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + packageType[0].validityDays);\n\n    return this.createCustomerPackage({\n      customerId: originalPackage[0].customerId,\n      packageTypeId: originalPackage[0].packageTypeId,\n      remainingUses: packageType[0].totalUses,\n      validUntil,\n      status: \"ativo\",\n      renewedFromId: packageId,\n      purchasePrice: packageType[0].price,\n    });\n  }\n\n  // Package Usage\n  async createPackageUsage(insertUsage: InsertPackageUsage): Promise<PackageUsage> {\n    const result = await db.insert(packageUsages).values(insertUsage).returning();\n\n    // Update package remaining uses\n    const customerPackage = await db.select().from(customerPackages)\n      .where(eq(customerPackages.id, insertUsage.customerPackageId))\n      .limit(1);\n      \n    if (customerPackage[0]) {\n      const newRemainingUses = customerPackage[0].remainingUses - 1;\n      const newStatus = newRemainingUses <= 0 ? \"consumido\" : \"ativo\";\n      await this.updateCustomerPackage(insertUsage.customerPackageId, {\n        remainingUses: newRemainingUses,\n        status: newStatus\n      });\n    }\n\n    return result[0];\n  }\n\n  async getPackageUsages(packageId: string): Promise<PackageUsage[]> {\n    return await db.select().from(packageUsages)\n      .where(eq(packageUsages.customerPackageId, packageId));\n  }\n\n  // Users Management\n  async getUsers(): Promise<User[]> {\n    try {\n      const allUsers = await db.select().from(users).where(eq(users.companyId, this.companyId));\n      return allUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  }\n\n  async createUser(userData: any): Promise<User> {\n    try {\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      if (!this.companyId) {\n        throw new Error('CompanyId é obrigatório');\n      }\n      \n      const [user] = await db\n        .insert(users)\n        .values({\n          name: userData.name,\n          email: userData.email,\n          password: hashedPassword,\n          role: userData.role,\n          isActive: userData.isActive !== undefined ? userData.isActive : true,\n          companyId: this.companyId,\n        })\n        .returning();\n      \n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async toggleUserStatus(userId: string, isActive: boolean): Promise<User> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ isActive, updatedAt: new Date() })\n        .where(and(eq(users.id, userId), eq(users.companyId, this.companyId)))\n        .returning();\n      \n      if (!user) {\n        throw new Error('Usuário não encontrado');\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Error toggling user status:', error);\n      throw error;\n    }\n  }\n\n  async deleteUser(userId: string): Promise<void> {\n    try {\n      const result = await db\n        .delete(users)\n        .where(and(eq(users.id, userId), eq(users.companyId, this.companyId)));\n      \n      console.log('User deleted successfully');\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n\n  // Appointments\n  async getAppointments(): Promise<any[]> {\n    try {\n      // First get all appointments using basic Drizzle queries\n      const allAppointments = await db.select().from(appointments).orderBy(appointments.scheduledDate);\n      \n      // Fetch related data for each appointment\n      const appointmentsWithDetails = await Promise.all(\n        allAppointments.map(async (appointment) => {\n          const [customer] = await db.select().from(customers).where(eq(customers.id, appointment.customerId));\n          const [pet] = await db.select().from(pets).where(eq(pets.id, appointment.petId));\n          const [service] = await db.select().from(services).where(eq(services.id, appointment.serviceId));\n          \n          return {\n            ...appointment,\n            customerName: customer?.name || 'Cliente não encontrado',\n            petName: pet?.name || 'Pet não encontrado',\n            serviceName: service?.name || 'Serviço não encontrado',\n            servicePrice: service?.basePrice || 0,\n            serviceDuration: service?.estimatedDuration || 0\n          };\n        })\n      );\n\n      console.log('Appointments fetched from database:', appointmentsWithDetails.length);\n      return appointmentsWithDetails;\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      return [];\n    }\n  }\n\n  async getAppointmentStats(): Promise<{ \n    today: number; \n    thisWeek: number; \n    pending: number; \n    occupancyRate: number; \n  }> {\n    try {\n      const today = new Date();\n      const startOfToday = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n      const endOfToday = new Date(startOfToday);\n      endOfToday.setDate(endOfToday.getDate() + 1);\n\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n\n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(startOfWeek.getDate() + 7);\n\n      // Count appointments for different periods\n      const todayAppointments = await db.select().from(appointments)\n        .where(and(\n          gte(appointments.scheduledDate, startOfToday),\n          lte(appointments.scheduledDate, endOfToday)\n        ));\n\n      const weekAppointments = await db.select().from(appointments)\n        .where(and(\n          gte(appointments.scheduledDate, startOfWeek),\n          lte(appointments.scheduledDate, endOfWeek)\n        ));\n\n      const pendingAppointments = await db.select().from(appointments)\n        .where(\n          eq(appointments.status, 'agendado')\n        );\n\n      // Calculate occupancy rate (assuming 10 hours * 4 slots per hour = 40 slots per day)\n      const availableSlots = 40;\n      const todayCount = todayAppointments.length;\n      const occupancyRate = availableSlots > 0 ? Math.round((todayCount / availableSlots) * 100) : 0;\n\n      return {\n        today: todayCount,\n        thisWeek: weekAppointments.length,\n        pending: pendingAppointments.length,\n        occupancyRate\n      };\n    } catch (error) {\n      console.error('Error calculating appointment stats:', error);\n      return { today: 0, thisWeek: 0, pending: 0, occupancyRate: 0 };\n    }\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const result = await db.insert(appointments).values(insertAppointment).returning();\n    return result[0];\n  }\n\n  async updateAppointment(id: string, appointmentUpdate: Partial<Appointment>): Promise<Appointment | undefined> {\n    const result = await db.update(appointments)\n      .set(appointmentUpdate)\n      .where(eq(appointments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(appointments)\n        .where(eq(appointments.id, id))\n        .returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting appointment:', error);\n      return false;\n    }\n  }\n\n  // Notifications\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const result = await db.insert(notifications).values(insertNotification).returning();\n    return result[0];\n  }\n\n  async getNotifications(customerId?: string): Promise<Notification[]> {\n    if (customerId) {\n      return await db.select().from(notifications)\n        .where(eq(notifications.customerId, customerId));\n    }\n    return await db.select().from(notifications);\n  }\n\n  // Dashboard specific methods\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    try {\n      const now = new Date();\n      const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n      \n      // Count active packages\n      const activePackagesResult = await db.select().from(customerPackages).where(eq(customerPackages.status, 'ativo'));\n      const activePackages = activePackagesResult.length;\n\n      // Count renewals this month (packages acquired this month)\n      const renewalsResult = await db.select().from(customerPackages).where(\n        and(\n          gte(customerPackages.acquiredAt, monthStart),\n          eq(customerPackages.status, 'ativo')\n        )\n      );\n      const renewalsThisMonth = renewalsResult.length;\n\n      // Calculate churn rate (expired packages vs total packages)\n      const totalPackagesResult = await db.select().from(customerPackages);\n      const totalPackages = totalPackagesResult.length;\n\n      const expiredPackagesResult = await db.select().from(customerPackages).where(eq(customerPackages.status, 'expirado'));\n      const expiredPackages = expiredPackagesResult.length;\n\n      const churnRate = totalPackages > 0 ? (expiredPackages / totalPackages) * 100 : 0;\n\n      // Clients at risk: packages expiring in 15 days or less\n      const riskDate = new Date();\n      riskDate.setDate(riskDate.getDate() + 15);\n      \n      const riskyClientsResult = await db.select().from(customerPackages).where(\n        and(\n          eq(customerPackages.status, 'ativo'),\n          lte(customerPackages.validUntil, riskDate)\n        )\n      );\n      const riskyClients = riskyClientsResult.length;\n\n      console.log('Dashboard metrics calculated:', {\n        activePackages,\n        renewalsThisMonth,\n        churnRate: Number(churnRate.toFixed(1)),\n        riskyClients,\n      });\n\n      return {\n        activePackages,\n        renewalsThisMonth,\n        churnRate: Number(churnRate.toFixed(1)),\n        riskyClients,\n      };\n    } catch (error) {\n      console.error('Database error calculating metrics:', error);\n      return {\n        activePackages: 0,\n        renewalsThisMonth: 0,\n        churnRate: 0,\n        riskyClients: 0,\n      };\n    }\n  }\n\n  async getActionQueue(): Promise<ActionQueueItem[]> {\n    try {\n      const items: ActionQueueItem[] = [];\n      const now = new Date();\n      \n      // Get packages that need attention\n      const activePackages = await this.getActivePackages();\n      \n      for (const pkg of activePackages) {\n        const customer = await this.getCustomer(pkg.customerId);\n        const petsResult = await this.getPetsByCustomer(pkg.customerId);\n        const usages = await this.getPackageUsages(pkg.id);\n        \n        if (!customer || petsResult.length === 0) continue;\n\n        const pet = petsResult[0]; // Take first pet for simplicity\n        const daysTillExpiry = Math.ceil((pkg.validUntil.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        const lastUsage = usages.sort((a, b) => {\n          const aTime = a.usedAt ? a.usedAt.getTime() : 0;\n          const bTime = b.usedAt ? b.usedAt.getTime() : 0;\n          return bTime - aTime;\n        })[0];\n        const daysSinceLastUse = lastUsage && lastUsage.usedAt\n          ? Math.floor((now.getTime() - lastUsage.usedAt.getTime()) / (1000 * 60 * 60 * 24))\n          : 999;\n\n        let priority: \"high\" | \"medium\" | \"low\" = \"low\";\n        let reason = \"\";\n\n        if (daysTillExpiry <= 3) {\n          priority = \"high\";\n          reason = `Pacote expira em ${daysTillExpiry} dias`;\n        } else if (pkg.remainingUses <= 1) {\n          priority = \"medium\";\n          reason = `Saldo: ${pkg.remainingUses} uso restante`;\n        } else if (daysSinceLastUse >= 25) {\n          priority = \"low\";\n          reason = `Inativo há ${daysSinceLastUse} dias`;\n        } else {\n          continue; // Skip if no action needed\n        }\n\n        items.push({\n          id: pkg.id,\n          customerId: customer.id,\n          customerName: customer.name,\n          petName: pet.name,\n          petBreed: pet.breed || pet.species,\n          petImage: this.getPetImageUrl(pet.species),\n          packageId: pkg.id,\n          priority,\n          reason,\n          expiresIn: daysTillExpiry > 0 ? daysTillExpiry : undefined,\n          remainingUses: pkg.remainingUses,\n          lastUsedDays: daysSinceLastUse < 999 ? daysSinceLastUse : undefined,\n        });\n      }\n\n      // Sort by priority\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return items.sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority]);\n    } catch (error) {\n      console.error('Database error in getActionQueue:', error);\n      throw error;\n    }\n  }\n\n  private getPetImageUrl(species: string): string {\n    const images = {\n      dog: \"https://images.unsplash.com/photo-1552053831-71594a27632d?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\",\n      cat: \"https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\",\n    };\n    return images[species as keyof typeof images] || images.dog;\n  }\n\n  async getRecentActivity(): Promise<any[]> {\n    try {\n      const activities = [];\n      \n      // Get recent package usages\n      const recentUsages = await db.select().from(packageUsages)\n        .orderBy(desc(packageUsages.usedAt))\n        .limit(5);\n\n      for (const usage of recentUsages) {\n        const customerPackage = await db.select().from(customerPackages)\n          .where(eq(customerPackages.id, usage.customerPackageId))\n          .limit(1);\n          \n        const customer = customerPackage[0] ? await this.getCustomer(customerPackage[0].customerId) : null;\n        const pet = await db.select().from(pets).where(eq(pets.id, usage.petId)).limit(1);\n        const service = await db.select().from(services).where(eq(services.id, usage.serviceId)).limit(1);\n\n        if (customer && pet[0] && service[0] && usage.usedAt) {\n          activities.push({\n            type: \"package_used\",\n            title: \"Pacote usado\",\n            description: `${pet[0].name} (${pet[0].breed || pet[0].species})`,\n            details: `${service[0].name} • ${this.formatTimeAgo(usage.usedAt)}`,\n            icon: \"check\",\n            color: \"green\",\n          });\n        }\n      }\n\n      return activities;\n    } catch (error) {\n      console.error('Database error in getRecentActivity:', error);\n      throw error;\n    }\n  }\n\n  async getRevenueByService(): Promise<any[]> {\n    try {\n      // Get all active packages with their types\n      const packagesWithTypes = await db.select({\n        packageTypeName: packageTypes.name,\n        purchasePrice: customerPackages.purchasePrice\n      })\n      .from(customerPackages)\n      .leftJoin(packageTypes, eq(customerPackages.packageTypeId, packageTypes.id))\n      .where(eq(customerPackages.status, 'ativo'));\n\n      // Group and sum revenues manually\n      const revenueMap = new Map<string, { revenue: number, count: number }>();\n      \n      for (const pkg of packagesWithTypes) {\n        const name = pkg.packageTypeName || 'Pacote Desconhecido';\n        const price = Number(pkg.purchasePrice || 0);\n        \n        if (revenueMap.has(name)) {\n          const current = revenueMap.get(name)!;\n          revenueMap.set(name, {\n            revenue: current.revenue + price,\n            count: current.count + 1\n          });\n        } else {\n          revenueMap.set(name, { revenue: price, count: 1 });\n        }\n      }\n\n      const revenues = Array.from(revenueMap.entries()).map(([name, data]) => ({\n        name,\n        revenue: data.revenue,\n        color: this.getServiceColor(name),\n        packages: data.count\n      }));\n\n      console.log('Revenue by service calculated:', revenues);\n      return revenues.sort((a, b) => b.revenue - a.revenue);\n    } catch (error) {\n      console.error('Database error calculating revenue by service:', error);\n      return [];\n    }\n  }\n\n  private getServiceColor(serviceName: string): string {\n    const colors: Record<string, string> = {\n      \"Banho & Tosa\": \"blue\",\n      \"Tosa Higiênica\": \"green\", \n      \"Corte de Unhas\": \"purple\",\n      \"Hidratação\": \"orange\",\n      \"Pacote Básico\": \"blue\",\n      \"Pacote Premium\": \"purple\",\n      \"Pacote Completo\": \"green\",\n      \"Pacote Teste\": \"orange\",\n    };\n    \n    // Generate color based on hash if not found\n    if (!colors[serviceName]) {\n      const colorOptions = [\"blue\", \"green\", \"orange\", \"purple\", \"red\", \"yellow\", \"pink\", \"gray\"];\n      const hash = serviceName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n      return colorOptions[hash % colorOptions.length];\n    }\n    \n    return colors[serviceName];\n  }\n\n  private formatTimeAgo(date: Date): string {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"há poucos minutos\";\n    if (diffInHours < 24) return `há ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `há ${diffInDays} dia${diffInDays > 1 ? 's' : ''}`;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":36072},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, numeric, jsonb, uuid, date, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Companies table for multi-tenant support\nexport const companies = pgTable(\"companies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").unique(),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  logo: text(\"logo\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Users table for authentication (linked to companies)\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id).notNull(),\n  email: text(\"email\").notNull(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"employee\"), // \"owner\", \"manager\", \"employee\"\n  isActive: boolean(\"is_active\").default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueEmailPerCompany: index(\"unique_email_per_company\").on(table.email, table.companyId),\n}));\n\n// Customers table (linked to companies)\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id).notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  notes: text(\"notes\"),\n  // Endereço completo para serviço de taxidog\n  address: text(\"address\"),\n  cep: text(\"cep\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  neighborhood: text(\"neighborhood\"),\n  complement: text(\"complement\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pets table\nexport const pets = pgTable(\"pets\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  name: text(\"name\").notNull(),\n  species: text(\"species\").notNull(), // \"dog\", \"cat\", \"bird\", \"rabbit\", \"other\"\n  breed: text(\"breed\"),\n  weight: numeric(\"weight\", { precision: 5, scale: 2 }),\n  birthDate: date(\"birth_date\"),\n  gender: text(\"gender\"), // \"male\", \"female\"\n  color: text(\"color\"),\n  specialNeeds: text(\"special_needs\"), // Any special care requirements\n  preferredFood: text(\"preferred_food\"), // Preferred pet food brand/type\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Services table (linked to companies)\nexport const services = pgTable(\"services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  basePrice: numeric(\"base_price\", { precision: 10, scale: 2 }),\n  duration: integer(\"duration\"), // minutes\n  active: boolean(\"active\").default(true),\n});\n\n// Package types table (linked to companies)\nexport const packageTypes = pgTable(\"package_types\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: uuid(\"company_id\").references(() => companies.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  validityDays: integer(\"validity_days\").notNull(),\n  totalUses: integer(\"total_uses\").notNull(), // Total uses across all services\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(), // Total package price\n  maxPets: integer(\"max_pets\").default(1), // How many pets can use this package\n  active: boolean(\"active\").default(true),\n});\n\n// Package type services (many-to-many)\nexport const packageTypeServices = pgTable(\"package_type_services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  packageTypeId: uuid(\"package_type_id\").references(() => packageTypes.id).notNull(),\n  serviceId: uuid(\"service_id\").references(() => services.id).notNull(),\n  includedUses: integer(\"included_uses\").default(1), // How many uses of this service in the package\n  unitPrice: numeric(\"unit_price\", { precision: 10, scale: 2 }).notNull(), // Individual service price in this package\n});\n\n// Customer packages table\nexport const customerPackages = pgTable(\"customer_packages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  packageTypeId: uuid(\"package_type_id\").references(() => packageTypes.id).notNull(),\n  remainingUses: integer(\"remaining_uses\").notNull(), // Total remaining uses across all services\n  validUntil: timestamp(\"valid_until\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // \"active\", \"consumed\", \"expired\", \"renewed\"\n  renewedFromId: uuid(\"renewed_from_id\"),\n  purchasePrice: numeric(\"purchase_price\", { precision: 10, scale: 2 }).notNull(),\n  acquiredAt: timestamp(\"acquired_at\").defaultNow(),\n});\n\n// Customer package services (tracks remaining uses per service)\nexport const customerPackageServices = pgTable(\"customer_package_services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerPackageId: uuid(\"customer_package_id\").references(() => customerPackages.id).notNull(),\n  serviceId: uuid(\"service_id\").references(() => services.id).notNull(),\n  remainingUses: integer(\"remaining_uses\").notNull(), // Remaining uses for this specific service\n  totalUses: integer(\"total_uses\").notNull(), // Original total uses for this service\n});\n\n// Package usages table\nexport const packageUsages = pgTable(\"package_usages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerPackageId: uuid(\"customer_package_id\").references(() => customerPackages.id).notNull(),\n  petId: uuid(\"pet_id\").references(() => pets.id).notNull(),\n  serviceId: uuid(\"service_id\").references(() => services.id).notNull(),\n  notes: text(\"notes\"),\n  usedAt: timestamp(\"used_at\").defaultNow(),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  petId: uuid(\"pet_id\").references(() => pets.id).notNull(),\n  serviceId: uuid(\"service_id\").references(() => services.id).notNull(),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // \"scheduled\", \"confirmed\", \"checked_in\", \"in_service\", \"ready\", \"picked_up\", \"canceled\"\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  type: text(\"type\").notNull(), // \"confirmation\", \"check_in\", \"ready\", \"reminder\"\n  message: text(\"message\").notNull(),\n  channel: text(\"channel\").notNull(), // \"whatsapp\", \"email\"\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"sent\", \"failed\"\n  metadata: jsonb(\"metadata\"),\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertCompanySchema = createInsertSchema(companies).omit({ id: true, createdAt: true });\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, lastLoginAt: true, companyId: true });\nexport const insertCustomerSchema = createInsertSchema(customers, {\n  cep: z.union([\n    z.string().regex(/^\\d{5}-?\\d{3}$/, \"CEP deve ter formato 00000-000\"),\n    z.literal(\"\"),\n    z.undefined()\n  ]).optional().transform(val => val === \"\" || val === undefined ? null : val),\n  email: z.union([\n    z.string().email(\"Email deve ter formato válido\"),\n    z.literal(\"\"),\n    z.undefined()\n  ]).optional().transform(val => val === \"\" || val === undefined ? null : val),\n}).omit({ id: true, createdAt: true, companyId: true });\nexport const insertPetSchema = createInsertSchema(pets).omit({ id: true, createdAt: true }).extend({\n  customerId: z.string().min(1, \"Cliente é obrigatório\"),\n  weight: z.union([z.number(), z.string().transform(v => parseFloat(v))]).optional(),\n});\nexport const insertServiceSchema = createInsertSchema(services).omit({ id: true });\nexport const insertPackageTypeSchema = createInsertSchema(packageTypes, {\n  price: z.string().min(1, \"Preço é obrigatório\"),\n  validityDays: z.number().min(1, \"Validade deve ser maior que 0\"),\n}).omit({ id: true });\nexport const insertPackageTypeServiceSchema = createInsertSchema(packageTypeServices).omit({ id: true });\nexport const insertCustomerPackageSchema = createInsertSchema(customerPackages).omit({ id: true, acquiredAt: true });\nexport const insertCustomerPackageServiceSchema = createInsertSchema(customerPackageServices).omit({ id: true });\nexport const insertPackageUsageSchema = createInsertSchema(packageUsages).omit({ id: true, usedAt: true });\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({ id: true, createdAt: true });\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({ id: true, sentAt: true, createdAt: true });\n\n// Types\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Pet = typeof pets.$inferSelect;\nexport type InsertPet = z.infer<typeof insertPetSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type PackageType = typeof packageTypes.$inferSelect;\nexport type InsertPackageType = z.infer<typeof insertPackageTypeSchema>;\nexport type PackageTypeService = typeof packageTypeServices.$inferSelect;\nexport type InsertPackageTypeService = z.infer<typeof insertPackageTypeServiceSchema>;\nexport type CustomerPackage = typeof customerPackages.$inferSelect;\nexport type InsertCustomerPackage = z.infer<typeof insertCustomerPackageSchema>;\nexport type CustomerPackageService = typeof customerPackageServices.$inferSelect;\nexport type InsertCustomerPackageService = z.infer<typeof insertCustomerPackageServiceSchema>;\nexport type PackageUsage = typeof packageUsages.$inferSelect;\nexport type InsertPackageUsage = z.infer<typeof insertPackageUsageSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n","size_bytes":10911},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Customers from \"@/pages/customers\";\nimport Packages from \"@/pages/packages\";\nimport Appointments from \"@/pages/appointments\";\nimport Reports from \"@/pages/reports\";\nimport Messages from \"@/pages/messages\";\nimport Support from \"@/pages/support\";\nimport ClientRequests from \"@/pages/client-requests\";\nimport Users from \"@/pages/users\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\n\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction ProtectedRouter() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-pink-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse\">\n            <span className=\"text-white font-bold text-2xl\">GP</span>\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-50 dark:bg-gray-900 font-inter antialiased flex\">\n      {/* Mobile Sidebar Overlay */}\n      <div id=\"mobile-sidebar-overlay\" className=\"fixed inset-0 bg-gray-600 bg-opacity-75 lg:hidden hidden z-40\"></div>\n\n      {/* Sidebar */}\n      <Sidebar />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        {/* Top Header */}\n        <Header />\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 overflow-y-auto p-4 lg:p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Switch>\n              <Route path=\"/\" component={Dashboard} />\n              <Route path=\"/customers\" component={Customers} />\n              <Route path=\"/packages\" component={Packages} />\n              <Route path=\"/appointments\" component={Appointments} />\n              <Route path=\"/reports\" component={Reports} />\n              <Route path=\"/messages\" component={Messages} />\n              <Route path=\"/support\" component={Support} />\n              <Route path=\"/client-requests\" component={ClientRequests} />\n              <Route path=\"/users\" component={Users} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <ProtectedRouter />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3019},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(220 80% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(215 25% 27%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 98%);\n  --accent-foreground: hsl(215 25% 27%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(220 80% 56%);\n  --chart-1: hsl(220 80% 56%);\n  --chart-2: hsl(149 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(220 80% 56%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 98%);\n  --sidebar-accent-foreground: hsl(215 25% 27%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(220 80% 56%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.5rem;\n  --success: hsl(149 100% 36%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(42 93% 56%);\n  --warning-foreground: hsl(0 0% 100%);\n  --info: hsl(220 80% 56%);\n  --info-foreground: hsl(0 0% 100%);\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(220 80% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 32% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(220 80% 56%);\n  --chart-1: hsl(220 80% 56%);\n  --chart-2: hsl(149 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(220 80% 56%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(220 80% 56%);\n  --success: hsl(149 100% 36%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(42 93% 56%);\n  --warning-foreground: hsl(0 0% 100%);\n  --info: hsl(220 80% 56%);\n  --info-foreground: hsl(0 0% 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: var(--success);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .text-success-foreground {\n    color: var(--success-foreground);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .text-warning-foreground {\n    color: var(--warning-foreground);\n  }\n  \n  .text-info {\n    color: var(--info);\n  }\n  \n  .bg-info {\n    background-color: var(--info);\n  }\n  \n  .text-info-foreground {\n    color: var(--info-foreground);\n  }\n}\n","size_bytes":3697},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-dashboard-data.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useDashboardData() {\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: actionQueue, isLoading: actionQueueLoading } = useQuery({\n    queryKey: [\"/api/dashboard/action-queue\"],\n  });\n\n  const { data: recentActivity, isLoading: activityLoading } = useQuery({\n    queryKey: [\"/api/dashboard/recent-activity\"],\n  });\n\n  const { data: revenue, isLoading: revenueLoading } = useQuery({\n    queryKey: [\"/api/dashboard/revenue\"],\n  });\n\n  return {\n    metrics,\n    actionQueue,\n    recentActivity,\n    revenue,\n    isLoading: metricsLoading || actionQueueLoading || activityLoading || revenueLoading,\n  };\n}\n","size_bytes":748},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  companyId: string;\n  company: {\n    id: string;\n    name: string;\n  };\n}\n\n// Simple auth state management without context for now\nlet authState = {\n  user: null as User | null,\n  isLoading: true,\n  callbacks: new Set<() => void>(),\n};\n\nfunction notifyCallbacks() {\n  authState.callbacks.forEach(callback => callback());\n}\n\nexport function useAuth() {\n  const [, forceUpdate] = useState({});\n\n  useEffect(() => {\n    const callback = () => forceUpdate({});\n    authState.callbacks.add(callback);\n    return () => {\n      authState.callbacks.delete(callback);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (authState.isLoading) {\n      checkAuth();\n    }\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const response = await apiRequest('/api/auth/me', 'GET');\n      const userData = await response.json();\n      authState.user = userData;\n    } catch (error) {\n      authState.user = null;\n    }\n    authState.isLoading = false;\n    notifyCallbacks();\n  };\n\n  const login = async (email: string, password: string): Promise<User> => {\n    console.log(\"Attempting login with:\", { email, password });\n    const response = await apiRequest('/api/auth/login', 'POST', { email, password });\n    const userData = await response.json();\n    console.log(\"Login response:\", userData);\n    authState.user = userData;\n    notifyCallbacks();\n    return userData;\n  };\n\n  const register = async (data: any): Promise<User> => {\n    const response = await apiRequest('/api/auth/register', 'POST', data);\n    const userData = await response.json();\n    authState.user = userData;\n    notifyCallbacks();\n    return userData;\n  };\n\n  const logout = async () => {\n    try {\n      await apiRequest('/api/auth/logout', 'POST');\n    } catch (error) {\n      // Ignore errors on logout\n    }\n    authState.user = null;\n    notifyCallbacks();\n  };\n\n  return {\n    user: authState.user,\n    isLoading: authState.isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!authState.user,\n  };\n}","size_bytes":2165},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = \"GET\",\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1391},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/whatsapp.ts":{"content":"export function openWhatsApp(customerId: string, message: string) {\n  // TODO: Implement WhatsApp integration\n  // For now, open WhatsApp Web with a generic message\n  const encodedMessage = encodeURIComponent(message);\n  const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n  \n  // Open in new tab\n  window.open(whatsappUrl, '_blank');\n  \n  // Log the action for future API integration\n  console.log('WhatsApp message for customer:', customerId, 'Message:', message);\n  \n  // TODO: Send message via API\n  // fetch('/api/whatsapp/send', {\n  //   method: 'POST',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify({ customerId, message, type: 'manual' })\n  // });\n}\n","size_bytes":705},"client/src/pages/appointments-old.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, User, Package, Plus, Filter, Play, Edit, Check, CalendarClock, X } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Appointment {\n  id: string;\n  customerName: string;\n  petName: string;\n  serviceName: string;\n  date: string;\n  time: string;\n  status: \"scheduled\" | \"confirmed\" | \"in_progress\" | \"completed\" | \"cancelled\";\n  duration: number;\n  notes?: string;\n}\n\nexport default function Appointments() {\n  const [activeTab, setActiveTab] = useState(\"today\");\n  const [isNewAppointmentOpen, setIsNewAppointmentOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [editingAppointment, setEditingAppointment] = useState<Appointment | null>(null);\n  const [newAppointment, setNewAppointment] = useState({\n    customerId: \"\",\n    petId: \"\",\n    serviceId: \"\",\n    date: \"\",\n    time: \"\",\n    notes: \"\"\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: appointments = [], isLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: pets = [] } = useQuery({\n    queryKey: [\"/api/pets\"],\n  });\n\n  const { data: services = [] } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: activePackages = [] } = useQuery({\n    queryKey: [\"/api/packages/active\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-100 text-blue-800\";\n      case \"confirmed\": return \"bg-green-100 text-green-800\";\n      case \"in_progress\": return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\": return \"bg-gray-100 text-gray-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"Agendado\";\n      case \"confirmed\": return \"Confirmado\";\n      case \"in_progress\": return \"Em Andamento\";\n      case \"completed\": return \"Concluído\";\n      case \"cancelled\": return \"Cancelado\";\n      default: return status;\n    }\n  };\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: typeof newAppointment) => {\n      return await apiRequest(\"/api/appointments\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Agendamento criado!\",\n        description: \"O agendamento foi criado com sucesso.\",\n      });\n      setIsNewAppointmentOpen(false);\n      setNewAppointment({ customerId: \"\", petId: \"\", serviceId: \"\", date: \"\", time: \"\", notes: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao criar agendamento\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(`/api/appointments/${id}`, \"PATCH\", { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Status atualizado!\",\n        description: \"O status do agendamento foi atualizado.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartService = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"in_progress\" });\n  };\n\n  const handleConfirmAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"confirmed\" });\n  };\n\n  const handleCompleteService = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"completed\" });\n  };\n\n  const handleReschedule = (appointment: Appointment) => {\n    setEditingAppointment(appointment);\n    setIsEditOpen(true);\n  };\n\n  const handleCreateAppointment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newAppointment.customerId || !newAppointment.serviceId || !newAppointment.date || !newAppointment.time) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createAppointmentMutation.mutate(newAppointment);\n  };\n\n  const demoAppointments: Appointment[] = [\n    {\n      id: \"1\",\n      customerName: \"Maria Silva\",\n      petName: \"Luna\",\n      serviceName: \"Banho & Tosa\",\n      date: \"2025-01-11\",\n      time: \"09:00\",\n      status: \"confirmed\",\n      duration: 90,\n      notes: \"Cão muito dócil, gosta de carinho\"\n    },\n    {\n      id: \"2\",\n      customerName: \"João Santos\",\n      petName: \"Max\",\n      serviceName: \"Tosa Higiênica\",\n      date: \"2025-01-11\",\n      time: \"14:30\",\n      status: \"scheduled\",\n      duration: 30\n    },\n    {\n      id: \"3\",\n      customerName: \"Ana Costa\",\n      petName: \"Mel\",\n      serviceName: \"Banho & Tosa + Hidratação\",\n      date: \"2025-01-12\",\n      time: \"10:00\",\n      status: \"scheduled\",\n      duration: 120,\n      notes: \"Pet sensível, usar produtos hipoalergênicos\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Agendamentos</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Gerencie todos os agendamentos de serviços dos seus clientes.\n          </p>\n        </div>\n        <Dialog open={isNewAppointmentOpen} onOpenChange={setIsNewAppointmentOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\" data-testid=\"button-new-appointment\">\n              <Plus className=\"w-4 h-4\" />\n              Novo Agendamento\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Novo Agendamento</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreateAppointment} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Cliente</label>\n                <Select value={newAppointment.customerId} onValueChange={(value) => setNewAppointment({...newAppointment, customerId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um cliente\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(customers as any[]).map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Pet</label>\n                <Select value={newAppointment.petId} onValueChange={(value) => setNewAppointment({...newAppointment, petId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um pet\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(pets as any[]).filter((pet: any) => pet.customerId === newAppointment.customerId).map((pet: any) => (\n                      <SelectItem key={pet.id} value={pet.id}>\n                        {pet.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Serviço</label>\n                <Select value={newAppointment.serviceId} onValueChange={(value) => setNewAppointment({...newAppointment, serviceId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um serviço\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(services as any[]).map((service: any) => (\n                      <SelectItem key={service.id} value={service.id}>\n                        {service.name} - R$ {service.basePrice}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Data</label>\n                  <Input\n                    type=\"date\"\n                    value={newAppointment.date}\n                    onChange={(e) => setNewAppointment({...newAppointment, date: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Horário</label>\n                  <Input\n                    type=\"time\"\n                    value={newAppointment.time}\n                    onChange={(e) => setNewAppointment({...newAppointment, time: e.target.value})}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Observações</label>\n                <Textarea\n                  value={newAppointment.notes}\n                  onChange={(e) => setNewAppointment({...newAppointment, notes: e.target.value})}\n                  placeholder=\"Observações sobre o atendimento...\"\n                  rows={3}\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={createAppointmentMutation.isPending}>\n                {createAppointmentMutation.isPending ? \"Criando...\" : \"Criar Agendamento\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Hoje</p>\n                <p className=\"text-2xl font-bold text-blue-600\">2</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Esta Semana</p>\n                <p className=\"text-2xl font-bold text-green-600\">8</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">3</p>\n              </div>\n              <User className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Taxa Ocupação</p>\n                <p className=\"text-2xl font-bold text-purple-600\">78%</p>\n              </div>\n              <Package className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Appointments List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Lista de Agendamentos</CardTitle>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid grid-cols-4 w-full\">\n              <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n              <TabsTrigger value=\"week\">Esta Semana</TabsTrigger>\n              <TabsTrigger value=\"pending\">Pendentes</TabsTrigger>\n              <TabsTrigger value=\"all\">Todos</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeTab} className=\"mt-6 space-y-4\">\n              {demoAppointments.map((appointment) => (\n                <Card key={appointment.id} className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">\n                            {appointment.customerName} - {appointment.petName}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">{appointment.serviceName}</p>\n                        </div>\n                        <Badge className={getStatusColor(appointment.status)}>\n                          {getStatusText(appointment.status)}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right text-sm text-gray-500\">\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"w-4 h-4\" />\n                          {new Date(appointment.date).toLocaleDateString(\"pt-BR\")}\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          {appointment.time} ({appointment.duration}min)\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {appointment.notes && (\n                      <p className=\"text-sm text-gray-600 mb-3 bg-gray-50 p-2 rounded\">\n                        <strong>Observações:</strong> {appointment.notes}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex gap-2\">\n                      {appointment.status === \"scheduled\" && (\n                        <>\n                          <Button \n                            size=\"sm\" \n                            onClick={() => handleConfirmAppointment(appointment.id)}\n                            data-testid={`button-confirm-${appointment.id}`}\n                          >\n                            <Check className=\"w-4 h-4 mr-1\" />\n                            Confirmar\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => handleReschedule(appointment)}\n                            data-testid={`button-reschedule-${appointment.id}`}\n                          >\n                            <CalendarClock className=\"w-4 h-4 mr-1\" />\n                            Reagendar\n                          </Button>\n                        </>\n                      )}\n                      {appointment.status === \"confirmed\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleStartService(appointment.id)}\n                          data-testid={`button-start-${appointment.id}`}\n                        >\n                          <Play className=\"w-4 h-4 mr-1\" />\n                          Iniciar Atendimento\n                        </Button>\n                      )}\n                      {appointment.status === \"in_progress\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleCompleteService(appointment.id)}\n                          data-testid={`button-complete-${appointment.id}`}\n                        >\n                          <Check className=\"w-4 h-4 mr-1\" />\n                          Finalizar Serviço\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => handleReschedule(appointment)}\n                        data-testid={`button-edit-${appointment.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Editar\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {demoAppointments.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Calendar className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\n                  <p>Nenhum agendamento encontrado</p>\n                  <p className=\"text-sm\">Clique em \"Novo Agendamento\" para começar</p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18129},"client/src/pages/appointments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Clock, User, Package, Plus, Filter, Play, Edit, Check, CalendarClock, X, Trash2 } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Appointment {\n  id: string;\n  customerName: string;\n  petName: string;\n  serviceName: string;\n  date: string;\n  time: string;\n  status: \"scheduled\" | \"confirmed\" | \"in_progress\" | \"completed\" | \"cancelled\";\n  duration: number;\n  notes?: string;\n}\n\nexport default function Appointments() {\n  const [activeTab, setActiveTab] = useState(\"today\");\n  const [isNewAppointmentOpen, setIsNewAppointmentOpen] = useState(false);\n  const [newAppointment, setNewAppointment] = useState({\n    customerId: \"\",\n    petId: \"\",\n    serviceId: \"\",\n    date: \"\",\n    time: \"\",\n    notes: \"\"\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: appointments = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: appointmentStats = { today: 0, thisWeek: 0, pending: 0, occupancyRate: 0 } } = useQuery<{\n    today: number;\n    thisWeek: number; \n    pending: number;\n    occupancyRate: number;\n  }>({\n    queryKey: [\"/api/appointments/stats\"],\n  });\n\n  const { data: customers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: pets = [] } = useQuery<any[]>({\n    queryKey: [\"/api/pets\"],\n  });\n\n  const { data: services = [] } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: typeof newAppointment) => {\n      return await apiRequest(\"/api/appointments\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/stats\"] });\n      toast({\n        title: \"Agendamento criado!\",\n        description: \"O agendamento foi criado com sucesso.\",\n      });\n      setIsNewAppointmentOpen(false);\n      setNewAppointment({ customerId: \"\", petId: \"\", serviceId: \"\", date: \"\", time: \"\", notes: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao criar agendamento\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(`/api/appointments/${id}`, \"PATCH\", { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/stats\"] });\n      toast({\n        title: \"Status atualizado!\",\n        description: \"O status do agendamento foi atualizado.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartService = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"in_progress\" });\n  };\n\n  const handleConfirmAppointment = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"confirmed\" });\n  };\n\n  const handleCompleteService = (appointmentId: string) => {\n    updateAppointmentMutation.mutate({ id: appointmentId, status: \"completed\" });\n  };\n\n  const handleCreateAppointment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newAppointment.customerId || !newAppointment.serviceId || !newAppointment.date || !newAppointment.time) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createAppointmentMutation.mutate(newAppointment);\n  };\n\n  const deleteAppointmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/appointments/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/stats\"] });\n      toast({\n        title: \"Agendamento excluído!\",\n        description: \"O agendamento foi excluído com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao excluir\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteAppointment = (appointmentId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este agendamento?\")) {\n      deleteAppointmentMutation.mutate(appointmentId);\n    }\n  };\n\n  const handleReschedule = (appointmentId: string) => {\n    // For now, just show a placeholder message\n    toast({\n      title: \"Funcionalidade em desenvolvimento\",\n      description: \"A funcionalidade de reagendamento será implementada em breve.\",\n    });\n  };\n\n  const handleEditAppointment = (appointmentId: string) => {\n    // For now, just show a placeholder message\n    toast({\n      title: \"Funcionalidade em desenvolvimento\", \n      description: \"A funcionalidade de edição será implementada em breve.\",\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-100 text-blue-800\";\n      case \"confirmed\": return \"bg-green-100 text-green-800\";\n      case \"in_progress\": return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\": return \"bg-gray-100 text-gray-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"Agendado\";\n      case \"confirmed\": return \"Confirmado\";\n      case \"in_progress\": return \"Em Andamento\";\n      case \"completed\": return \"Concluído\";\n      case \"cancelled\": return \"Cancelado\";\n      default: return status;\n    }\n  };\n\n  const demoAppointments: Appointment[] = [\n    {\n      id: \"1\",\n      customerName: \"Maria Silva\",\n      petName: \"Luna\",\n      serviceName: \"Banho & Tosa\",\n      date: \"2025-01-11\",\n      time: \"09:00\",\n      status: \"confirmed\",\n      duration: 90,\n      notes: \"Cão muito dócil, gosta de carinho\"\n    },\n    {\n      id: \"2\",\n      customerName: \"João Santos\",\n      petName: \"Max\",\n      serviceName: \"Tosa Higiênica\",\n      date: \"2025-01-11\",\n      time: \"14:30\",\n      status: \"scheduled\",\n      duration: 30\n    },\n    {\n      id: \"3\",\n      customerName: \"Ana Costa\",\n      petName: \"Mel\",\n      serviceName: \"Banho & Tosa + Hidratação\",\n      date: \"2025-01-12\",\n      time: \"10:00\",\n      status: \"scheduled\",\n      duration: 120,\n      notes: \"Pet sensível, usar produtos hipoalergênicos\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Agendamentos</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Gerencie todos os agendamentos de serviços dos seus clientes.\n          </p>\n        </div>\n        <Dialog open={isNewAppointmentOpen} onOpenChange={setIsNewAppointmentOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\" data-testid=\"button-new-appointment\">\n              <Plus className=\"w-4 h-4\" />\n              Novo Agendamento\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Novo Agendamento</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreateAppointment} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Cliente</label>\n                <Select value={newAppointment.customerId} onValueChange={(value) => setNewAppointment({...newAppointment, customerId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um cliente\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Pet</label>\n                <Select value={newAppointment.petId} onValueChange={(value) => setNewAppointment({...newAppointment, petId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um pet\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {pets.filter((pet: any) => pet.customerId === newAppointment.customerId).map((pet: any) => (\n                      <SelectItem key={pet.id} value={pet.id}>\n                        {pet.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Serviço</label>\n                <Select value={newAppointment.serviceId} onValueChange={(value) => setNewAppointment({...newAppointment, serviceId: value})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um serviço\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {services.map((service: any) => (\n                      <SelectItem key={service.id} value={service.id}>\n                        {service.name} - R$ {service.basePrice}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Data</label>\n                  <Input\n                    type=\"date\"\n                    value={newAppointment.date}\n                    onChange={(e) => setNewAppointment({...newAppointment, date: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Horário</label>\n                  <Input\n                    type=\"time\"\n                    value={newAppointment.time}\n                    onChange={(e) => setNewAppointment({...newAppointment, time: e.target.value})}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Observações</label>\n                <Textarea\n                  value={newAppointment.notes}\n                  onChange={(e) => setNewAppointment({...newAppointment, notes: e.target.value})}\n                  placeholder=\"Observações sobre o atendimento...\"\n                  rows={3}\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={createAppointmentMutation.isPending}>\n                {createAppointmentMutation.isPending ? \"Criando...\" : \"Criar Agendamento\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Hoje</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{appointmentStats.today}</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Esta Semana</p>\n                <p className=\"text-2xl font-bold text-green-600\">{appointmentStats.thisWeek}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{appointmentStats.pending}</p>\n              </div>\n              <User className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Taxa Ocupação</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{appointmentStats.occupancyRate}%</p>\n              </div>\n              <Package className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Appointments List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Lista de Agendamentos</CardTitle>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid grid-cols-4 w-full\">\n              <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n              <TabsTrigger value=\"week\">Esta Semana</TabsTrigger>\n              <TabsTrigger value=\"pending\">Pendentes</TabsTrigger>\n              <TabsTrigger value=\"all\">Todos</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeTab} className=\"mt-6 space-y-4\">\n              {appointments.map((appointment: any) => (\n                <Card key={appointment.id} className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">\n                            {appointment.customerName || 'Cliente não encontrado'} - {appointment.petName || 'Pet não encontrado'}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">{appointment.serviceName || 'Serviço não encontrado'}</p>\n                        </div>\n                        <Badge className={getStatusColor(appointment.status)}>\n                          {getStatusText(appointment.status)}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right text-sm text-gray-500\">\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"w-4 h-4\" />\n                          {new Date(appointment.scheduledDate).toLocaleDateString(\"pt-BR\")}\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          {new Date(appointment.scheduledDate).toLocaleTimeString(\"pt-BR\", { hour: '2-digit', minute: '2-digit' })}\n                          {appointment.serviceDuration && ` (${appointment.serviceDuration}min)`}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {appointment.notes && (\n                      <p className=\"text-sm text-gray-600 mb-3 bg-gray-50 p-2 rounded\">\n                        <strong>Observações:</strong> {appointment.notes}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex gap-2\">\n                      {appointment.status === \"scheduled\" && (\n                        <>\n                          <Button \n                            size=\"sm\" \n                            onClick={() => handleConfirmAppointment(appointment.id)}\n                            data-testid={`button-confirm-${appointment.id}`}\n                          >\n                            <Check className=\"w-4 h-4 mr-1\" />\n                            Confirmar\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => handleReschedule(appointment.id)}\n                            data-testid={`button-reschedule-${appointment.id}`}\n                          >\n                            <CalendarClock className=\"w-4 h-4 mr-1\" />\n                            Reagendar\n                          </Button>\n                        </>\n                      )}\n                      {appointment.status === \"confirmed\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleStartService(appointment.id)}\n                          data-testid={`button-start-${appointment.id}`}\n                        >\n                          <Play className=\"w-4 h-4 mr-1\" />\n                          Iniciar Atendimento\n                        </Button>\n                      )}\n                      {appointment.status === \"in_progress\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleCompleteService(appointment.id)}\n                          data-testid={`button-complete-${appointment.id}`}\n                        >\n                          <Check className=\"w-4 h-4 mr-1\" />\n                          Finalizar Serviço\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => handleEditAppointment(appointment.id)}\n                        data-testid={`button-edit-${appointment.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Editar\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"destructive\" \n                        onClick={() => handleDeleteAppointment(appointment.id)}\n                        data-testid={`button-delete-${appointment.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-1\" />\n                        Excluir\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {appointments.length === 0 && !isLoading && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Calendar className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\n                  <p>Nenhum agendamento encontrado</p>\n                  <p className=\"text-sm\">Clique em \"Novo Agendamento\" para começar</p>\n                </div>\n              )}\n              \n              {isLoading && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                  <p>Carregando agendamentos...</p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20657},"client/src/pages/client-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { MessageSquare, Star, HelpCircle, Clock, CheckCircle, AlertCircle } from \"lucide-react\";\n\ninterface ClientRequest {\n  id: string;\n  customerName: string;\n  type: \"feedback\" | \"support\" | \"suggestion\" | \"complaint\";\n  subject: string;\n  message: string;\n  status: \"pending\" | \"responded\" | \"resolved\";\n  priority: \"low\" | \"medium\" | \"high\";\n  createdAt: string;\n  rating?: number;\n}\n\nexport default function ClientRequests() {\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  const { data: requests = [], isLoading } = useQuery({\n    queryKey: [\"/api/client-requests\"],\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\": return <Clock className=\"w-4 h-4\" />;\n      case \"responded\": return <MessageSquare className=\"w-4 h-4\" />;\n      case \"resolved\": return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"responded\": return \"bg-blue-100 text-blue-800\";\n      case \"resolved\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-orange-100 text-orange-800\";\n      case \"low\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"feedback\": return <Star className=\"w-4 h-4\" />;\n      case \"support\": return <HelpCircle className=\"w-4 h-4\" />;\n      case \"suggestion\": return <MessageSquare className=\"w-4 h-4\" />;\n      case \"complaint\": return <AlertCircle className=\"w-4 h-4\" />;\n      default: return <MessageSquare className=\"w-4 h-4\" />;\n    }\n  };\n\n  const demoRequests: ClientRequest[] = [\n    {\n      id: \"1\",\n      customerName: \"Maria Silva\",\n      type: \"feedback\",\n      subject: \"Excelente atendimento!\",\n      message: \"Adorei o novo sistema de agendamento. Muito mais fácil marcar os banhos da Luna. A equipe está de parabéns!\",\n      status: \"resolved\",\n      priority: \"low\",\n      createdAt: \"2025-01-10T14:30:00\",\n      rating: 5\n    },\n    {\n      id: \"2\",\n      customerName: \"João Santos\",\n      type: \"support\",\n      subject: \"Dúvida sobre pacote vencido\",\n      message: \"Meu pacote venceu ontem, mas ainda tenho 2 usos disponíveis. É possível usar ou preciso renovar primeiro?\",\n      status: \"pending\",\n      priority: \"medium\",\n      createdAt: \"2025-01-11T09:15:00\"\n    },\n    {\n      id: \"3\",\n      customerName: \"Ana Costa\",\n      type: \"suggestion\",\n      subject: \"Sugestão para melhorar o app\",\n      message: \"Seria ótimo ter notificações push quando o agendamento for confirmado. Também sugiro um histórico de fotos dos pets após cada sessão.\",\n      status: \"responded\",\n      priority: \"low\",\n      createdAt: \"2025-01-09T16:45:00\"\n    },\n    {\n      id: \"4\",\n      customerName: \"Carlos Oliveira\",\n      type: \"complaint\",\n      subject: \"Problema com último agendamento\",\n      message: \"Cheguei no horário marcado mas não tinha ninguém para atender. Perdi tempo e meu pet ficou estressado esperando.\",\n      status: \"pending\",\n      priority: \"high\",\n      createdAt: \"2025-01-11T11:20:00\"\n    }\n  ];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-64\">Carregando...</div>;\n  }\n\n  const filteredRequests = activeTab === \"all\" ? demoRequests : demoRequests.filter(r => r.status === activeTab);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Solicitações dos Clientes</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Gerencie feedbacks, sugestões e solicitações de suporte dos seus clientes.\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">2</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Respondidas</p>\n                <p className=\"text-2xl font-bold text-blue-600\">1</p>\n              </div>\n              <MessageSquare className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Resolvidas</p>\n                <p className=\"text-2xl font-bold text-green-600\">1</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Satisfação</p>\n                <p className=\"text-2xl font-bold text-purple-600\">5.0</p>\n              </div>\n              <Star className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Requests List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Solicitações</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid grid-cols-4 w-full\">\n              <TabsTrigger value=\"all\">Todas</TabsTrigger>\n              <TabsTrigger value=\"pending\">Pendentes</TabsTrigger>\n              <TabsTrigger value=\"responded\">Respondidas</TabsTrigger>\n              <TabsTrigger value=\"resolved\">Resolvidas</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeTab} className=\"mt-6 space-y-4\">\n              {filteredRequests.map((request) => (\n                <Card key={request.id} className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(request.type)}\n                          <span className=\"font-semibold\">{request.customerName}</span>\n                        </div>\n                        <Badge className={getPriorityColor(request.priority)}>\n                          {request.priority}\n                        </Badge>\n                        <Badge className={getStatusColor(request.status)}>\n                          {getStatusIcon(request.status)}\n                          {request.status}\n                        </Badge>\n                      </div>\n                      <span className=\"text-sm text-gray-500\">\n                        {new Date(request.createdAt).toLocaleDateString(\"pt-BR\")}\n                      </span>\n                    </div>\n                    \n                    <h3 className=\"font-semibold text-gray-900 mb-2\">{request.subject}</h3>\n                    <p className=\"text-gray-600 mb-3\">{request.message}</p>\n                    \n                    {request.rating && (\n                      <div className=\"flex items-center gap-1 mb-3\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star \n                            key={i} \n                            className={`w-4 h-4 ${i < request.rating! ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`} \n                          />\n                        ))}\n                        <span className=\"text-sm text-gray-500 ml-1\">({request.rating}/5)</span>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex gap-2\">\n                      {request.status === \"pending\" && (\n                        <>\n                          <Button size=\"sm\" data-testid={`button-respond-${request.id}`}>\n                            Responder\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-mark-resolved-${request.id}`}>\n                            Marcar como Resolvido\n                          </Button>\n                        </>\n                      )}\n                      {request.status === \"responded\" && (\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-mark-resolved-${request.id}`}>\n                          Marcar como Resolvido\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {filteredRequests.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  Nenhuma solicitação encontrada nesta categoria.\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10019},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Phone, Mail, MapPin, User, Heart, PawPrint } from \"lucide-react\";\nimport { CustomerModal } from \"@/components/modals/customer-modal-enhanced\";\nimport { PetModal } from \"@/components/modals/pet-modal-enhanced\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Customer {\n  id: string;\n  companyId: string;\n  name: string;\n  email: string | null;\n  phone: string;\n  notes: string | null;\n  address: string | null;\n  cep: string | null;\n  city: string | null;\n  state: string | null;\n  neighborhood: string | null;\n  complement: string | null;\n  createdAt: Date;\n  petCount: number;\n}\n\ninterface Pet {\n  id: string;\n  customerId: string;\n  customerName?: string;\n  name: string;\n  species: string;\n  breed: string | null;\n  color: string | null;\n  gender: string | null;\n  birthDate: Date | null;\n  weight: number | null;\n  notes: string | null;\n  specialNeeds: string | null;\n  preferredFood: string | null;\n  createdAt: Date;\n}\n\nexport default function Customers() {\n  const [isNewCustomerOpen, setIsNewCustomerOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [isNewPetOpen, setIsNewPetOpen] = useState(false);\n  const [editingPet, setEditingPet] = useState<Pet | null>(null);\n  const [activeTab, setActiveTab] = useState(\"customers\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers = [], isLoading: customersLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: pets = [], isLoading: petsLoading } = useQuery<Pet[]>({\n    queryKey: [\"/api/pets\"],\n  });\n\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/customers/${id}`, \"DELETE\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Cliente removido!\",\n        description: \"Cliente excluído com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao excluir\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePetMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/pets/${id}`, \"DELETE\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Pet removido!\",\n        description: \"Pet excluído com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível excluir o pet.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Gestão de Clientes & Pets</h1>\n          <p className=\"text-gray-600 mt-2\">Gerencie clientes, pets e relacionamentos</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={() => setIsNewCustomerOpen(true)} \n            data-testid=\"button-new-customer\"\n            variant={activeTab === \"customers\" ? \"default\" : \"outline\"}\n          >\n            <User className=\"w-4 h-4 mr-2\" />\n            Novo Cliente\n          </Button>\n          <Button \n            onClick={() => setIsNewPetOpen(true)} \n            data-testid=\"button-new-pet\"\n            variant={activeTab === \"pets\" ? \"default\" : \"outline\"}\n          >\n            <PawPrint className=\"w-4 h-4 mr-2\" />\n            Novo Pet\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs para Clientes e Pets */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"customers\" className=\"flex items-center gap-2\">\n            <User className=\"w-4 h-4\" />\n            Clientes ({customers.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"pets\" className=\"flex items-center gap-2\">\n            <PawPrint className=\"w-4 h-4\" />\n            Pets ({pets.length})\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Aba de Clientes */}\n        <TabsContent value=\"customers\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Clientes Cadastrados ({customers.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {customersLoading ? (\n                <div className=\"text-center py-8\">Carregando clientes...</div>\n              ) : customers.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <User className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>Nenhum cliente cadastrado</p>\n                  <p className=\"text-sm mt-2\">Clique em \"Novo Cliente\" para começar</p>\n                </div>\n              ) : (\n                <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Cliente</TableHead>\n                  <TableHead>Contato</TableHead>\n                  <TableHead>Pets</TableHead>\n                  <TableHead>Localização</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"w-[100px]\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {customers.map((customer) => (\n                  <TableRow key={customer.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{customer.name}</div>\n                        <div className=\"text-sm text-gray-500 flex items-center mt-1\">\n                          <Mail className=\"w-3 h-3 mr-1\" />\n                          {customer.email || \"Não informado\"}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Phone className=\"w-3 h-3 mr-1\" />\n                        {customer.phone}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Heart className=\"w-4 h-4 mr-2 text-red-500\" />\n                        <span className=\"font-medium\">{customer.petCount || 0}</span>\n                        <span className=\"text-sm text-gray-500 ml-1\">\n                          {customer.petCount === 1 ? 'pet' : 'pets'}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"w-3 h-3 mr-1\" />\n                        {customer.neighborhood && customer.city ? `${customer.neighborhood}, ${customer.city}` : customer.city || \"Não informado\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className=\"bg-green-100 text-green-800 border-green-200 hover:bg-green-200\"\n                      >\n                        Ativo\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setEditingCustomer(customer)}\n                          data-testid={`button-edit-customer-${customer.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteCustomerMutation.mutate(customer.id)}\n                          data-testid={`button-delete-customer-${customer.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Aba de Pets */}\n        <TabsContent value=\"pets\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <PawPrint className=\"w-5 h-5 mr-2 text-orange-500\" />\n                Pets Cadastrados ({pets.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {petsLoading ? (\n                <div className=\"text-center py-8\">Carregando pets...</div>\n              ) : pets.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <PawPrint className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>Nenhum pet cadastrado</p>\n                  <p className=\"text-sm mt-2\">Clique em \"Novo Pet\" para começar</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Pet</TableHead>\n                      <TableHead>Cliente</TableHead>\n                      <TableHead>Detalhes</TableHead>\n                      <TableHead>Informações</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead className=\"w-[100px]\">Ações</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {pets.map((pet) => (\n                      <TableRow key={pet.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium flex items-center gap-2\">\n                              <span className=\"text-2xl\">{pet.species === \"Cão\" ? \"🐕\" : pet.species === \"Gato\" ? \"🐱\" : pet.species === \"Coelho\" ? \"🐰\" : pet.species === \"Hamster\" ? \"🐹\" : pet.species === \"Pássaro\" ? \"🦜\" : \"🐾\"}</span>\n                              {pet.name}\n                              {pet.birthDate && (\n                                <span className=\"text-sm text-gray-500\">\n                                  • {Math.floor((new Date().getTime() - new Date(pet.birthDate).getTime()) / (365.25 * 24 * 60 * 60 * 1000))} anos\n                                </span>\n                              )}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {pet.species} • {pet.breed || \"SRD\"}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {pet.customerName ? `${pet.customerName}` : \"Cliente não identificado\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Cor:</span> {pet.color || \"N/A\"}\n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Sexo:</span> {pet.gender || \"N/A\"}\n                            </div>\n                            {pet.weight && (\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium\">Peso:</span> {pet.weight}kg\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {pet.birthDate && (\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium\">Nascimento:</span> {new Date(pet.birthDate).toLocaleDateString('pt-BR')}\n                              </div>\n                            )}\n                            {pet.preferredFood && (\n                              <div className=\"text-sm\">\n                                <span className=\"font-medium\">Ração:</span> {pet.preferredFood}\n                              </div>\n                            )}\n                            {pet.specialNeeds && (\n                              <div className=\"text-sm text-amber-600\">\n                                <span className=\"font-medium\">Cuidados:</span> {pet.specialNeeds}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"default\">Ativo</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => setEditingPet(pet)}\n                              data-testid={`button-edit-pet-${pet.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-red-600\"\n                              onClick={() => deletePetMutation.mutate(pet.id)}\n                              data-testid={`button-delete-pet-${pet.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <CustomerModal \n        open={isNewCustomerOpen} \n        onOpenChange={setIsNewCustomerOpen} \n      />\n      <CustomerModal \n        open={!!editingCustomer} \n        onOpenChange={(open) => !open && setEditingCustomer(null)}\n        customer={editingCustomer}\n      />\n      <PetModal \n        open={isNewPetOpen} \n        onOpenChange={setIsNewPetOpen} \n      />\n      <PetModal \n        open={!!editingPet} \n        onOpenChange={(open) => !open && setEditingPet(null)}\n        pet={editingPet}\n      />\n    </div>\n  );\n}\n","size_bytes":15695},"client/src/pages/dashboard.tsx":{"content":"import { MetricCard } from \"@/components/dashboard/metric-card\";\nimport { ActionQueue } from \"@/components/dashboard/action-queue\";\nimport { ActivePackages } from \"@/components/dashboard/active-packages\";\nimport { RecentActivity } from \"@/components/dashboard/recent-activity\";\nimport { RevenueChart } from \"@/components/dashboard/revenue-chart\";\nimport { useDashboardData } from \"@/hooks/use-dashboard-data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Package, RefreshCw, TrendingDown, AlertTriangle } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { metrics, actionQueue, recentActivity, revenue, isLoading } = useDashboardData();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        {/* KPI Cards Skeleton */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-32 rounded-xl\" />\n          ))}\n        </div>\n        \n        {/* Content Skeleton */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Skeleton className=\"h-96 rounded-xl\" />\n          </div>\n          <div>\n            <Skeleton className=\"h-96 rounded-xl\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          title=\"Pacotes Ativos\"\n          value={metrics?.activePackages || 0}\n          icon={Package}\n          color=\"blue\"\n          testId=\"metric-active-packages\"\n          description=\"Número total de pacotes de serviços que estão atualmente ativos e válidos. Inclui todos os pacotes comprados pelos clientes que ainda têm usos disponíveis e não expiraram.\"\n        />\n        \n        <MetricCard\n          title=\"Renovações/Mês\"\n          value={metrics?.renewalsThisMonth || 0}\n          icon={RefreshCw}\n          color=\"green\"\n          testId=\"metric-renewals\"\n          description=\"Quantidade de clientes que renovaram seus pacotes neste mês. Uma renovação acontece quando um cliente compra um novo pacote antes ou depois do anterior expirar.\"\n        />\n        \n        <MetricCard\n          title=\"Taxa de Churn\"\n          value={`${metrics?.churnRate || 0}%`}\n          icon={TrendingDown}\n          color=\"orange\"\n          testId=\"metric-churn\"\n          description=\"Porcentagem de clientes que cancelaram ou não renovaram seus pacotes nos últimos 30 dias. Calculado como: (clientes perdidos / total de clientes ativos) x 100.\"\n        />\n        \n        <MetricCard\n          title=\"Clientes em Risco\"\n          value={metrics?.riskyClients || 0}\n          icon={AlertTriangle}\n          color=\"red\"\n          testId=\"metric-risky-clients\"\n          description=\"Clientes que estão próximos de perder interesse ou cancelar. Inclui aqueles com pacotes vencendo em 7 dias, baixo uso recente ou histórico de atrasos nos agendamentos.\"\n        />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Action Queue */}\n        <div className=\"lg:col-span-2\">\n          <ActionQueue items={actionQueue || []} />\n        </div>\n\n        {/* Active Packages */}\n        <div>\n          <ActivePackages />\n        </div>\n      </div>\n\n      {/* Recent Activity & Revenue Chart */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <RecentActivity activities={recentActivity || []} />\n        <RevenueChart data={revenue || []} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":3686},"client/src/pages/enhanced-customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search, Edit, Trash2, Phone, Mail, Heart, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { EnhancedPetModal } from \"@/components/modals/enhanced-pet-modal\";\nimport { CustomerModal } from \"@/components/modals/customer-modal\";\n\nconst speciesEmojis: Record<string, string> = {\n  dog: \"🐕\",\n  cat: \"🐱\",\n  bird: \"🦜\",\n  rabbit: \"🐰\",\n  hamster: \"🐹\",\n  guinea_pig: \"🐹\",\n  ferret: \"🦦\",\n  other: \"🐾\",\n};\n\nconst getSpeciesDisplay = (species: string): string => {\n  const displays: Record<string, string> = {\n    dog: \"Cão\",\n    cat: \"Gato\", \n    bird: \"Pássaro\",\n    rabbit: \"Coelho\",\n    hamster: \"Hamster\",\n    guinea_pig: \"Porquinho da Índia\",\n    ferret: \"Furão\",\n    other: \"Outro\",\n  };\n  return displays[species] || species;\n};\n\nexport default function EnhancedCustomers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n  const [isPetModalOpen, setIsPetModalOpen] = useState(false);\n  const [editingPet, setEditingPet] = useState<any>(null);\n  const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers = [] } = useQuery<any[]>({\n    queryKey: ['/api/customers'],\n  });\n\n  const { data: pets = [] } = useQuery<any[]>({\n    queryKey: ['/api/pets'],\n  });\n\n  const { data: customerPackages = [] } = useQuery<any[]>({\n    queryKey: ['/api/packages/active'],\n  });\n\n  const createPetMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/pets', 'POST', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pets'] });\n      toast({\n        title: \"Pet cadastrado!\",\n        description: \"O pet foi cadastrado com sucesso.\",\n      });\n      setIsPetModalOpen(false);\n      setEditingPet(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível cadastrar o pet.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePetMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => \n      apiRequest(`/api/pets/${id}`, 'PATCH', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pets'] });\n      toast({\n        title: \"Pet atualizado!\",\n        description: \"As informações do pet foram atualizadas.\",\n      });\n      setIsPetModalOpen(false);\n      setEditingPet(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar o pet.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCustomers = customers.filter((customer: any) =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.phone.includes(searchTerm) ||\n    (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const getCustomerPets = (customerId: string) => {\n    return pets.filter((pet: any) => pet.customerId === customerId);\n  };\n\n  const getCustomerPackages = (customerId: string) => {\n    return customerPackages.filter((pkg: any) => pkg.customerId === customerId);\n  };\n\n  const handlePetSubmit = (data: any) => {\n    console.log('Pet form data:', data);\n    if (editingPet) {\n      updatePetMutation.mutate({ id: editingPet.id, data });\n    } else {\n      // Set customerId if a customer is selected\n      const petData = selectedCustomer \n        ? { ...data, customerId: selectedCustomer.id }\n        : data;\n      console.log('Creating pet with data:', petData);\n      createPetMutation.mutate(petData);\n    }\n  };\n\n  const openPetModal = (customerId?: string, pet?: any) => {\n    if (pet) {\n      setEditingPet(pet);\n    } else {\n      setEditingPet(null);\n    }\n    if (customerId && !selectedCustomer) {\n      setSelectedCustomer(customers.find((c: any) => c.id === customerId));\n    }\n    setIsPetModalOpen(true);\n  };\n\n  const calculateAge = (birthDate: string | null) => {\n    if (!birthDate) return null;\n    const today = new Date();\n    const birth = new Date(birthDate);\n    const months = (today.getFullYear() - birth.getFullYear()) * 12 + today.getMonth() - birth.getMonth();\n    \n    if (months < 12) {\n      return `${months} ${months === 1 ? 'mês' : 'meses'}`;\n    } else {\n      const years = Math.floor(months / 12);\n      return `${years} ${years === 1 ? 'ano' : 'anos'}`;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-6\" data-testid=\"page-enhanced-customers\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Gestão de Clientes</h1>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setIsCustomerModalOpen(true)} data-testid=\"button-add-customer\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Cliente\n          </Button>\n          <Button onClick={() => openPetModal()} data-testid=\"button-add-pet\">\n            <Heart className=\"h-4 w-4 mr-2\" />\n            Novo Pet\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Buscar por nome, telefone ou email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n            data-testid=\"input-search\"\n          />\n        </div>\n      </div>\n\n      {/* Customer List */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {filteredCustomers.map((customer: any) => {\n          const customerPets = getCustomerPets(customer.id);\n          const customerPackagesActive = getCustomerPackages(customer.id);\n          \n          return (\n            <Card key={customer.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-customer-${customer.id}`}>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex items-start gap-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                        {customer.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\" data-testid={`text-customer-name-${customer.id}`}>\n                        {customer.name}\n                      </CardTitle>\n                      <div className=\"flex flex-col gap-1 text-sm text-gray-600 dark:text-gray-300\">\n                        <div className=\"flex items-center gap-1\">\n                          <Phone className=\"h-3 w-3\" />\n                          <span data-testid={`text-customer-phone-${customer.id}`}>{customer.phone}</span>\n                        </div>\n                        {customer.email && (\n                          <div className=\"flex items-center gap-1\">\n                            <Mail className=\"h-3 w-3\" />\n                            <span data-testid={`text-customer-email-${customer.id}`}>{customer.email}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedCustomer(customer)}\n                    data-testid={`button-edit-customer-${customer.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"pt-0\">\n                {/* Stats */}\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-pink-600\" data-testid={`text-pets-count-${customer.id}`}>\n                      {customerPets.length}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n                      {customerPets.length === 1 ? 'Pet' : 'Pets'}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid={`text-packages-count-${customer.id}`}>\n                      {customerPackagesActive.length}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n                      Pacotes Ativos\n                    </div>\n                  </div>\n                </div>\n\n                <Separator className=\"mb-4\" />\n\n                {/* Pets */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"text-sm font-medium flex items-center gap-1\">\n                      <Heart className=\"h-3 w-3\" />\n                      Pets\n                    </h4>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => openPetModal(customer.id)}\n                      data-testid={`button-add-pet-${customer.id}`}\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n\n                  {customerPets.length === 0 ? (\n                    <div className=\"text-center py-4 text-gray-500 text-sm\">\n                      Nenhum pet cadastrado\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {customerPets.slice(0, 3).map((pet: any) => (\n                        <div\n                          key={pet.id}\n                          className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded-md\"\n                          data-testid={`pet-item-${pet.id}`}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-lg\">{speciesEmojis[pet.species] || \"🐾\"}</span>\n                            <div>\n                              <div className=\"font-medium text-sm\" data-testid={`text-pet-name-${pet.id}`}>\n                                {pet.name}\n                              </div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n                                {getSpeciesDisplay(pet.species)}\n                                {pet.breed && ` • ${pet.breed}`}\n                                {pet.birthDate && ` • ${calculateAge(pet.birthDate)}`}\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => openPetModal(undefined, pet)}\n                            data-testid={`button-edit-pet-${pet.id}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      ))}\n                      \n                      {customerPets.length > 3 && (\n                        <div className=\"text-center text-xs text-gray-500\">\n                          +{customerPets.length - 3} pets mais\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Active Packages */}\n                {customerPackagesActive.length > 0 && (\n                  <>\n                    <Separator className=\"my-4\" />\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium flex items-center gap-1\">\n                        <Package className=\"h-3 w-3\" />\n                        Pacotes Ativos\n                      </h4>\n                      {customerPackagesActive.slice(0, 2).map((pkg: any) => (\n                        <div\n                          key={pkg.id}\n                          className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded-md\"\n                          data-testid={`package-item-${pkg.id}`}\n                        >\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <div className=\"text-sm font-medium\">Pacote Ativo</div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n                                {pkg.remainingUses} usos restantes\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              Ativo\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </>\n                )}\n\n                {customer.notes && (\n                  <>\n                    <Separator className=\"my-4\" />\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-1\">Observações</h4>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-300 line-clamp-2\">\n                        {customer.notes}\n                      </p>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredCustomers.length === 0 && (\n        <div className=\"text-center py-12\" data-testid=\"text-no-customers\">\n          <Heart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-600 dark:text-gray-300 mb-2\">\n            Nenhum cliente encontrado\n          </h3>\n          <p className=\"text-gray-500 mb-4\">\n            {searchTerm ? 'Tente ajustar sua busca' : 'Comece adicionando seu primeiro cliente'}\n          </p>\n        </div>\n      )}\n\n      {/* Customer Modal */}\n      <CustomerModal\n        open={isCustomerModalOpen}\n        onOpenChange={setIsCustomerModalOpen}\n      />\n\n      {/* Enhanced Pet Modal */}\n      <EnhancedPetModal\n        isOpen={isPetModalOpen}\n        onClose={() => {\n          setIsPetModalOpen(false);\n          setEditingPet(null);\n          setSelectedCustomer(null);\n        }}\n        onSubmit={handlePetSubmit}\n        customers={customers}\n        editPet={editingPet}\n        selectedCustomerId={selectedCustomer?.id}\n      />\n    </div>\n  );\n}","size_bytes":15565},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Eye, EyeOff, LogIn, Heart, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst loginSchema = z.object({\n  email: z.string().min(1, \"Usuário é obrigatório\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\n// Floating pets animation component\nconst FloatingPets = () => {\n  const pets = ['🐶', '🐱', '🐰', '🐹', '🐦', '🐠', '🐢', '🦔'];\n  const [visiblePets, setVisiblePets] = useState<Array<{id: number, emoji: string, x: number, y: number, delay: number}>>([]);\n\n  useEffect(() => {\n    const generatePet = (id: number) => ({\n      id,\n      emoji: pets[Math.floor(Math.random() * pets.length)],\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      delay: Math.random() * 5\n    });\n\n    // Generate initial pets\n    const initialPets = Array.from({ length: 6 }, (_, i) => generatePet(i));\n    setVisiblePets(initialPets);\n\n    // Add new pets periodically\n    const interval = setInterval(() => {\n      setVisiblePets(current => {\n        const newPets = current.filter(pet => Date.now() - pet.id < 15000); // Keep pets for 15s\n        if (newPets.length < 8) {\n          newPets.push(generatePet(Date.now()));\n        }\n        return newPets;\n      });\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      {visiblePets.map((pet) => (\n        <div\n          key={pet.id}\n          className=\"absolute text-2xl opacity-20 animate-pulse\"\n          style={{\n            left: `${pet.x}%`,\n            top: `${pet.y}%`,\n            animationDelay: `${pet.delay}s`,\n            animationDuration: '4s'\n          }}\n        >\n          {pet.emoji}\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Paw prints animation component\nconst PawPrints = () => {\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      <div className=\"absolute top-10 left-10 text-blue-200 dark:text-blue-800 opacity-30\">\n        <div className=\"animate-bounce\" style={{ animationDelay: '0s' }}>🐾</div>\n      </div>\n      <div className=\"absolute top-32 right-20 text-purple-200 dark:text-purple-800 opacity-30\">\n        <div className=\"animate-bounce\" style={{ animationDelay: '1s' }}>🐾</div>\n      </div>\n      <div className=\"absolute bottom-20 left-1/4 text-pink-200 dark:text-pink-800 opacity-30\">\n        <div className=\"animate-bounce\" style={{ animationDelay: '2s' }}>🐾</div>\n      </div>\n      <div className=\"absolute bottom-32 right-10 text-green-200 dark:text-green-800 opacity-30\">\n        <div className=\"animate-bounce\" style={{ animationDelay: '0.5s' }}>🐾</div>\n      </div>\n    </div>\n  );\n};\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"admin\",\n      password: \"admin\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: LoginFormData) => login(data.email, data.password),\n    onSuccess: () => {\n      toast({\n        title: \"Login realizado!\",\n        description: \"Bem-vindo ao Gloss Pet Dashboard.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Erro no login\",\n        description: error.message || \"Email ou senha incorretos.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const handleLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-blue-900 dark:to-purple-900 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background animations */}\n      <FloatingPets />\n      <PawPrints />\n      \n      {/* Decorative gradient orbs */}\n      <div className=\"absolute top-0 left-0 w-72 h-72 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full filter blur-3xl animate-pulse\"></div>\n      <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-tl from-pink-400/20 to-blue-400/20 rounded-full filter blur-3xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <div className=\"relative mx-auto mb-6\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-3xl flex items-center justify-center mx-auto shadow-2xl transform hover:scale-105 transition-transform duration-300\">\n              <div className=\"text-white font-bold text-2xl flex items-center gap-1\">\n                <span>🐾</span>\n                <span className=\"text-lg\">PM</span>\n              </div>\n            </div>\n            {/* Floating hearts around logo */}\n            <div className=\"absolute -top-2 -right-2 text-pink-400 animate-bounce\">\n              <Heart className=\"w-4 h-4 fill-current\" />\n            </div>\n            <div className=\"absolute -bottom-1 -left-2 text-blue-400 animate-bounce\" style={{ animationDelay: '1s' }}>\n              <Star className=\"w-3 h-3 fill-current\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            PetManager Pro\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg font-medium\">\n            Sistema Profissional de Gestão para Pet Shops\n          </p>\n          <div className=\"flex items-center justify-center gap-2 mt-3 text-sm text-gray-500 dark:text-gray-400\">\n            <span>🏆</span>\n            <span>Solução Completa</span>\n            <span>•</span>\n            <span>🎯</span>\n            <span>Fácil de Usar</span>\n          </div>\n        </div>\n\n        <Card className=\"shadow-2xl border-0 backdrop-blur-sm bg-white/80 dark:bg-gray-900/80 ring-1 ring-white/20\" data-testid=\"card-auth\">\n          <CardHeader className=\"space-y-3 pb-6\">\n            <CardTitle className=\"text-center flex items-center justify-center gap-3 text-xl\">\n              <div className=\"p-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500\">\n                <LogIn className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"bg-gradient-to-r from-gray-700 to-gray-900 dark:from-gray-100 dark:to-gray-300 bg-clip-text text-transparent\">\n                Entre no Sistema\n              </span>\n            </CardTitle>\n            <p className=\"text-center text-muted-foreground flex items-center justify-center gap-2\">\n              <span>🔐</span>\n              <span>Acesse sua conta para gerenciar o pet shop</span>\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"pb-6\">\n            <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-5\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium flex items-center gap-2\">\n                    <span>👤</span>\n                    <span>Usuário</span>\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"text\"\n                    {...loginForm.register(\"email\")}\n                    data-testid=\"input-login-email\"\n                    className={`transition-all duration-200 ${\n                      loginForm.formState.errors.email \n                        ? \"border-red-500 focus:ring-red-200\" \n                        : \"focus:ring-blue-200 focus:border-blue-400\"\n                    }`}\n                    placeholder=\"Digite: admin\"\n                  />\n                  {loginForm.formState.errors.email && (\n                    <span className=\"text-sm text-red-500 flex items-center gap-1\">\n                      <span>⚠️</span>\n                      {loginForm.formState.errors.email.message}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium flex items-center gap-2\">\n                    <span>🔑</span>\n                    <span>Senha</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      {...loginForm.register(\"password\")}\n                      data-testid=\"input-login-password\"\n                      className={`transition-all duration-200 pr-12 ${\n                        loginForm.formState.errors.password \n                          ? \"border-red-500 focus:ring-red-200\" \n                          : \"focus:ring-blue-200 focus:border-blue-400\"\n                      }`}\n                      placeholder=\"Digite: admin\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-0 h-full px-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  {loginForm.formState.errors.password && (\n                    <span className=\"text-sm text-red-500 flex items-center gap-1\">\n                      <span>⚠️</span>\n                      {loginForm.formState.errors.password.message}\n                    </span>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 text-white font-medium py-3 rounded-lg shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login-submit\"\n                >\n                  {loginMutation.isPending ? (\n                    <span className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      Entrando...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center gap-2\">\n                      <span>🚀</span>\n                      Entrar no Sistema\n                    </span>\n                  )}\n                </Button>\n              </form>\n          </CardContent>\n\n          <CardFooter className=\"pt-6\">\n            <div className=\"w-full text-center\">\n              <Separator className=\"mb-6\" />\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 flex items-center justify-center gap-2\">\n                  <span>🎯</span>\n                  <span>Sistema Profissional de Gestão para Pet Shops</span>\n                </p>\n                <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-700 rounded-lg p-3 border border-blue-100 dark:border-gray-600\">\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 font-medium flex items-center justify-center gap-2\">\n                    <span>💡</span>\n                    <span>Credenciais para teste: <strong>admin</strong> / <strong>admin</strong></span>\n                  </p>\n                </div>\n                <div className=\"flex items-center justify-center gap-4 text-xs text-gray-500 dark:text-gray-400 pt-2\">\n                  <span className=\"flex items-center gap-1\">\n                    <span>✨</span>\n                    <span>Moderno</span>\n                  </span>\n                  <span>•</span>\n                  <span className=\"flex items-center gap-1\">\n                    <span>🛡️</span>\n                    <span>Seguro</span>\n                  </span>\n                  <span>•</span>\n                  <span className=\"flex items-center gap-1\">\n                    <span>⚡</span>\n                    <span>Rápido</span>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardFooter>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13476},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageSquare, Send, Phone, Mail, Clock, CheckCircle, Plus, Filter, Calendar } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  customerName: string;\n  customerId: string;\n  type: \"whatsapp\" | \"email\" | \"sms\";\n  subject?: string;\n  content: string;\n  status: \"sent\" | \"delivered\" | \"read\" | \"failed\";\n  createdAt: string;\n  direction: \"sent\" | \"received\";\n}\n\nexport default function Messages() {\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [newMessage, setNewMessage] = useState({\n    customerId: \"\",\n    type: \"whatsapp\" as const,\n    subject: \"\",\n    content: \"\"\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: messages = [], isLoading } = useQuery({\n    queryKey: [\"/api/messages\"],\n  });\n\n  const { data: customers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: typeof newMessage) => {\n      return await apiRequest(\"/api/messages/send\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      toast({\n        title: \"Mensagem enviada!\",\n        description: \"Sua mensagem foi enviada com sucesso.\",\n      });\n      setNewMessage({ customerId: \"\", type: \"whatsapp\", subject: \"\", content: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: \"Não foi possível enviar a mensagem. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"sent\": return \"bg-blue-100 text-blue-800\";\n      case \"delivered\": return \"bg-green-100 text-green-800\";\n      case \"read\": return \"bg-purple-100 text-purple-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"sent\": return \"Enviada\";\n      case \"delivered\": return \"Entregue\";\n      case \"read\": return \"Lida\";\n      case \"failed\": return \"Falha\";\n      default: return status;\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"whatsapp\": return <MessageSquare className=\"w-4 h-4\" />;\n      case \"email\": return <Mail className=\"w-4 h-4\" />;\n      case \"sms\": return <Phone className=\"w-4 h-4\" />;\n      default: return <MessageSquare className=\"w-4 h-4\" />;\n    }\n  };\n\n  const demoMessages: Message[] = [\n    {\n      id: \"1\",\n      customerName: \"Maria Silva\",\n      customerId: \"customer-1\",\n      type: \"whatsapp\",\n      content: \"Olá Maria! Seu pet Luna está agendado para amanhã às 10h. Confirma presença?\",\n      status: \"read\",\n      createdAt: \"2025-01-10T14:30:00\",\n      direction: \"sent\"\n    },\n    {\n      id: \"2\",\n      customerName: \"João Santos\",\n      customerId: \"customer-2\",\n      type: \"whatsapp\",\n      content: \"Oi! Confirmo sim, obrigada! 😊\",\n      status: \"delivered\",\n      createdAt: \"2025-01-10T16:15:00\",\n      direction: \"received\"\n    },\n    {\n      id: \"3\",\n      customerName: \"Ana Costa\",\n      customerId: \"customer-3\",\n      type: \"email\",\n      subject: \"Lembrete: Pacote vencendo em 7 dias\",\n      content: \"Olá Ana! Seu pacote de 8 banhos vence em 7 dias. Que tal renovar com desconto especial?\",\n      status: \"sent\",\n      createdAt: \"2025-01-11T09:00:00\",\n      direction: \"sent\"\n    }\n  ];\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.customerId || !newMessage.content) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Selecione um cliente e digite uma mensagem.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendMessageMutation.mutate(newMessage);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Mensagens</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Gerencie a comunicação com seus clientes via WhatsApp, email e SMS.\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Enviadas Hoje</p>\n                <p className=\"text-2xl font-bold text-blue-600\">12</p>\n              </div>\n              <Send className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Taxa de Entrega</p>\n                <p className=\"text-2xl font-bold text-green-600\">98%</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Tempo Resp. Médio</p>\n                <p className=\"text-2xl font-bold text-orange-600\">2h</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Não Lidas</p>\n                <p className=\"text-2xl font-bold text-red-600\">3</p>\n              </div>\n              <MessageSquare className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* New Message Form */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"w-5 h-5\" />\n              Nova Mensagem\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSendMessage} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Cliente</label>\n                <Select \n                  value={newMessage.customerId} \n                  onValueChange={(value) => setNewMessage({...newMessage, customerId: value})}\n                >\n                  <SelectTrigger data-testid=\"select-message-customer\">\n                    <SelectValue placeholder=\"Selecione um cliente\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Tipo</label>\n                <Select \n                  value={newMessage.type} \n                  onValueChange={(value) => setNewMessage({...newMessage, type: value as any})}\n                >\n                  <SelectTrigger data-testid=\"select-message-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"sms\">SMS</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {newMessage.type === \"email\" && (\n                <div>\n                  <label className=\"text-sm font-medium\">Assunto</label>\n                  <Input\n                    value={newMessage.subject}\n                    onChange={(e) => setNewMessage({...newMessage, subject: e.target.value})}\n                    placeholder=\"Assunto do email\"\n                    data-testid=\"input-message-subject\"\n                  />\n                </div>\n              )}\n\n              <div>\n                <label className=\"text-sm font-medium\">Mensagem</label>\n                <Textarea\n                  value={newMessage.content}\n                  onChange={(e) => setNewMessage({...newMessage, content: e.target.value})}\n                  placeholder=\"Digite sua mensagem...\"\n                  rows={4}\n                  data-testid=\"textarea-message-content\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={sendMessageMutation.isPending}\n                data-testid=\"button-send-message\"\n              >\n                {sendMessageMutation.isPending ? \"Enviando...\" : \"Enviar Mensagem\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Messages List */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Histórico de Mensagens</CardTitle>\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filtros\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid grid-cols-4 w-full\">\n                <TabsTrigger value=\"all\">Todas</TabsTrigger>\n                <TabsTrigger value=\"sent\">Enviadas</TabsTrigger>\n                <TabsTrigger value=\"received\">Recebidas</TabsTrigger>\n                <TabsTrigger value=\"failed\">Falhas</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={activeTab} className=\"mt-6 space-y-4\">\n                {demoMessages.map((message) => (\n                  <div \n                    key={message.id} \n                    className={`p-4 rounded-lg border ${\n                      message.direction === \"sent\" \n                        ? \"bg-blue-50 border-blue-200 ml-8\" \n                        : \"bg-gray-50 border-gray-200 mr-8\"\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {getTypeIcon(message.type)}\n                        <span className=\"font-semibold\">{message.customerName}</span>\n                        <Badge className={getStatusColor(message.status)}>\n                          {getStatusText(message.status)}\n                        </Badge>\n                      </div>\n                      <span className=\"text-sm text-gray-500\">\n                        {new Date(message.createdAt).toLocaleString(\"pt-BR\")}\n                      </span>\n                    </div>\n                    \n                    {message.subject && (\n                      <p className=\"font-medium text-gray-900 mb-1\">{message.subject}</p>\n                    )}\n                    \n                    <p className=\"text-gray-700\">{message.content}</p>\n                  </div>\n                ))}\n                \n                {demoMessages.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <MessageSquare className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\n                    <p>Nenhuma mensagem encontrada</p>\n                    <p className=\"text-sm\">Envie sua primeira mensagem para começar</p>\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ações Rápidas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex-col\" data-testid=\"button-reminder-renewals\">\n              <Clock className=\"w-6 h-6 mb-2\" />\n              Lembretes de Renovação\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col\" data-testid=\"button-appointment-confirmations\">\n              <Calendar className=\"w-6 h-6 mb-2\" />\n              Confirmações de Agendamento\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col\" data-testid=\"button-promotional-campaigns\">\n              <Send className=\"w-6 h-6 mb-2\" />\n              Campanhas Promocionais\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13698},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/packages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Package, DollarSign, Calendar, Users } from \"lucide-react\";\nimport { PackageModal } from \"@/components/modals/package-modal-enhanced\";\n\ninterface PackageType {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  totalUses: number;\n  validityDays: number;\n  maxPets: number;\n  active: boolean;\n  createdAt: Date;\n}\n\ninterface CustomerPackage {\n  id: string;\n  customerName: string;\n  packageTypeName: string;\n  purchaseDate: string;\n  expiryDate: string;\n  remainingUses: number;\n  totalUses: number;\n  status: string;\n}\n\nexport default function Packages() {\n  const [isNewPackageOpen, setIsNewPackageOpen] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<PackageType | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: packageTypes = [], isLoading } = useQuery<PackageType[]>({\n    queryKey: [\"/api/package-types\"],\n  });\n\n  const { data: customerPackages = [] } = useQuery<CustomerPackage[]>({\n    queryKey: [\"/api/customer-packages\"],\n  });\n\n\n\n\n\n  const deletePackageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/package-types/${id}`, \"DELETE\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/package-types\"] });\n      toast({\n        title: \"Pacote removido!\",\n        description: \"Tipo de pacote excluído com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao excluir\",\n        description: \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Gestão de Pacotes</h1>\n          <p className=\"text-gray-600 mt-2\">Gerencie tipos de pacotes e pacotes de clientes</p>\n        </div>\n        <Button \n          onClick={() => setIsNewPackageOpen(true)}\n          data-testid=\"button-new-package\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Novo Pacote\n        </Button>\n      </div>\n\n      {/* Package Modal */}\n      <PackageModal open={isNewPackageOpen} onOpenChange={setIsNewPackageOpen} />\n\n      {/* Package Types List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Package className=\"w-5 h-5 mr-2\" />\n            Tipos de Pacotes ({packageTypes.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Carregando pacotes...</div>\n          ) : packageTypes.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Package className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p>Nenhum tipo de pacote cadastrado</p>\n              <p className=\"text-sm mt-2\">Clique em \"Novo Pacote\" para começar</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Pacote</TableHead>\n                  <TableHead>Preço</TableHead>\n                  <TableHead>Sessões</TableHead>\n                  <TableHead>Validade</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"w-[100px]\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {packageTypes.map((packageType) => (\n                  <TableRow key={packageType.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{packageType.name}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {packageType.description}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        R$ {packageType.price}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Users className=\"w-3 h-3 mr-1\" />\n                        {packageType.totalUses} sessões\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {packageType.validityDays} dias\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={packageType.active ? \"default\" : \"secondary\"}>\n                        {packageType.active ? \"Ativo\" : \"Inativo\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setEditingPackage(packageType)}\n                          data-testid={`button-edit-package-${packageType.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deletePackageMutation.mutate(packageType.id)}\n                          data-testid={`button-delete-package-${packageType.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Customer Packages List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"w-5 h-5 mr-2\" />\n            Pacotes de Clientes ({customerPackages.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {customerPackages.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p>Nenhum pacote de cliente ativo</p>\n              <p className=\"text-sm mt-2\">Os pacotes comprados pelos clientes aparecerão aqui</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Cliente</TableHead>\n                  <TableHead>Pacote</TableHead>\n                  <TableHead>Usos Restantes</TableHead>\n                  <TableHead>Validade</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {customerPackages.map((customerPackage) => {\n                  const expiryDate = customerPackage.expiryDate ? new Date(customerPackage.expiryDate) : null;\n                  const isExpiringSoon = expiryDate && expiryDate <= new Date(Date.now() + 15 * 24 * 60 * 60 * 1000);\n                  const progressPercentage = customerPackage.totalUses ? \n                    ((customerPackage.totalUses - customerPackage.remainingUses) / customerPackage.totalUses) * 100 : 0;\n                  \n                  return (\n                    <TableRow key={customerPackage.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <div className=\"font-medium text-gray-900\">{customerPackage.customerName || 'Cliente não identificado'}</div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">{customerPackage.packageTypeName || 'Pacote não identificado'}</div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium text-sm\">\n                              {customerPackage.remainingUses} / {customerPackage.totalUses || 'N/A'}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {Math.round(progressPercentage)}% usado\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className={`h-2 rounded-full transition-all ${\n                                progressPercentage > 80 ? 'bg-red-500' : \n                                progressPercentage > 50 ? 'bg-yellow-500' : 'bg-green-500'\n                              }`}\n                              style={{ width: `${progressPercentage}%` }}\n                            />\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className={`text-sm font-medium ${isExpiringSoon ? 'text-red-600' : 'text-gray-900'}`}>\n                            {expiryDate ? expiryDate.toLocaleDateString('pt-BR') : 'Data não disponível'}\n                          </div>\n                          {expiryDate && (\n                            <div className=\"text-xs text-gray-500\">\n                              {(() => {\n                                const daysRemaining = Math.ceil((expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n                                return daysRemaining > 0 ? `${daysRemaining} dias restantes` : 'Expirado';\n                              })()}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={customerPackage.status === 'ativo' ? 'default' : 'secondary'}\n                          className={\n                            customerPackage.status === 'ativo' ? 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200' :\n                            customerPackage.status === 'expirado' ? 'bg-red-100 text-red-800 border-red-200' :\n                            customerPackage.status === 'consumido' ? 'bg-orange-100 text-orange-800 border-orange-200' :\n                            'bg-gray-100 text-gray-800 border-gray-200'\n                          }\n                        >\n                          {customerPackage.status === 'ativo' ? 'Ativo' : \n                           customerPackage.status === 'consumido' ? 'Consumido' :\n                           customerPackage.status === 'expirado' ? 'Expirado' : 'Usado'}\n                        </Badge>\n                        {isExpiringSoon && customerPackage.status === 'ativo' && (\n                          <div className=\"text-xs text-red-600 mt-1 font-medium\">\n                            ⚠️ Expira em breve\n                          </div>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modal para criar novo pacote */}\n      <PackageModal \n        open={isNewPackageOpen} \n        onOpenChange={setIsNewPackageOpen}\n      />\n\n      {/* Modal para editar pacote */}\n      {editingPackage && (\n        <PackageModal \n          open={!!editingPackage} \n          onOpenChange={(open) => !open && setEditingPackage(null)}\n          editingPackage={editingPackage}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12824},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\nimport { Download, Filter, TrendingUp, Users, Package, DollarSign } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"month\");\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  const handleExportReport = () => {\n    setIsExporting(true);\n    // Simulate export delay\n    setTimeout(() => {\n      setIsExporting(false);\n      toast({\n        title: \"Relatório exportado!\",\n        description: \"O arquivo PDF foi baixado com sucesso.\",\n      });\n    }, 2000);\n  };\n\n  const revenueData = [\n    { name: \"Jan\", valor: 4800 },\n    { name: \"Fev\", valor: 5200 },\n    { name: \"Mar\", valor: 4600 },\n    { name: \"Abr\", valor: 6100 },\n    { name: \"Mai\", valor: 5800 },\n    { name: \"Jun\", valor: 7200 },\n  ];\n\n  const servicesData = [\n    { name: \"Banho & Tosa\", value: 45, color: \"#3B82F6\" },\n    { name: \"Tosa Higiênica\", value: 25, color: \"#10B981\" },\n    { name: \"Hidratação\", value: 15, color: \"#F59E0B\" },\n    { name: \"Corte de Unhas\", value: 10, color: \"#EF4444\" },\n    { name: \"Outros\", value: 5, color: \"#8B5CF6\" },\n  ];\n\n  const customerGrowthData = [\n    { name: \"Jan\", novos: 12, ativos: 85 },\n    { name: \"Fev\", novos: 15, ativos: 92 },\n    { name: \"Mar\", novos: 18, ativos: 98 },\n    { name: \"Abr\", novos: 22, ativos: 108 },\n    { name: \"Mai\", novos: 19, ativos: 115 },\n    { name: \"Jun\", novos: 25, ativos: 128 },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Relatórios</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Análise detalhada do desempenho do seu negócio.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-report-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"week\">Esta Semana</SelectItem>\n              <SelectItem value=\"month\">Este Mês</SelectItem>\n              <SelectItem value=\"quarter\">Trimestre</SelectItem>\n              <SelectItem value=\"year\">Ano</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button \n            variant=\"outline\" \n            onClick={handleExportReport}\n            disabled={isExporting}\n            data-testid=\"button-export-report\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            {isExporting ? \"Exportando...\" : \"Exportar PDF\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Receita Total</p>\n                <p className=\"text-2xl font-bold text-green-600\">R$ 7.200</p>\n                <p className=\"text-sm text-green-500\">+24% vs mês anterior</p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Clientes Ativos</p>\n                <p className=\"text-2xl font-bold text-blue-600\">128</p>\n                <p className=\"text-sm text-blue-500\">+11% vs mês anterior</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pacotes Vendidos</p>\n                <p className=\"text-2xl font-bold text-purple-600\">42</p>\n                <p className=\"text-sm text-purple-500\">+18% vs mês anterior</p>\n              </div>\n              <Package className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Ticket Médio</p>\n                <p className=\"text-2xl font-bold text-orange-600\">R$ 85</p>\n                <p className=\"text-sm text-orange-500\">+7% vs mês anterior</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Evolução da Receita</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip formatter={(value) => [`R$ ${value}`, \"Receita\"]} />\n                <Bar dataKey=\"valor\" fill=\"#3B82F6\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Services Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Distribuição de Serviços</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={servicesData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {servicesData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Customer Growth */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Crescimento de Clientes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={customerGrowthData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Line type=\"monotone\" dataKey=\"novos\" stroke=\"#10B981\" name=\"Novos Clientes\" />\n              <Line type=\"monotone\" dataKey=\"ativos\" stroke=\"#3B82F6\" name=\"Clientes Ativos\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Reports */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Clientes (Por Receita)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[\n                { name: \"Maria Silva\", revenue: \"R$ 480\", visits: 8 },\n                { name: \"João Santos\", revenue: \"R$ 420\", visits: 6 },\n                { name: \"Ana Costa\", revenue: \"R$ 380\", visits: 7 },\n                { name: \"Carlos Oliveira\", revenue: \"R$ 320\", visits: 5 }\n              ].map((client, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-semibold\">{client.name}</p>\n                    <p className=\"text-sm text-gray-600\">{client.visits} visitas</p>\n                  </div>\n                  <p className=\"font-bold text-green-600\">{client.revenue}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Serviços Mais Populares</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[\n                { service: \"Banho & Tosa\", count: 45, revenue: \"R$ 2.250\" },\n                { service: \"Tosa Higiênica\", count: 25, revenue: \"R$ 625\" },\n                { service: \"Hidratação\", count: 15, revenue: \"R$ 525\" },\n                { service: \"Corte de Unhas\", count: 10, revenue: \"R$ 150\" }\n              ].map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-semibold\">{item.service}</p>\n                    <p className=\"text-sm text-gray-600\">{item.count} realizados</p>\n                  </div>\n                  <p className=\"font-bold text-blue-600\">{item.revenue}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9804},"client/src/pages/support.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, MessageCircle, Bug, HelpCircle, Phone } from \"lucide-react\";\n\nexport default function Support() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    category: \"\",\n    message: \"\"\n  });\n  const { toast } = useToast();\n\n  const sendSupportEmail = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"/api/support/send-email\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mensagem enviada!\",\n        description: \"Recebemos sua solicitação e responderemos em breve.\",\n      });\n      setFormData({\n        name: \"\",\n        email: \"\",\n        subject: \"\",\n        category: \"\",\n        message: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: \"Tente novamente ou entre em contato diretamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.email || !formData.subject || !formData.message) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Preencha todos os campos para enviar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendSupportEmail.mutate(formData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Central de Suporte</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Precisa de ajuda? Entre em contato conosco para suporte técnico, dúvidas ou sugestões.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Contact Info */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Phone className=\"w-5 h-5\" />\n                Contato Direto\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label className=\"text-sm font-medium\">Email do Desenvolvedor</Label>\n                <p className=\"text-sm text-gray-600\">morningloryfox@gmail.com</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Tempo de Resposta</Label>\n                <p className=\"text-sm text-gray-600\">Até 24 horas úteis</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Tipos de Suporte</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Bug className=\"w-4 h-4 text-red-500\" />\n                <span className=\"text-sm\">Bugs e problemas técnicos</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <HelpCircle className=\"w-4 h-4 text-blue-500\" />\n                <span className=\"text-sm\">Dúvidas sobre o sistema</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <MessageCircle className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-sm\">Sugestões e melhorias</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Support Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                Enviar Solicitação de Suporte\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nome *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      placeholder=\"Seu nome\"\n                      data-testid=\"input-support-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({...formData, email: e.target.value})}\n                      placeholder=\"seu.email@exemplo.com\"\n                      data-testid=\"input-support-email\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Categoria</Label>\n                  <Select onValueChange={(value) => setFormData({...formData, category: value})}>\n                    <SelectTrigger data-testid=\"select-support-category\">\n                      <SelectValue placeholder=\"Selecione o tipo de solicitação\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"bug\">Bug/Problema Técnico</SelectItem>\n                      <SelectItem value=\"feature\">Nova Funcionalidade</SelectItem>\n                      <SelectItem value=\"help\">Ajuda/Dúvida</SelectItem>\n                      <SelectItem value=\"feedback\">Feedback/Sugestão</SelectItem>\n                      <SelectItem value=\"other\">Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"subject\">Assunto *</Label>\n                  <Input\n                    id=\"subject\"\n                    value={formData.subject}\n                    onChange={(e) => setFormData({...formData, subject: e.target.value})}\n                    placeholder=\"Breve descrição do problema ou solicitação\"\n                    data-testid=\"input-support-subject\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"message\">Mensagem *</Label>\n                  <Textarea\n                    id=\"message\"\n                    value={formData.message}\n                    onChange={(e) => setFormData({...formData, message: e.target.value})}\n                    placeholder=\"Descreva detalhadamente sua solicitação...\"\n                    rows={6}\n                    data-testid=\"textarea-support-message\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={sendSupportEmail.isPending}\n                  data-testid=\"button-send-support\"\n                >\n                  {sendSupportEmail.isPending ? \"Enviando...\" : \"Enviar Solicitação\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7625},"client/src/components/auth/auth-provider.tsx":{"content":"import { createContext } from \"react\";\nimport { AuthContext, useAuthProvider } from \"@/hooks/useAuth\";\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const auth = useAuthProvider();\n\n  return (\n    <AuthContext.Provider value={auth}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":367},"client/src/components/dashboard/action-queue.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { openWhatsApp } from \"@/lib/whatsapp\";\n\ninterface ActionQueueItem {\n  id: string;\n  customerId: string;\n  customerName: string;\n  petName: string;\n  petBreed: string;\n  petImage: string;\n  packageId: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  reason: string;\n  expiresIn?: number;\n  remainingUses?: number;\n  lastUsedDays?: number;\n}\n\ninterface ActionQueueProps {\n  items: ActionQueueItem[];\n}\n\nconst priorityColors = {\n  high: \"bg-orange-100 text-orange-800\",\n  medium: \"bg-yellow-100 text-yellow-800\",\n  low: \"bg-gray-100 text-gray-800\",\n};\n\nconst priorityLabels = {\n  high: \"Alta Prioridade\",\n  medium: \"Média Prioridade\", \n  low: \"Baixa Prioridade\",\n};\n\nexport function ActionQueue({ items }: ActionQueueProps) {\n  const handleWhatsApp = (item: ActionQueueItem) => {\n    openWhatsApp(item.customerId, `Olá ${item.customerName}! Como está o ${item.petName}? ${item.reason}`);\n  };\n\n  const handleSchedule = (item: ActionQueueItem) => {\n    // TODO: Implement appointment scheduling\n    console.log('Opening appointment scheduler for:', item.customerName);\n  };\n\n  const handleRenew = (item: ActionQueueItem) => {\n    // TODO: Implement package renewal\n    console.log('Initiating package renewal for:', item.customerName);\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n      <CardHeader className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Fila de Ações\n          </CardTitle>\n          <Badge variant=\"destructive\" data-testid=\"action-queue-count\">\n            {items.length} pendentes\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"divide-y divide-gray-200\">\n          {items.length === 0 ? (\n            <div className=\"px-6 py-8 text-center text-gray-500\">\n              <p>Nenhuma ação pendente no momento</p>\n            </div>\n          ) : (\n            items.map((item) => (\n              <div \n                key={item.id} \n                className=\"px-4 py-4 hover:bg-gray-50 transition-colors border-l-4 border-l-orange-400\"\n                data-testid={`action-item-${item.id}`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  {/* Pet Avatar */}\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold text-sm shadow-sm\">\n                      {item.petName.charAt(0).toUpperCase()}\n                    </div>\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h4 className=\"text-sm font-semibold text-gray-900\" data-testid={`pet-name-${item.id}`}>\n                            {item.petName}\n                          </h4>\n                          <span className=\"text-xs text-gray-500\">({item.petBreed})</span>\n                          <Badge\n                            variant=\"secondary\"\n                            className={cn(\"text-xs\", priorityColors[item.priority])}\n                            data-testid={`priority-${item.id}`}\n                          >\n                            {priorityLabels[item.priority]}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-600\" data-testid={`customer-info-${item.id}`}>\n                          Cliente: <span className=\"font-medium\">{item.customerName}</span>\n                        </p>\n                        <p className=\"text-sm text-gray-700 leading-relaxed\">\n                          {item.reason}\n                        </p>\n                        \n                        {/* Status Pills */}\n                        <div className=\"flex flex-wrap gap-1.5 mt-2\">\n                          {item.expiresIn !== undefined && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-50 text-red-700\">\n                              ⏰ Expira em {item.expiresIn} dias\n                            </span>\n                          )}\n                          {item.remainingUses !== undefined && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700\">\n                              📦 {item.remainingUses} usos restantes\n                            </span>\n                          )}\n                          {item.lastUsedDays !== undefined && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-50 text-gray-600\">\n                              🕐 Último uso há {item.lastUsedDays} dias\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex flex-col space-y-1.5 ml-4\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleWhatsApp(item)}\n                          className=\"bg-green-500 hover:bg-green-600 text-white text-xs px-3 py-1.5 h-auto\"\n                          data-testid={`button-whatsapp-${item.id}`}\n                        >\n                          WhatsApp\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleSchedule(item)}\n                          className=\"text-blue-600 border-blue-200 hover:bg-blue-50 text-xs px-3 py-1.5 h-auto\"\n                          data-testid={`button-schedule-${item.id}`}\n                        >\n                          Agendar\n                        </Button>\n                        {item.priority !== \"low\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleRenew(item)}\n                            className=\"text-purple-600 border-purple-200 hover:bg-purple-50 text-xs px-3 py-1.5 h-auto\"\n                            data-testid={`button-renew-${item.id}`}\n                          >\n                            Renovar\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        \n        {items.length > 0 && (\n          <div className=\"px-6 py-4 bg-gray-50 rounded-b-xl\">\n            <button \n              className=\"text-sm font-medium text-primary hover:text-primary/80\"\n              data-testid=\"button-view-all-actions\"\n            >\n              Ver todos os {items.length} itens →\n            </button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7577},"client/src/components/dashboard/active-packages.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/utils\";\nimport { PackageUsageModal } from \"@/components/modals/package-usage-modal\";\nimport { useState } from \"react\";\n\ninterface ActivePackage {\n  id: string;\n  customerId: string;\n  packageTypeId: string;\n  remainingUses: number;\n  validUntil: string;\n  purchasePrice: string;\n  packageType?: {\n    name: string;\n    totalUses: number;\n  };\n  customer?: {\n    name: string;\n  };\n}\n\nexport function ActivePackages() {\n  const [selectedPackage, setSelectedPackage] = useState<ActivePackage | null>(null);\n  const [showUsageModal, setShowUsageModal] = useState(false);\n\n  const { data: packages, isLoading } = useQuery<ActivePackage[]>({\n    queryKey: [\"/api/packages/active\"],\n  });\n\n  const handleUsePackage = (pkg: ActivePackage) => {\n    setSelectedPackage(pkg);\n    setShowUsageModal(true);\n  };\n\n  const handleRenewPackage = (pkg: ActivePackage) => {\n    // TODO: Implement package renewal\n    console.log('Renewing package:', pkg.id);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const getUsagePercentage = (used: number, total: number) => {\n    return ((total - used) / total) * 100;\n  };\n\n  const isExpiringSoon = (validUntil: string) => {\n    const now = new Date();\n    const expiry = new Date(validUntil);\n    const daysDiff = Math.ceil((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return daysDiff <= 7;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n        <CardHeader>\n          <CardTitle>Pacotes Ativos</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-24 bg-gray-200 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n        <CardHeader className=\"px-6 py-4 border-b border-gray-200\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Pacotes Ativos\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"px-6 py-4 space-y-4\">\n          {!packages || packages.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>Nenhum pacote ativo no momento</p>\n            </div>\n          ) : (\n            packages.slice(0, 3).map((pkg) => {\n              const totalUses = pkg.packageType?.totalUses || 10;\n              const usedCount = totalUses - pkg.remainingUses;\n              const usagePercent = getUsagePercentage(pkg.remainingUses, totalUses);\n              const isExpiring = isExpiringSoon(pkg.validUntil);\n              \n              return (\n                <div \n                  key={pkg.id}\n                  className={cn(\n                    \"border rounded-lg p-4 transition-all hover:shadow-md\",\n                    isExpiring ? \"border-red-200 bg-red-50\" : \"border-gray-200 bg-white\"\n                  )}\n                  data-testid={`package-${pkg.id}`}\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"space-y-1\">\n                      <h4 className=\"font-semibold text-gray-900 text-sm\" data-testid={`package-name-${pkg.id}`}>\n                        {pkg.packageType?.name || \"Pacote\"}\n                      </h4>\n                      <p className=\"text-xs text-gray-600\" data-testid={`customer-name-${pkg.id}`}>\n                        Cliente: {pkg.customer?.name || \"Cliente\"}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-lg font-bold text-gray-900\" data-testid={`package-price-${pkg.id}`}>\n                        R$ {pkg.purchasePrice}\n                      </span>\n                      {isExpiring && (\n                        <div className=\"text-xs text-red-600 font-medium\">\n                          Expira em breve!\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Progress Bar with enhanced styling */}\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-gray-600 font-medium\">Usos</span>\n                      <span className=\"font-semibold text-gray-800\" data-testid={`usage-count-${pkg.id}`}>\n                        {pkg.remainingUses}/{totalUses}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n                      <div \n                        className={cn(\n                          \"h-3 rounded-full transition-all duration-300\",\n                          pkg.remainingUses <= 1 ? \"bg-red-500\" : \n                          pkg.remainingUses <= 2 ? \"bg-yellow-500\" : \"bg-blue-500\"\n                        )}\n                        style={{ width: `${((totalUses - pkg.remainingUses) / totalUses) * 100}%` }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {Math.round(((totalUses - pkg.remainingUses) / totalUses) * 100)}% utilizado\n                    </div>\n                  </div>\n                  \n                  {/* Date and Actions */}\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs\">\n                      <span className=\"text-gray-500\">Válido até: </span>\n                      <span \n                        className={cn(\n                          \"font-medium\",\n                          isExpiring ? \"text-red-600\" : \"text-gray-700\"\n                        )}\n                        data-testid={`valid-until-${pkg.id}`}\n                      >\n                        {formatDate(pkg.validUntil)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\"\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white flex-1 text-xs py-1.5 h-auto\"\n                        onClick={() => handleUsePackage(pkg)}\n                        data-testid={`button-use-${pkg.id}`}\n                      >\n                        Usar\n                      </Button>\n                      \n                      {(isExpiring || pkg.remainingUses <= 1) && (\n                        <Button \n                          size=\"sm\"\n                          className=\"bg-green-600 hover:bg-green-700 text-white flex-1 text-xs py-1.5 h-auto\"\n                          onClick={() => handleRenewPackage(pkg)}\n                          data-testid={`button-renew-${pkg.id}`}\n                        >\n                          Renovar\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </CardContent>\n        \n        {packages && packages.length > 0 && (\n          <div className=\"px-6 py-4 bg-gray-50 rounded-b-xl\">\n            <button \n              className=\"text-sm font-medium text-primary hover:text-primary/80\"\n              data-testid=\"button-view-all-packages\"\n            >\n              Ver todos os pacotes →\n            </button>\n          </div>\n        )}\n      </Card>\n\n      {/* Package Usage Modal */}\n      <PackageUsageModal \n        open={showUsageModal}\n        onOpenChange={setShowUsageModal}\n        package={selectedPackage}\n      />\n    </>\n  );\n}\n","size_bytes":8150},"client/src/components/dashboard/metric-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { InfoTooltip } from \"@/components/ui/info-tooltip\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  color: \"blue\" | \"green\" | \"orange\" | \"red\";\n  change?: string;\n  changeText?: string;\n  testId?: string;\n  description?: string; // Descrição para o tooltip\n}\n\nconst colorClasses = {\n  blue: \"bg-blue-100 text-blue-600\",\n  green: \"bg-green-100 text-green-600\",\n  orange: \"bg-orange-100 text-orange-600\", \n  red: \"bg-red-100 text-red-600\",\n};\n\nexport function MetricCard({ \n  title, \n  value, \n  icon: Icon, \n  color, \n  change, \n  changeText,\n  testId,\n  description\n}: MetricCardProps) {\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\" data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"flex items-center gap-2\">\n              <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n              {description && <InfoTooltip content={description} />}\n            </div>\n            <p className=\"text-3xl font-bold text-gray-900\" data-testid={`${testId}-value`}>\n              {value}\n            </p>\n          </div>\n          <div className={cn(\"w-12 h-12 rounded-xl flex items-center justify-center\", colorClasses[color])}>\n            <Icon className=\"w-6 h-6\" />\n          </div>\n        </div>\n        \n        {change && changeText && (\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">{change}</span>\n            <span className=\"text-gray-500 ml-1\">{changeText}</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1860},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, Plus, RefreshCw, MessageSquare } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ActivityItem {\n  type: string;\n  title: string;\n  description: string;\n  details: string;\n  icon: string;\n  color: string;\n}\n\ninterface RecentActivityProps {\n  activities: ActivityItem[];\n}\n\nconst iconMap = {\n  check: Check,\n  plus: Plus,\n  refresh: RefreshCw,\n  message: MessageSquare,\n};\n\nconst colorMap = {\n  green: \"bg-green-100 text-green-600\",\n  blue: \"bg-blue-100 text-blue-600\",\n  purple: \"bg-purple-100 text-purple-600\",\n  orange: \"bg-orange-100 text-orange-600\",\n};\n\nexport function RecentActivity({ activities }: RecentActivityProps) {\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n      <CardHeader className=\"px-6 py-4 border-b border-gray-200\">\n        <CardTitle className=\"text-lg font-semibold text-gray-900\">\n          Atividades Recentes\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"px-6 py-4 space-y-4\">\n        {activities.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>Nenhuma atividade recente</p>\n          </div>\n        ) : (\n          activities.map((activity, index) => {\n            const IconComponent = iconMap[activity.icon as keyof typeof iconMap] || Check;\n            const colorClass = colorMap[activity.color as keyof typeof colorMap] || colorMap.green;\n            \n            return (\n              <div \n                key={index} \n                className=\"flex items-start space-x-3\"\n                data-testid={`activity-${index}`}\n              >\n                <div className={cn(\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\", colorClass)}>\n                  <IconComponent className=\"w-4 h-4\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-gray-900\" data-testid={`activity-title-${index}`}>\n                    <span className=\"font-medium\">{activity.title}</span> - {activity.description}\n                  </p>\n                  <p className=\"text-xs text-gray-500\" data-testid={`activity-details-${index}`}>\n                    {activity.details}\n                  </p>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2450},"client/src/components/dashboard/revenue-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface RevenueItem {\n  name: string;\n  revenue: number;\n  color: string;\n}\n\ninterface RevenueChartProps {\n  data: RevenueItem[];\n}\n\nconst colorMap = {\n  blue: { bg: \"bg-blue-500\", text: \"text-blue-500\" },\n  green: { bg: \"bg-green-500\", text: \"text-green-500\" },\n  purple: { bg: \"bg-purple-500\", text: \"text-purple-500\" },\n  orange: { bg: \"bg-orange-500\", text: \"text-orange-500\" },\n};\n\nexport function RevenueChart({ data }: RevenueChartProps) {\n  const maxRevenue = Math.max(...data.map(item => item.revenue));\n  const totalRevenue = data.reduce((sum, item) => sum + item.revenue, 0);\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const getPercentage = (revenue: number) => {\n    return maxRevenue > 0 ? (revenue / maxRevenue) * 100 : 0;\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n      <CardHeader className=\"px-6 py-4 border-b border-gray-200\">\n        <CardTitle className=\"text-lg font-semibold text-gray-900\">\n          Receita por Serviço\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"px-6 py-6\">\n        {data.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>Nenhum dado de receita disponível</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {data.map((item, index) => {\n              const colorClass = colorMap[item.color as keyof typeof colorMap] || colorMap.blue;\n              const percentage = getPercentage(item.revenue);\n              \n              return (\n                <div key={index} data-testid={`revenue-item-${index}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-4 h-4 ${colorClass.bg} rounded-full`}></div>\n                      <span className=\"text-sm font-medium text-gray-700\" data-testid={`service-name-${index}`}>\n                        {item.name}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-bold text-gray-900\" data-testid={`service-revenue-${index}`}>\n                      {formatCurrency(item.revenue)}\n                    </span>\n                  </div>\n                  <div className=\"mt-2\">\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                </div>\n              );\n            })}\n            \n            <div className=\"mt-6 pt-4 border-t border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-lg font-bold text-gray-900\">Total</span>\n                <span \n                  className=\"text-lg font-bold text-primary\" \n                  data-testid=\"total-revenue\"\n                >\n                  {formatCurrency(totalRevenue)}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3261},"client/src/components/layout/header.tsx":{"content":"import { Menu, Bell, User, LogOut, Building } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { CustomerModal } from \"@/components/modals/customer-modal-enhanced\";\nimport { PackageModal } from \"@/components/modals/package-modal-enhanced\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Header() {\n  const [showCustomerModal, setShowCustomerModal] = useState(false);\n  const [showPackageModal, setShowPackageModal] = useState(false);\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n\n  const toggleMobileSidebar = () => {\n    const sidebar = document.getElementById('mobile-sidebar');\n    const overlay = document.getElementById('mobile-sidebar-overlay');\n    if (sidebar && overlay) {\n      sidebar.classList.toggle('-translate-x-full');\n      overlay.classList.toggle('hidden');\n    }\n  };\n\n  return (\n    <>\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Mobile menu button */}\n            <button \n              className=\"lg:hidden p-2 text-gray-600 hover:text-gray-900\"\n              onClick={toggleMobileSidebar}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"w-6 h-6\" />\n            </button>\n\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">PetManager Pro</h1>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                className=\"bg-primary hover:bg-primary/90\"\n                onClick={() => setShowCustomerModal(true)}\n                data-testid=\"button-new-customer\"\n              >\n                Novo Cliente\n              </Button>\n              \n              <Button \n                className=\"bg-success hover:bg-success/90 text-success-foreground\"\n                onClick={() => setShowPackageModal(true)}\n                data-testid=\"button-new-package\"\n              >\n                Novo Pacote\n              </Button>\n              \n              {/* Notifications */}\n              <button \n                className=\"relative p-2 text-gray-600 hover:text-gray-900\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"w-6 h-6\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n              </button>\n\n              {/* User Menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src=\"\" alt={user?.name || \"\"} />\n                      <AvatarFallback className=\"bg-gradient-to-br from-pink-500 to-purple-600 text-white\">\n                        {user?.name?.charAt(0)?.toUpperCase() || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">{user?.name}</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">{user?.email}</p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"text-muted-foreground\" disabled>\n                    <Building className=\"mr-2 h-4 w-4\" />\n                    <span>{user?.company?.name}</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={async () => {\n                      try {\n                        await logout();\n                        toast({\n                          title: \"Logout realizado\",\n                          description: \"Você foi desconectado com sucesso.\",\n                        });\n                      } catch (error) {\n                        toast({\n                          title: \"Erro\",\n                          description: \"Erro ao fazer logout.\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    }}\n                    data-testid=\"menu-item-logout\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Sair</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Sidebar Overlay */}\n      <div \n        id=\"mobile-sidebar-overlay\" \n        className=\"fixed inset-0 bg-gray-600 bg-opacity-75 lg:hidden hidden z-40\"\n        onClick={toggleMobileSidebar}\n      />\n\n      {/* Modals */}\n      <CustomerModal open={showCustomerModal} onOpenChange={setShowCustomerModal} />\n      <PackageModal open={showPackageModal} onOpenChange={setShowPackageModal} />\n    </>\n  );\n}\n","size_bytes":5683},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Home,\n  Users,\n  Package,\n  Calendar,\n  BarChart3,\n  MessageSquare,\n  HelpCircle,\n  Bell,\n  Settings,\n  X\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Clientes\", href: \"/customers\", icon: Users },\n  { name: \"Pacotes\", href: \"/packages\", icon: Package },\n  { name: \"Agendamentos\", href: \"/appointments\", icon: Calendar },\n  { name: \"Relatórios\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Mensagens\", href: \"/messages\", icon: MessageSquare },\n  { name: \"Suporte\", href: \"/support\", icon: HelpCircle },\n  { name: \"Solicitações\", href: \"/client-requests\", icon: Bell },\n  { name: \"Usuários\", href: \"/users\", icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  const closeMobileSidebar = () => {\n    const sidebar = document.getElementById('mobile-sidebar');\n    const overlay = document.getElementById('mobile-sidebar-overlay');\n    if (sidebar && overlay) {\n      sidebar.classList.add('-translate-x-full');\n      overlay.classList.add('hidden');\n    }\n  };\n\n  return (\n    <div \n      id=\"mobile-sidebar\" \n      className=\"fixed inset-y-0 left-0 w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transform -translate-x-full transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:flex-shrink-0 z-50\"\n    >\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-pink-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">GP</span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-gray-900 dark:text-white\">Gloss Pet</h1>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Dashboard</p>\n            </div>\n          </div>\n          \n          {/* Mobile Close Button */}\n          <button \n            className=\"lg:hidden p-1 text-gray-400 hover:text-gray-600\"\n            onClick={closeMobileSidebar}\n            data-testid=\"button-close-sidebar\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-3 py-4 space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <a\n                  className={cn(\n                    \"flex items-center px-3 py-2.5 text-sm font-medium rounded-lg transition-all duration-200\",\n                    isActive\n                      ? \"text-white bg-gradient-to-r from-pink-500 to-purple-600 shadow-md\"\n                      : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  )}\n                  onClick={closeMobileSidebar}\n                  data-testid={`link-${item.name.toLowerCase()}`}\n                >\n                  <item.icon className=\"w-5 h-5 mr-3\" />\n                  {item.name}\n                </a>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* User Profile - Removed name, keeping only icon in header */}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3509},"client/src/components/modals/customer-modal-enhanced.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCustomerSchema, type InsertCustomer } from \"@shared/schema\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { MapPin, Loader2, Plus, Trash2, PawPrint, Package } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { z } from \"zod\";\n\n// Extended form schema to include pets and packages\nconst extendedCustomerSchema = insertCustomerSchema.extend({\n  pets: z.array(z.object({\n    name: z.string().min(1, \"Nome do pet é obrigatório\"),\n    species: z.string().min(1, \"Espécie é obrigatória\"),\n    breed: z.string().optional(),\n    color: z.string().optional(),\n    gender: z.string().optional(),\n    birthDate: z.string().optional(),\n    weight: z.number().optional(),\n    specialNeeds: z.string().optional(),\n  })).optional(),\n  packages: z.array(z.object({\n    packageTypeId: z.string().min(1, \"Selecione um tipo de pacote\"),\n    startDate: z.string().min(1, \"Data de início é obrigatória\"),\n  })).optional(),\n});\n\ntype ExtendedCustomerFormData = z.infer<typeof extendedCustomerSchema>;\n\ninterface CustomerModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  customer?: Customer | null; // For editing existing customers\n}\n\ninterface Customer {\n  id: string;\n  companyId: string;\n  name: string;\n  email: string | null;\n  phone: string;\n  notes: string | null;\n  address: string | null;\n  cep: string | null;\n  city: string | null;\n  state: string | null;\n  neighborhood: string | null;\n  complement: string | null;\n  createdAt: Date;\n  pets?: any[];\n  packages?: any[];\n}\n\nexport function CustomerModal({ open, onOpenChange, customer }: CustomerModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!customer;\n  const [isLoadingCep, setIsLoadingCep] = useState(false);\n\n  const form = useForm<ExtendedCustomerFormData>({\n    resolver: zodResolver(extendedCustomerSchema),\n    mode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      notes: \"\",\n      address: \"\",\n      cep: \"\",\n      city: \"\",\n      state: \"\",\n      neighborhood: \"\",\n      complement: \"\",\n      pets: [],\n      packages: [],\n    },\n  });\n\n  // Field arrays for pets and packages\n  const { fields: petFields, append: appendPet, remove: removePet } = useFieldArray({\n    control: form.control,\n    name: \"pets\",\n  });\n\n  const { fields: packageFields, append: appendPackage, remove: removePackage } = useFieldArray({\n    control: form.control,\n    name: \"packages\",\n  });\n\n  // Fetch package types for the dropdown\n  const { data: packageTypes = [] } = useQuery({\n    queryKey: [\"/api/package-types\"],\n    enabled: open,\n  }) as { data: any[] };\n\n  // Fetch full customer data when editing\n  const { data: fullCustomerData } = useQuery({\n    queryKey: [\"/api/customers\", customer?.id],\n    enabled: !!customer?.id && open,\n  }) as { data: Customer | undefined };\n\n  // Reset form when customer changes or full data is loaded\n  useEffect(() => {\n    const customerData = fullCustomerData || customer;\n    if (customerData) {\n      // Transform pets data for the form\n      const formattedPets = customerData.pets?.map(pet => ({\n        name: pet.name || \"\",\n        species: pet.species || \"\",\n        breed: pet.breed || \"\",\n        color: pet.color || \"\",\n        gender: pet.gender || \"\",\n        birthDate: pet.birthDate ? new Date(pet.birthDate).toISOString().split('T')[0] : \"\",\n        weight: pet.weight ? parseFloat(pet.weight) : undefined,\n        specialNeeds: pet.specialNeeds || \"\",\n      })) || [];\n\n      // Transform packages data for the form\n      const formattedPackages = customerData.packages?.map(pkg => ({\n        packageTypeId: pkg.packageTypeId || \"\",\n        startDate: pkg.acquiredAt ? new Date(pkg.acquiredAt).toISOString().split('T')[0] : \"\",\n      })) || [];\n\n      form.reset({\n        name: customerData.name || \"\",\n        phone: customerData.phone || \"\",\n        email: customerData.email || \"\",\n        notes: customerData.notes || \"\",\n        address: customerData.address || \"\",\n        cep: customerData.cep || \"\",\n        city: customerData.city || \"\",\n        state: customerData.state || \"\",\n        neighborhood: customerData.neighborhood || \"\",\n        complement: customerData.complement || \"\",\n        pets: formattedPets,\n        packages: formattedPackages,\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n        notes: \"\",\n        address: \"\",\n        cep: \"\",\n        city: \"\",\n        state: \"\",\n        neighborhood: \"\",\n        complement: \"\",\n        pets: [],\n        packages: [],\n      });\n    }\n  }, [customer, fullCustomerData, form]);\n\n  // Helper functions for pets and packages\n  const addNewPet = () => {\n    appendPet({\n      name: \"\",\n      species: \"\",\n      breed: \"\",\n      color: \"\",\n      gender: \"\",\n      birthDate: \"\",\n      weight: undefined,\n      specialNeeds: \"\",\n    });\n  };\n\n  const addNewPackage = () => {\n    appendPackage({\n      packageTypeId: \"\",\n      startDate: new Date().toISOString().split('T')[0], // Today's date\n    });\n  };\n\n  const customerMutation = useMutation({\n    mutationFn: async (data: ExtendedCustomerFormData) => {\n      console.log(\"Mutation triggered - Sending customer data:\", data);\n      \n      if (isEditing) {\n        // When editing, only update customer basic data\n        const { pets, packages, ...customerData } = data;\n        const url = `/api/customers/${customer!.id}`;\n        console.log(`Making PUT request to ${url}`);\n        return await apiRequest(url, \"PUT\", customerData);\n      } else {\n        // When creating, send all data to the POST endpoint\n        console.log(\"Making POST request to /api/customers\");\n        return await apiRequest(\"/api/customers\", \"POST\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customer-packages\"] });\n      toast({\n        title: isEditing ? \"Cliente atualizado\" : \"Cliente criado\",\n        description: isEditing ? \"Cliente atualizado com sucesso!\" : \"Cliente e itens vinculados criados com sucesso!\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || `Erro ao ${isEditing ? 'atualizar' : 'criar'} cliente`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCepBlur = async (cep: string) => {\n    const cleanCep = cep.replace(/\\D/g, \"\");\n    if (cleanCep.length !== 8) return;\n\n    setIsLoadingCep(true);\n    try {\n      const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);\n      const data = await response.json();\n      \n      if (!data.erro) {\n        form.setValue(\"address\", data.logradouro || \"\");\n        form.setValue(\"city\", data.localidade || \"\");\n        form.setValue(\"state\", data.uf || \"\");\n        form.setValue(\"neighborhood\", data.bairro || \"\");\n        // Format CEP with dash\n        form.setValue(\"cep\", `${cleanCep.substring(0, 5)}-${cleanCep.substring(5)}`);\n        \n        toast({\n          title: \"CEP encontrado\",\n          description: `Endereço preenchido automaticamente para ${data.localidade}-${data.uf}`,\n        });\n      } else {\n        toast({\n          title: \"CEP não encontrado\",\n          description: \"Verifique o CEP digitado\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao buscar CEP\",\n        variant: \"destructive\",\n      });\n    }\n    setIsLoadingCep(false);\n  };\n\n  const onSubmit = (data: InsertCustomer) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"Form valid:\", form.formState.isValid);\n    console.log(`Triggering customer ${isEditing ? 'update' : 'creation'} mutation...`);\n    customerMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-customer\">\n        <DialogHeader>\n          <DialogTitle>{isEditing ? \"Editar Cliente\" : \"Novo Cliente\"}</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit, (errors) => {\n          console.log(\"Form validation errors:\", errors);\n        })} className=\"space-y-6\">\n          {/* Dados Básicos */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Dados Básicos</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"Nome do cliente\"\n                  data-testid=\"input-customer-name\"\n                  className={form.formState.errors.name ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.name && (\n                  <span className=\"text-sm text-red-500\">\n                    {form.formState.errors.name.message}\n                  </span>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\">Telefone *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"(11) 99999-9999\"\n                  data-testid=\"input-customer-phone\"\n                  className={form.formState.errors.phone ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.phone && (\n                  <span className=\"text-sm text-red-500\">\n                    {form.formState.errors.phone.message}\n                  </span>\n                )}\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"cliente@email.com\"\n                  data-testid=\"input-customer-email\"\n                  className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.email && (\n                  <span className=\"text-sm text-red-500\">\n                    {form.formState.errors.email.message}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Endereço para Taxidog */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"w-4 h-4 text-gray-500\" />\n              <h3 className=\"text-sm font-medium text-gray-700\">\n                Endereço (para serviço de Taxidog)\n              </h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"cep\">CEP</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"cep\"\n                    {...form.register(\"cep\")}\n                    placeholder=\"00000-000\"\n                    data-testid=\"input-customer-cep\"\n                    className={form.formState.errors.cep ? \"border-red-500\" : \"\"}\n                    onBlur={(e) => handleCepBlur(e.target.value)}\n                    maxLength={9}\n                  />\n                  {isLoadingCep && (\n                    <Loader2 className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 animate-spin text-gray-400\" />\n                  )}\n                </div>\n                {form.formState.errors.cep && (\n                  <span className=\"text-sm text-red-500\">\n                    {form.formState.errors.cep.message}\n                  </span>\n                )}\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"address\">Endereço</Label>\n                <Input\n                  id=\"address\"\n                  {...form.register(\"address\")}\n                  placeholder=\"Rua, Avenida...\"\n                  data-testid=\"input-customer-address\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"neighborhood\">Bairro</Label>\n                <Input\n                  id=\"neighborhood\"\n                  {...form.register(\"neighborhood\")}\n                  placeholder=\"Bairro\"\n                  data-testid=\"input-customer-neighborhood\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\">Cidade</Label>\n                <Input\n                  id=\"city\"\n                  {...form.register(\"city\")}\n                  placeholder=\"Cidade\"\n                  data-testid=\"input-customer-city\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"state\">Estado</Label>\n                <Input\n                  id=\"state\"\n                  {...form.register(\"state\")}\n                  placeholder=\"SP\"\n                  data-testid=\"input-customer-state\"\n                  maxLength={2}\n                />\n              </div>\n\n              <div className=\"md:col-span-3\">\n                <Label htmlFor=\"complement\">Complemento</Label>\n                <Input\n                  id=\"complement\"\n                  {...form.register(\"complement\")}\n                  placeholder=\"Apartamento, casa, referência...\"\n                  data-testid=\"input-customer-complement\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Observações */}\n          <div>\n            <Label htmlFor=\"notes\">Observações</Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register(\"notes\")}\n              placeholder=\"Observações sobre o cliente ou pets...\"\n              data-testid=\"textarea-customer-notes\"\n              rows={3}\n            />\n          </div>\n\n          {/* Seção de Pets */}\n          {(\n            <>\n              <Separator />\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <PawPrint className=\"w-4 h-4 text-orange-500\" />\n                    <h3 className=\"text-sm font-medium text-gray-700\">\n                      {isEditing ? `Pets do Cliente (${petFields.length})` : \"Pets do Cliente\"}\n                    </h3>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addNewPet}\n                    data-testid=\"button-add-pet\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    {isEditing ? \"Adicionar Novo Pet\" : \"Adicionar Pet\"}\n                  </Button>\n                </div>\n\n                {petFields.length === 0 ? (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    Nenhum pet adicionado. Clique em \"Adicionar Pet\" para começar.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {petFields.map((field, index) => (\n                      <Card key={field.id} className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-lg\">\n                              {form.watch(`pets.${index}.species`) === \"Cão\" ? \"🐶\" : \n                               form.watch(`pets.${index}.species`) === \"Gato\" ? \"🐱\" : \n                               form.watch(`pets.${index}.species`) === \"Coelho\" ? \"🐰\" : \n                               form.watch(`pets.${index}.species`) === \"Hamster\" ? \"🐹\" : \n                               form.watch(`pets.${index}.species`) === \"Pássaro\" ? \"🦜\" : \"🐾\"}\n                            </span>\n                            <h4 className=\"text-sm font-medium\">\n                              {form.watch(`pets.${index}.name`) || `Pet ${index + 1}`}\n                            </h4>\n                            {isEditing && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {form.watch(`pets.${index}.species`) ? \"Existente\" : \"Novo\"}\n                              </Badge>\n                            )}\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removePet(index)}\n                            data-testid={`button-remove-pet-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                          <div>\n                            <Label htmlFor={`pets.${index}.name`}>Nome *</Label>\n                            <Input\n                              {...form.register(`pets.${index}.name`)}\n                              placeholder=\"Nome do pet\"\n                              data-testid={`input-pet-name-${index}`}\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`pets.${index}.species`}>Espécie *</Label>\n                            <Select\n                              value={form.watch(`pets.${index}.species`)}\n                              onValueChange={(value) => form.setValue(`pets.${index}.species`, value)}\n                            >\n                              <SelectTrigger data-testid={`select-pet-species-${index}`}>\n                                <SelectValue placeholder=\"Selecione\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"Cão\">🐶 Cão</SelectItem>\n                                <SelectItem value=\"Gato\">🐱 Gato</SelectItem>\n                                <SelectItem value=\"Coelho\">🐰 Coelho</SelectItem>\n                                <SelectItem value=\"Hamster\">🐹 Hamster</SelectItem>\n                                <SelectItem value=\"Pássaro\">🦜 Pássaro</SelectItem>\n                                <SelectItem value=\"Outro\">🐾 Outro</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`pets.${index}.breed`}>Raça</Label>\n                            <Input\n                              {...form.register(`pets.${index}.breed`)}\n                              placeholder=\"Raça do pet\"\n                              data-testid={`input-pet-breed-${index}`}\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`pets.${index}.color`}>Cor</Label>\n                            <Input\n                              {...form.register(`pets.${index}.color`)}\n                              placeholder=\"Cor do pet\"\n                              data-testid={`input-pet-color-${index}`}\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`pets.${index}.gender`}>Sexo</Label>\n                            <Select\n                              value={form.watch(`pets.${index}.gender`)}\n                              onValueChange={(value) => form.setValue(`pets.${index}.gender`, value)}\n                            >\n                              <SelectTrigger data-testid={`select-pet-gender-${index}`}>\n                                <SelectValue placeholder=\"Selecione\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"Macho\">Macho</SelectItem>\n                                <SelectItem value=\"Fêmea\">Fêmea</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`pets.${index}.birthDate`}>Data de Nascimento</Label>\n                            <Input\n                              type=\"date\"\n                              {...form.register(`pets.${index}.birthDate`)}\n                              data-testid={`input-pet-birthdate-${index}`}\n                            />\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n\n          {/* Seção de Pacotes */}\n          {(\n            <>\n              <Separator />\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Package className=\"w-4 h-4 text-blue-500\" />\n                    <h3 className=\"text-sm font-medium text-gray-700\">\n                      {isEditing ? `Pacotes do Cliente (${packageFields.length})` : \"Pacotes do Cliente\"}\n                    </h3>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addNewPackage}\n                    data-testid=\"button-add-package\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    {isEditing ? \"Adicionar Novo Pacote\" : \"Adicionar Pacote\"}\n                  </Button>\n                </div>\n\n                {packageFields.length === 0 ? (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    Nenhum pacote adicionado. Clique em \"Adicionar Pacote\" para começar.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {packageFields.map((field, index) => (\n                      <Card key={field.id} className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Package className=\"w-4 h-4 text-blue-500\" />\n                            <h4 className=\"text-sm font-medium\">\n                              {packageTypes.find(pt => pt.id === form.watch(`packages.${index}.packageTypeId`))?.name || `Pacote ${index + 1}`}\n                            </h4>\n                            {isEditing && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {form.watch(`packages.${index}.packageTypeId`) ? \"Existente\" : \"Novo\"}\n                              </Badge>\n                            )}\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removePackage(index)}\n                            data-testid={`button-remove-package-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          <div>\n                            <Label htmlFor={`packages.${index}.packageTypeId`}>Tipo de Pacote *</Label>\n                            <Select\n                              value={form.watch(`packages.${index}.packageTypeId`)}\n                              onValueChange={(value) => form.setValue(`packages.${index}.packageTypeId`, value)}\n                            >\n                              <SelectTrigger data-testid={`select-package-type-${index}`}>\n                                <SelectValue placeholder=\"Selecione o pacote\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {packageTypes.map((packageType) => (\n                                  <SelectItem key={packageType.id} value={packageType.id}>\n                                    {packageType.name} - R$ {packageType.price}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`packages.${index}.startDate`}>Data de Início *</Label>\n                            <Input\n                              type=\"date\"\n                              {...form.register(`packages.${index}.startDate`)}\n                              data-testid={`input-package-startdate-${index}`}\n                            />\n                          </div>\n                        </div>\n                        \n                        {form.watch(`packages.${index}.packageTypeId`) && (\n                          <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                            {(() => {\n                              const selectedPackage = packageTypes.find(\n                                p => p.id === form.watch(`packages.${index}.packageTypeId`)\n                              );\n                              return selectedPackage ? (\n                                <div className=\"text-sm\">\n                                  <div className=\"flex items-center gap-4 text-gray-600\">\n                                    <span>💰 <strong>R$ {selectedPackage.price}</strong></span>\n                                    <span>📅 <strong>{selectedPackage.validityDays} dias</strong></span>\n                                    <span>🔄 <strong>{selectedPackage.totalUses} usos</strong></span>\n                                  </div>\n                                </div>\n                              ) : null;\n                            })()}\n                          </div>\n                        )}\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-customer-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={customerMutation.isPending}\n              data-testid=\"button-customer-save\"\n              onClick={(e) => {\n                console.log(\"Save button clicked\");\n                console.log(\"Form valid:\", form.formState.isValid);\n                console.log(\"Form errors:\", form.formState.errors);\n                console.log(\"Form values:\", form.getValues());\n                // Let the form handle the submit\n              }}\n            >\n              {customerMutation.isPending ? \"Salvando...\" : isEditing ? \"Atualizar Cliente\" : \"Salvar Cliente\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":28954},"client/src/components/modals/customer-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface CustomerModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CustomerModal({ open, onOpenChange }: CustomerModalProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    notes: \"\",\n  });\n\n  const queryClient = useQueryClient();\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      console.log(\"Sending customer data:\", data);\n      const response = await apiRequest(\"/api/customers\", \"POST\", data);\n      const result = await response.json();\n      console.log(\"Customer creation response:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Cliente criado\",\n        description: \"Cliente cadastrado com sucesso!\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error(\"Customer creation error:\", error);\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao criar cliente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      notes: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log(\"Form submitted with data:\", formData);\n    \n    if (!formData.name.trim() || !formData.phone.trim()) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Nome e telefone são obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"Triggering customer creation mutation...\");\n    createCustomerMutation.mutate(formData);\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Novo Cliente</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Nome *</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              placeholder=\"Nome completo do cliente\"\n              required\n              data-testid=\"input-customer-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"phone\">Telefone/WhatsApp *</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              placeholder=\"(11) 99999-9999\"\n              required\n              data-testid=\"input-customer-phone\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              placeholder=\"email@exemplo.com\"\n              data-testid=\"input-customer-email\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Observações</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Observações sobre o cliente...\"\n              rows={3}\n              data-testid=\"textarea-customer-notes\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={handleClose}\n              data-testid=\"button-cancel-customer\"\n            >\n              Cancelar\n            </Button>\n            <Button \n              type=\"submit\"\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-save-customer\"\n            >\n              {createCustomerMutation.isPending ? \"Salvando...\" : \"Salvar Cliente\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4949},"client/src/components/modals/enhanced-package-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { X, Plus, Minus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst packageSchema = z.object({\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  description: z.string().optional(),\n  validityDays: z.number().min(1, \"Deve ter pelo menos 1 dia\"),\n  maxPets: z.number().min(1, \"Deve permitir pelo menos 1 pet\").max(10, \"Máximo 10 pets\"),\n  price: z.number().min(0, \"Preço deve ser positivo\"),\n  services: z.array(z.object({\n    serviceId: z.string(),\n    includedUses: z.number().min(1),\n    unitPrice: z.number().min(0),\n  })).min(1, \"Deve incluir pelo menos um serviço\"),\n});\n\ntype PackageFormData = z.infer<typeof packageSchema>;\n\ninterface Service {\n  id: string;\n  name: string;\n  basePrice: string;\n  duration: number;\n}\n\ninterface EnhancedPackageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: PackageFormData) => void;\n  services: Service[];\n  editPackage?: any;\n}\n\nexport function EnhancedPackageModal({ isOpen, onClose, onSubmit, services, editPackage }: EnhancedPackageModalProps) {\n  const [packageServices, setPackageServices] = useState<{ serviceId: string; includedUses: number; unitPrice: number }[]>(\n    editPackage?.services || []\n  );\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n    reset,\n  } = useForm<PackageFormData>({\n    resolver: zodResolver(packageSchema),\n    defaultValues: {\n      name: editPackage?.name || \"\",\n      description: editPackage?.description || \"\",\n      validityDays: editPackage?.validityDays || 90,\n      maxPets: editPackage?.maxPets || 1,\n      price: editPackage?.price || 0,\n      services: packageServices,\n    },\n  });\n\n  const addService = () => {\n    const availableServices = services.filter(\n      service => !packageServices.find(ps => ps.serviceId === service.id)\n    );\n    \n    if (availableServices.length > 0) {\n      const newService = {\n        serviceId: availableServices[0].id,\n        includedUses: 1,\n        unitPrice: parseFloat(availableServices[0].basePrice || \"0\"),\n      };\n      \n      const newServices = [...packageServices, newService];\n      setPackageServices(newServices);\n      setValue(\"services\", newServices);\n    }\n  };\n\n  const updateService = (index: number, field: keyof typeof packageServices[0], value: string | number) => {\n    const newServices = packageServices.map((service, i) => \n      i === index ? { ...service, [field]: value } : service\n    );\n    setPackageServices(newServices);\n    setValue(\"services\", newServices);\n  };\n\n  const removeService = (index: number) => {\n    const newServices = packageServices.filter((_, i) => i !== index);\n    setPackageServices(newServices);\n    setValue(\"services\", newServices);\n  };\n\n  const calculateTotalUses = () => {\n    return packageServices.reduce((total, service) => total + service.includedUses, 0);\n  };\n\n  const calculateTotalValue = () => {\n    return packageServices.reduce((total, service) => total + (service.includedUses * service.unitPrice), 0);\n  };\n\n  const handleFormSubmit = (data: PackageFormData) => {\n    onSubmit({\n      ...data,\n      services: packageServices,\n    });\n    reset();\n    setPackageServices([]);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\" data-testid=\"modal-enhanced-package\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-semibold\" data-testid=\"text-modal-title\">\n            {editPackage ? \"Editar Pacote\" : \"Criar Novo Pacote\"}\n          </h2>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-modal\">\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Basic Info */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome do Pacote</Label>\n                <Input\n                  id=\"name\"\n                  {...register(\"name\")}\n                  data-testid=\"input-package-name\"\n                  className={errors.name ? \"border-red-500\" : \"\"}\n                />\n                {errors.name && (\n                  <span className=\"text-sm text-red-500\">{errors.name.message}</span>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descrição</Label>\n                <Textarea\n                  id=\"description\"\n                  {...register(\"description\")}\n                  data-testid=\"input-package-description\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"validityDays\">Validade (dias)</Label>\n                  <Input\n                    id=\"validityDays\"\n                    type=\"number\"\n                    {...register(\"validityDays\", { valueAsNumber: true })}\n                    data-testid=\"input-validity-days\"\n                    className={errors.validityDays ? \"border-red-500\" : \"\"}\n                  />\n                  {errors.validityDays && (\n                    <span className=\"text-sm text-red-500\">{errors.validityDays.message}</span>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"maxPets\">Máx. Pets</Label>\n                  <Input\n                    id=\"maxPets\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"10\"\n                    {...register(\"maxPets\", { valueAsNumber: true })}\n                    data-testid=\"input-max-pets\"\n                    className={errors.maxPets ? \"border-red-500\" : \"\"}\n                  />\n                  {errors.maxPets && (\n                    <span className=\"text-sm text-red-500\">{errors.maxPets.message}</span>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"price\">Preço Total (R$)</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  {...register(\"price\", { valueAsNumber: true })}\n                  data-testid=\"input-package-price\"\n                  className={errors.price ? \"border-red-500\" : \"\"}\n                />\n                {errors.price && (\n                  <span className=\"text-sm text-red-500\">{errors.price.message}</span>\n                )}\n              </div>\n            </div>\n\n            {/* Services */}\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <Label>Serviços Inclusos</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addService}\n                  disabled={packageServices.length >= services.length}\n                  data-testid=\"button-add-service\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Adicionar\n                </Button>\n              </div>\n\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {packageServices.map((packageService, index) => {\n                  const service = services.find(s => s.id === packageService.serviceId);\n                  return (\n                    <Card key={index} className=\"p-3\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <Select\n                              value={packageService.serviceId}\n                              onValueChange={(value) => updateService(index, \"serviceId\", value)}\n                              data-testid={`select-service-${index}`}\n                            >\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {services\n                                  .filter(s => s.id === packageService.serviceId || !packageServices.find(ps => ps.serviceId === s.id))\n                                  .map(service => (\n                                    <SelectItem key={service.id} value={service.id}>\n                                      {service.name} - R$ {service.basePrice}\n                                    </SelectItem>\n                                  ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeService(index)}\n                            data-testid={`button-remove-service-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <div>\n                            <Label className=\"text-xs\">Quantidade</Label>\n                            <div className=\"flex items-center space-x-1\">\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateService(index, \"includedUses\", Math.max(1, packageService.includedUses - 1))}\n                                data-testid={`button-decrease-uses-${index}`}\n                              >\n                                <Minus className=\"h-3 w-3\" />\n                              </Button>\n                              <Input\n                                type=\"number\"\n                                min=\"1\"\n                                value={packageService.includedUses}\n                                onChange={(e) => updateService(index, \"includedUses\", Math.max(1, parseInt(e.target.value) || 1))}\n                                className=\"text-center\"\n                                data-testid={`input-uses-${index}`}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateService(index, \"includedUses\", packageService.includedUses + 1)}\n                                data-testid={`button-increase-uses-${index}`}\n                              >\n                                <Plus className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-xs\">Preço Unit. (R$)</Label>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              min=\"0\"\n                              value={packageService.unitPrice}\n                              onChange={(e) => updateService(index, \"unitPrice\", parseFloat(e.target.value) || 0)}\n                              data-testid={`input-unit-price-${index}`}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n                          Subtotal: R$ {(packageService.includedUses * packageService.unitPrice).toFixed(2)}\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })}\n\n                {packageServices.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\" data-testid=\"text-no-services\">\n                    Nenhum serviço adicionado ainda\n                  </div>\n                )}\n              </div>\n\n              {errors.services && (\n                <span className=\"text-sm text-red-500\">{errors.services.message}</span>\n              )}\n            </div>\n          </div>\n\n          {/* Summary */}\n          {packageServices.length > 0 && (\n            <div className=\"mt-6\">\n              <Separator className=\"mb-4\" />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card className=\"p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-uses\">\n                      {calculateTotalUses()}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      Total de Usos\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-calculated-value\">\n                      R$ {calculateTotalValue().toFixed(2)}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      Valor Calculado\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-package-price\">\n                      R$ {watch(\"price\")?.toFixed(2) || \"0.00\"}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      Preço do Pacote\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              {calculateTotalValue() !== watch(\"price\") && (\n                <div className=\"mt-2 text-center\">\n                  <Badge variant=\"outline\" className=\"text-orange-600\">\n                    Diferença: R$ {Math.abs(calculateTotalValue() - (watch(\"price\") || 0)).toFixed(2)}\n                  </Badge>\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-3 mt-6\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Cancelar\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-save-package\">\n              {editPackage ? \"Atualizar\" : \"Criar\"} Pacote\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":15719},"client/src/components/modals/enhanced-pet-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { X, Heart, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\n\nconst petSchema = z.object({\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  species: z.string().min(1, \"Espécie é obrigatória\"),\n  breed: z.string().optional(),\n  weight: z.number().positive(\"Peso deve ser positivo\").optional(),\n  birthDate: z.string().optional(),\n  gender: z.string().optional(),\n  color: z.string().optional(),\n  specialNeeds: z.string().optional(),\n  notes: z.string().optional(),\n  customerId: z.string().min(1, \"Cliente é obrigatório\"),\n});\n\ntype PetFormData = z.infer<typeof petSchema>;\n\ninterface Customer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n}\n\ninterface EnhancedPetModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: PetFormData) => void;\n  customers: Customer[];\n  editPet?: any;\n  selectedCustomerId?: string;\n}\n\nconst speciesOptions = [\n  { value: \"dog\", label: \"Cão\", icon: \"🐕\" },\n  { value: \"cat\", label: \"Gato\", icon: \"🐱\" },\n  { value: \"bird\", label: \"Pássaro\", icon: \"🦜\" },\n  { value: \"rabbit\", label: \"Coelho\", icon: \"🐰\" },\n  { value: \"hamster\", label: \"Hamster\", icon: \"🐹\" },\n  { value: \"guinea_pig\", label: \"Porquinho da Índia\", icon: \"🐹\" },\n  { value: \"ferret\", label: \"Furão\", icon: \"🦦\" },\n  { value: \"other\", label: \"Outro\", icon: \"🐾\" },\n];\n\nconst commonBreeds = {\n  dog: [\n    \"Labrador\", \"Golden Retriever\", \"Bulldog Francês\", \"Poodle\", \"Pastor Alemão\",\n    \"Bulldog\", \"Beagle\", \"Rottweiler\", \"Yorkshire\", \"Dachshund\", \"Boxer\",\n    \"Shih Tzu\", \"Maltês\", \"Border Collie\", \"Husky Siberiano\", \"Vira-lata\"\n  ],\n  cat: [\n    \"Persa\", \"Siamês\", \"Maine Coon\", \"Ragdoll\", \"Bengal\", \"British Shorthair\",\n    \"Sphynx\", \"Russian Blue\", \"Abyssinian\", \"Scottish Fold\", \"Vira-lata\"\n  ],\n  bird: [\n    \"Canário\", \"Periquito\", \"Calopsita\", \"Agapornis\", \"Papagaio\", \"Cacatua\",\n    \"Periquito Australiano\", \"Diamante Gould\"\n  ],\n  rabbit: [\n    \"Holandês\", \"Angorá\", \"Rex\", \"Lion Head\", \"Flemish Giant\", \"Mini Lop\"\n  ],\n};\n\nexport function EnhancedPetModal({ isOpen, onClose, onSubmit, customers, editPet, selectedCustomerId }: EnhancedPetModalProps) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n    reset,\n  } = useForm<PetFormData>({\n    resolver: zodResolver(petSchema),\n    defaultValues: {\n      name: editPet?.name || \"\",\n      species: editPet?.species || \"\",\n      breed: editPet?.breed || \"\",\n      weight: editPet?.weight ? parseFloat(editPet.weight) : undefined,\n      birthDate: editPet?.birthDate || \"\",\n      gender: editPet?.gender || \"\",\n      color: editPet?.color || \"\",\n      specialNeeds: editPet?.specialNeeds || \"\",\n      notes: editPet?.notes || \"\",\n      customerId: editPet?.customerId || selectedCustomerId || \"\",\n    },\n  });\n\n  const selectedSpecies = watch(\"species\");\n  const selectedCustomer = customers.find(c => c.id === watch(\"customerId\"));\n\n  const handleFormSubmit = (data: PetFormData) => {\n    onSubmit({\n      ...data,\n      weight: data.weight || undefined,\n    });\n    reset();\n    onClose();\n  };\n\n  const calculateAge = (birthDate: string) => {\n    if (!birthDate) return null;\n    const today = new Date();\n    const birth = new Date(birthDate);\n    const months = (today.getFullYear() - birth.getFullYear()) * 12 + today.getMonth() - birth.getMonth();\n    \n    if (months < 12) {\n      return `${months} ${months === 1 ? 'mês' : 'meses'}`;\n    } else {\n      const years = Math.floor(months / 12);\n      const remainingMonths = months % 12;\n      return `${years} ${years === 1 ? 'ano' : 'anos'}${remainingMonths > 0 ? ` e ${remainingMonths} ${remainingMonths === 1 ? 'mês' : 'meses'}` : ''}`;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\" data-testid=\"modal-enhanced-pet\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-semibold flex items-center gap-2\" data-testid=\"text-modal-title\">\n            <Heart className=\"h-5 w-5 text-pink-500\" />\n            {editPet ? \"Editar Pet\" : \"Cadastrar Novo Pet\"}\n          </h2>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-modal\">\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Customer and Basic Info */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"customerId\">Cliente</Label>\n                <Select\n                  value={watch(\"customerId\")}\n                  onValueChange={(value) => setValue(\"customerId\", value)}\n                  data-testid=\"select-customer\"\n                >\n                  <SelectTrigger className={errors.customerId ? \"border-red-500\" : \"\"}>\n                    <SelectValue placeholder=\"Selecione o cliente\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers.map(customer => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        <div>\n                          <div className=\"font-medium\">{customer.name}</div>\n                          <div className=\"text-sm text-gray-500\">{customer.phone}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.customerId && (\n                  <span className=\"text-sm text-red-500\">{errors.customerId.message}</span>\n                )}\n                {selectedCustomer && (\n                  <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                    Cliente: {selectedCustomer.name} • {selectedCustomer.phone}\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"name\">Nome do Pet</Label>\n                <Input\n                  id=\"name\"\n                  {...register(\"name\")}\n                  data-testid=\"input-pet-name\"\n                  className={errors.name ? \"border-red-500\" : \"\"}\n                  placeholder=\"Ex: Buddy, Luna, Rex...\"\n                />\n                {errors.name && (\n                  <span className=\"text-sm text-red-500\">{errors.name.message}</span>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"species\">Espécie</Label>\n                <Select\n                  value={watch(\"species\")}\n                  onValueChange={(value) => {\n                    setValue(\"species\", value);\n                    setValue(\"breed\", \"\"); // Reset breed when species changes\n                  }}\n                  data-testid=\"select-species\"\n                >\n                  <SelectTrigger className={errors.species ? \"border-red-500\" : \"\"}>\n                    <SelectValue placeholder=\"Selecione a espécie\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {speciesOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{option.icon}</span>\n                          <span>{option.label}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.species && (\n                  <span className=\"text-sm text-red-500\">{errors.species.message}</span>\n                )}\n              </div>\n\n              {selectedSpecies && commonBreeds[selectedSpecies as keyof typeof commonBreeds] && (\n                <div>\n                  <Label htmlFor=\"breed\">Raça</Label>\n                  <Select\n                    value={watch(\"breed\")}\n                    onValueChange={(value) => setValue(\"breed\", value)}\n                    data-testid=\"select-breed\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione a raça\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {commonBreeds[selectedSpecies as keyof typeof commonBreeds].map(breed => (\n                        <SelectItem key={breed} value={breed}>\n                          {breed}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {(!selectedSpecies || !commonBreeds[selectedSpecies as keyof typeof commonBreeds]) && (\n                <div>\n                  <Label htmlFor=\"breed\">Raça</Label>\n                  <Input\n                    id=\"breed\"\n                    {...register(\"breed\")}\n                    data-testid=\"input-breed\"\n                    placeholder=\"Ex: Vira-lata, SRD...\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Physical Details */}\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"weight\">Peso (kg)</Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    {...register(\"weight\", { valueAsNumber: true })}\n                    data-testid=\"input-weight\"\n                    className={errors.weight ? \"border-red-500\" : \"\"}\n                    placeholder=\"Ex: 5.2\"\n                  />\n                  {errors.weight && (\n                    <span className=\"text-sm text-red-500\">{errors.weight.message}</span>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"gender\">Sexo</Label>\n                  <Select\n                    value={watch(\"gender\")}\n                    onValueChange={(value) => setValue(\"gender\", value)}\n                    data-testid=\"select-gender\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Macho</SelectItem>\n                      <SelectItem value=\"female\">Fêmea</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"birthDate\">Data de Nascimento</Label>\n                <Input\n                  id=\"birthDate\"\n                  type=\"date\"\n                  {...register(\"birthDate\")}\n                  data-testid=\"input-birth-date\"\n                />\n                {watch(\"birthDate\") && (\n                  <div className=\"flex items-center gap-1 text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    Idade: {calculateAge(watch(\"birthDate\") || \"\")}\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"color\">Cor</Label>\n                <Input\n                  id=\"color\"\n                  {...register(\"color\")}\n                  data-testid=\"input-color\"\n                  placeholder=\"Ex: Dourado, Preto e branco, Rajado...\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"specialNeeds\">Necessidades Especiais</Label>\n                <Textarea\n                  id=\"specialNeeds\"\n                  {...register(\"specialNeeds\")}\n                  data-testid=\"input-special-needs\"\n                  rows={2}\n                  placeholder=\"Ex: Medicação, sensibilidades, comportamento...\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6\">\n            <Label htmlFor=\"notes\">Observações Gerais</Label>\n            <Textarea\n              id=\"notes\"\n              {...register(\"notes\")}\n              data-testid=\"input-notes\"\n              rows={3}\n              placeholder=\"Informações adicionais sobre o pet...\"\n            />\n          </div>\n\n          {/* Preview Card */}\n          {watch(\"name\") && watch(\"species\") && (\n            <Card className=\"mt-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <span>{speciesOptions.find(s => s.value === selectedSpecies)?.icon}</span>\n                  {watch(\"name\")}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div><strong>Espécie:</strong> {speciesOptions.find(s => s.value === selectedSpecies)?.label}</div>\n                  {watch(\"breed\") && <div><strong>Raça:</strong> {watch(\"breed\")}</div>}\n                  {watch(\"weight\") && <div><strong>Peso:</strong> {watch(\"weight\")} kg</div>}\n                  {watch(\"gender\") && <div><strong>Sexo:</strong> {watch(\"gender\") === \"male\" ? \"Macho\" : \"Fêmea\"}</div>}\n                  {watch(\"color\") && <div><strong>Cor:</strong> {watch(\"color\")}</div>}\n                  {watch(\"birthDate\") && <div><strong>Idade:</strong> {calculateAge(watch(\"birthDate\") || \"\")}</div>}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"flex justify-end space-x-3 mt-6\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Cancelar\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-save-pet\">\n              {editPet ? \"Atualizar\" : \"Cadastrar\"} Pet\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":14700},"client/src/components/modals/package-modal-enhanced.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertPackageTypeSchema, type InsertPackageType, type Service } from \"@shared/schema\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Trash2, Package, Calculator } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { z } from \"zod\";\n\n// Schema estendido para incluir serviços do pacote\nconst packageWithServicesSchema = insertPackageTypeSchema.omit({ companyId: true, price: true, totalUses: true }).extend({\n  services: z.array(z.object({\n    serviceId: z.string().min(1, \"Selecione um serviço\"),\n    includedUses: z.number().min(1, \"Quantidade deve ser maior que 0\"),\n    unitPrice: z.string().min(1, \"Preço é obrigatório\"),\n  })).min(1, \"Adicione pelo menos um serviço\"),\n});\n\ntype PackageWithServices = z.infer<typeof packageWithServicesSchema>;\n\ninterface PackageModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  editingPackage?: any; // Package being edited (optional)\n}\n\nexport function PackageModal({ open, onOpenChange, editingPackage }: PackageModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!editingPackage;\n\n  const form = useForm<PackageWithServices>({\n    resolver: zodResolver(packageWithServicesSchema),\n    defaultValues: {\n      name: editingPackage?.name || \"\",\n      description: editingPackage?.description || \"\",\n      validityDays: editingPackage?.validityDays || 30,\n      totalUses: editingPackage?.totalUses || 0,\n      price: editingPackage?.price || \"\",\n      maxPets: editingPackage?.maxPets || 1,\n      active: editingPackage?.active ?? true,\n      services: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"services\",\n  });\n\n  // Buscar serviços disponíveis\n  const { data: services = [] } = useQuery({\n    queryKey: [\"/api/services\"],\n  }) as { data: Service[] };\n\n  const createPackageMutation = useMutation({\n    mutationFn: async (data: PackageWithServices) => {\n      console.log(\"Mutation triggered - Sending package data:\", data);\n      const url = isEditing ? `/api/package-types/${editingPackage.id}` : \"/api/package-types\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      console.log(`Making ${method} request to ${url}`);\n      \n      try {\n        const result = await apiRequest(url, method, data);\n        console.log(`Package ${isEditing ? 'update' : 'creation'} response:`, result);\n        return result;\n      } catch (error) {\n        console.error(\"Error in package mutation:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/package-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({\n        title: isEditing ? \"Pacote atualizado\" : \"Pacote criado\",\n        description: isEditing ? \"Pacote atualizado com sucesso!\" : \"Pacote criado com sucesso!\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || `Erro ao ${isEditing ? 'atualizar' : 'criar'} pacote`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calcular preço total automaticamente\n  const calculateTotalPrice = () => {\n    const services = form.watch(\"services\");\n    if (!services || services.length === 0) return \"0.00\";\n    \n    const total = services.reduce((sum, service) => {\n      const unitPrice = parseFloat(service.unitPrice || \"0\");\n      const uses = service.includedUses || 0;\n      return sum + (unitPrice * uses);\n    }, 0);\n    \n    return total.toFixed(2);\n  };\n\n  // Calcular total de usos\n  const calculateTotalUses = () => {\n    const services = form.watch(\"services\");\n    if (!services || services.length === 0) return 0;\n    \n    return services.reduce((sum, service) => sum + (service.includedUses || 0), 0);\n  };\n\n  const addService = () => {\n    append({\n      serviceId: \"\",\n      includedUses: 1,\n      unitPrice: \"\",\n    });\n  };\n\n  const onSubmit = (data: PackageWithServices) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"Form valid:\", form.formState.isValid);\n    \n    // Atualizar preço total e usos totais calculados\n    const totalPrice = calculateTotalPrice();\n    const totalUses = calculateTotalUses();\n    \n    // Verificar se há serviços adicionados\n    if (!data.services || data.services.length === 0) {\n      toast({\n        title: \"Serviços obrigatórios\",\n        description: \"Adicione pelo menos um serviço ao pacote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Verificar se todos os serviços estão preenchidos\n    const hasInvalidServices = data.services.some(service => \n      !service.serviceId || !service.unitPrice || service.includedUses <= 0\n    );\n\n    if (hasInvalidServices) {\n      toast({\n        title: \"Serviços incompletos\",\n        description: \"Preencha todos os campos dos serviços (serviço, quantidade e preço).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const packageData = {\n      name: data.name,\n      description: data.description || null,\n      validityDays: data.validityDays,\n      maxPets: data.maxPets,\n      price: totalPrice,\n      totalUses: totalUses,\n      companyId: \"550e8400-e29b-41d4-a716-446655440000\", // Gloss Pet company ID\n      active: true,\n    };\n    \n    console.log(\"Enviando dados do pacote:\", packageData);\n    console.log(\"Triggering package creation mutation...\");\n    createPackageMutation.mutate(packageData);\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-package\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            {isEditing ? \"Editar Pacote de Serviços\" : \"Novo Pacote de Serviços\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit, (errors) => {\n          console.log(\"Form validation errors:\", errors);\n        })} className=\"space-y-6\">\n          {/* Informações Básicas */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Informações Básicas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nome do Pacote *</Label>\n                  <Input\n                    id=\"name\"\n                    {...form.register(\"name\")}\n                    placeholder=\"Ex: Pacote Completo Mensal\"\n                    data-testid=\"input-package-name\"\n                    className={form.formState.errors.name ? \"border-red-500\" : \"\"}\n                  />\n                  {form.formState.errors.name && (\n                    <span className=\"text-sm text-red-500\">\n                      {form.formState.errors.name.message}\n                    </span>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"validityDays\">Validade (dias) *</Label>\n                  <Input\n                    id=\"validityDays\"\n                    type=\"number\"\n                    {...form.register(\"validityDays\", { valueAsNumber: true })}\n                    placeholder=\"30\"\n                    data-testid=\"input-package-validity\"\n                    className={form.formState.errors.validityDays ? \"border-red-500\" : \"\"}\n                  />\n                  {form.formState.errors.validityDays && (\n                    <span className=\"text-sm text-red-500\">\n                      {form.formState.errors.validityDays.message}\n                    </span>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"maxPets\">Máximo de Pets</Label>\n                  <Input\n                    id=\"maxPets\"\n                    type=\"number\"\n                    {...form.register(\"maxPets\", { valueAsNumber: true })}\n                    placeholder=\"1\"\n                    data-testid=\"input-package-max-pets\"\n                    min=\"1\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"description\">Descrição</Label>\n                  <Textarea\n                    id=\"description\"\n                    {...form.register(\"description\")}\n                    placeholder=\"Descrição do pacote de serviços...\"\n                    data-testid=\"textarea-package-description\"\n                    rows={2}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Serviços do Pacote */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-sm\">Serviços Inclusos</CardTitle>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addService}\n                  data-testid=\"button-add-service\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Adicionar Serviço\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {fields.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Package className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\n                  <p>Nenhum serviço adicionado</p>\n                  <p className=\"text-sm\">Clique em \"Adicionar Serviço\" para começar</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {fields.map((field, index) => (\n                    <div key={field.id} className=\"border rounded-lg p-4 bg-gray-50\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-end\">\n                        <div className=\"md:col-span-2\">\n                          <Label htmlFor={`services.${index}.serviceId`}>Serviço</Label>\n                          <select\n                            {...form.register(`services.${index}.serviceId`)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                            data-testid={`select-service-${index}`}\n                          >\n                            <option value=\"\">Selecione um serviço</option>\n                            {services.map((service: Service) => (\n                              <option key={service.id} value={service.id}>\n                                {service.name}\n                              </option>\n                            ))}\n                          </select>\n                          {form.formState.errors.services?.[index]?.serviceId && (\n                            <span className=\"text-sm text-red-500\">\n                              {form.formState.errors.services[index]?.serviceId?.message}\n                            </span>\n                          )}\n                        </div>\n\n                        <div>\n                          <Label htmlFor={`services.${index}.includedUses`}>Quantidade</Label>\n                          <Input\n                            type=\"number\"\n                            {...form.register(`services.${index}.includedUses`, { valueAsNumber: true })}\n                            placeholder=\"1\"\n                            data-testid={`input-service-uses-${index}`}\n                            min=\"1\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor={`services.${index}.unitPrice`}>Preço Unitário</Label>\n                          <div className=\"flex\">\n                            <Input\n                              {...form.register(`services.${index}.unitPrice`)}\n                              placeholder=\"0,00\"\n                              data-testid={`input-service-price-${index}`}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => remove(index)}\n                              className=\"ml-2\"\n                              data-testid={`button-remove-service-${index}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {form.formState.errors.services && (\n                <span className=\"text-sm text-red-500\">\n                  {form.formState.errors.services.message}\n                </span>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Resumo Calculado */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Calculator className=\"w-4 h-4\" />\n                Resumo do Pacote\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-600\">Total de Usos:</p>\n                  <p className=\"font-semibold text-lg\">{calculateTotalUses()}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600\">Preço Total:</p>\n                  <p className=\"font-semibold text-lg text-green-600\">\n                    R$ {calculateTotalPrice()}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600\">Validade:</p>\n                  <p className=\"font-semibold text-lg\">\n                    {form.watch(\"validityDays\") || 0} dias\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-package-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createPackageMutation.isPending || fields.length === 0}\n              data-testid=\"button-package-save\"\n              onClick={(e) => {\n                console.log(\"Package save button clicked\");\n                console.log(\"Form valid:\", form.formState.isValid);\n                console.log(\"Form errors:\", form.formState.errors);\n                console.log(\"Form values:\", form.getValues());\n                console.log(\"Services array (fields):\", fields);\n                console.log(\"Services from form:\", form.getValues(\"services\"));\n                console.log(\"Calculated price:\", calculateTotalPrice());\n                console.log(\"Calculated uses:\", calculateTotalUses());\n                // Let the form handle the submit\n              }}\n            >\n              {createPackageMutation.isPending ? \"Criando...\" : \"Criar Pacote\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16391},"client/src/components/modals/package-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface PackageModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function PackageModal({ open, onOpenChange }: PackageModalProps) {\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [selectedPackageType, setSelectedPackageType] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Fetch customers\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  // Fetch package types\n  const { data: packageTypes } = useQuery({\n    queryKey: [\"/api/package-types\"],\n  });\n\n  const createPackageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/packages\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Pacote criado\",\n        description: \"Pacote atribuído ao cliente com sucesso!\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao criar pacote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedCustomer(\"\");\n    setSelectedPackageType(\"\");\n  };\n\n  const handleSubmit = () => {\n    if (!selectedCustomer || !selectedPackageType) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, selecione o cliente e o tipo de pacote\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const packageType = packageTypes?.find((pt: any) => pt.id === selectedPackageType);\n    if (!packageType) return;\n\n    // Calculate valid until date\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + packageType.validityDays);\n\n    createPackageMutation.mutate({\n      customerId: selectedCustomer,\n      packageTypeId: selectedPackageType,\n      remainingUses: packageType.totalUses,\n      validUntil: validUntil.toISOString(),\n      status: \"active\",\n      purchasePrice: packageType.price,\n    });\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    resetForm();\n  };\n\n  const selectedPackageTypeData = packageTypes?.find((pt: any) => pt.id === selectedPackageType);\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Novo Pacote</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Cliente</Label>\n            <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n              <SelectTrigger className=\"mt-2\" data-testid=\"select-customer\">\n                <SelectValue placeholder=\"Selecione o cliente\" />\n              </SelectTrigger>\n              <SelectContent>\n                {customers?.map((customer: any) => (\n                  <SelectItem key={customer.id} value={customer.id}>\n                    {customer.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">Tipo de Pacote</Label>\n            <Select value={selectedPackageType} onValueChange={setSelectedPackageType}>\n              <SelectTrigger className=\"mt-2\" data-testid=\"select-package-type\">\n                <SelectValue placeholder=\"Selecione o tipo de pacote\" />\n              </SelectTrigger>\n              <SelectContent>\n                {packageTypes?.map((packageType: any) => (\n                  <SelectItem key={packageType.id} value={packageType.id}>\n                    {packageType.name} - R$ {packageType.price}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {selectedPackageTypeData && (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Detalhes do Pacote</h4>\n              <div className=\"space-y-1 text-sm text-gray-600\">\n                <p><span className=\"font-medium\">Nome:</span> {selectedPackageTypeData.name}</p>\n                <p><span className=\"font-medium\">Usos incluídos:</span> {selectedPackageTypeData.totalUses}</p>\n                <p><span className=\"font-medium\">Validade:</span> {selectedPackageTypeData.validityDays} dias</p>\n                <p><span className=\"font-medium\">Preço:</span> R$ {selectedPackageTypeData.price}</p>\n                {selectedPackageTypeData.description && (\n                  <p><span className=\"font-medium\">Descrição:</span> {selectedPackageTypeData.description}</p>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-end space-x-3 mt-6\">\n          <Button \n            variant=\"outline\" \n            onClick={handleClose}\n            data-testid=\"button-cancel-package\"\n          >\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit}\n            disabled={createPackageMutation.isPending}\n            className=\"bg-success hover:bg-success/90\"\n            data-testid=\"button-create-package\"\n          >\n            {createPackageMutation.isPending ? \"Criando...\" : \"Criar Pacote\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6036},"client/src/components/modals/package-usage-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PackageUsageModalProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  packageId: string;\n  customerId: string;\n}\n\nconst usageSchema = z.object({\n  petId: z.string().min(1, \"Selecione um pet\"),\n  serviceId: z.string().min(1, \"Selecione um serviço\"),\n});\n\ntype UsageFormData = z.infer<typeof usageSchema>;\n\nexport function PackageUsageModal({ isOpen, onOpenChange, packageId, customerId }: PackageUsageModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<UsageFormData>({\n    resolver: zodResolver(usageSchema),\n    defaultValues: {\n      petId: \"\",\n      serviceId: \"\",\n    },\n  });\n\n  // Fetch pets for the customer\n  const { data: pets = [] } = useQuery({\n    queryKey: [\"/api/pets\", customerId],\n    enabled: isOpen && !!customerId,\n  }) as { data: any[] };\n\n  // Fetch available services\n  const { data: services = [] } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isOpen,\n  }) as { data: any[] };\n\n  const usePackageMutation = useMutation({\n    mutationFn: async (data: UsageFormData) => {\n      return await apiRequest(`/api/packages/${packageId}/use`, \"POST\", {\n        petId: data.petId,\n        serviceId: data.serviceId,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      toast({\n        title: \"Uso registrado\",\n        description: \"O uso do pacote foi registrado com sucesso!\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao registrar uso do pacote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UsageFormData) => {\n    usePackageMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Registrar Uso do Pacote</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"petId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Pet</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-pet\">\n                        <SelectValue placeholder=\"Selecione o pet\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {pets.map((pet: any) => (\n                        <SelectItem key={pet.id} value={pet.id}>\n                          {pet.name} ({pet.breed || pet.species})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"serviceId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Serviço</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-service\">\n                        <SelectValue placeholder=\"Selecione o serviço\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {services.map((service: any) => (\n                        <SelectItem key={service.id} value={service.id}>\n                          {service.name} - R$ {service.basePrice}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-usage\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={usePackageMutation.isPending}\n                data-testid=\"button-register-usage\"\n              >\n                {usePackageMutation.isPending ? \"Registrando...\" : \"Registrar Uso\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5531},"client/src/components/modals/post-usage-action-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\n\ninterface PostUsageActionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  package: any | null;\n}\n\nexport function PostUsageActionModal({ open, onOpenChange, package: selectedPackage }: PostUsageActionModalProps) {\n  const handleScheduleNext = () => {\n    // TODO: Implement appointment scheduling\n    console.log('Opening appointment scheduler...');\n    onOpenChange(false);\n  };\n\n  const handleRenewPackage = () => {\n    // TODO: Implement package renewal\n    console.log('Initiating package renewal...');\n    onOpenChange(false);\n  };\n\n  const handleContinueLater = () => {\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Próxima Ação</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"text-center py-6\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Check className=\"w-8 h-8 text-green-600\" />\n          </div>\n          \n          <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Uso registrado com sucesso!\n          </h4>\n          \n          <p className=\"text-sm text-gray-600 mb-6\">\n            {selectedPackage?.customer?.name} agora tem {selectedPackage?.remainingUses - 1} usos restantes no pacote.\n          </p>\n          \n          <div className=\"space-y-3\">\n            <Button \n              className=\"w-full bg-primary hover:bg-primary/90\"\n              onClick={handleScheduleNext}\n              data-testid=\"button-schedule-next\"\n            >\n              Agendar Próximo Atendimento\n            </Button>\n            \n            <Button \n              className=\"w-full bg-success hover:bg-success/90\"\n              onClick={handleRenewPackage}\n              data-testid=\"button-renew-now\"\n            >\n              Renovar Pacote Agora\n            </Button>\n            \n            <Button \n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={handleContinueLater}\n              data-testid=\"button-continue-later\"\n            >\n              Continuar Depois\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2484},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1418},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/info-tooltip.tsx":{"content":"import { Info } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ninterface InfoTooltipProps {\n  content: string;\n  className?: string;\n}\n\nexport function InfoTooltip({ content, className = \"\" }: InfoTooltipProps) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <button \n            type=\"button\"\n            className={`inline-flex items-center justify-center w-4 h-4 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors ${className}`}\n            data-testid=\"info-tooltip-trigger\"\n          >\n            <Info className=\"w-3 h-3 text-gray-600\" />\n          </button>\n        </TooltipTrigger>\n        <TooltipContent side=\"top\" className=\"max-w-xs\">\n          <p className=\"text-sm\">{content}</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","size_bytes":908},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1896},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/modals/pet-modal-enhanced.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertPetSchema, type InsertPet, type Customer } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Heart, Calendar, User } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { z } from \"zod\";\n\n// Schema estendido para o pet\nconst petFormSchema = insertPetSchema.omit({ customerId: true }).extend({\n  customerId: z.string().optional(),\n});\n\ntype PetFormData = z.infer<typeof petFormSchema>;\n\ninterface Pet {\n  id: string;\n  customerId: string;\n  name: string;\n  species: string;\n  breed: string | null;\n  color: string | null;\n  gender: string | null;\n  birthDate: Date | null;\n  weight: number | null;\n  notes: string | null;\n  specialNeeds: string | null;\n  preferredFood: string | null;\n  createdAt: Date;\n}\n\ninterface PetModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  preSelectedCustomerId?: string;\n  pet?: Pet | null;\n}\n\nexport function PetModal({ open, onOpenChange, preSelectedCustomerId, pet }: PetModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PetFormData>({\n    resolver: zodResolver(petFormSchema),\n    defaultValues: {\n      name: pet?.name || \"\",\n      species: pet?.species || \"\",\n      breed: pet?.breed || \"\",\n      color: pet?.color || \"\",\n      gender: pet?.gender || \"\",\n      birthDate: pet?.birthDate ? pet.birthDate.toString().split('T')[0] : undefined,\n      weight: pet?.weight || undefined,\n      notes: pet?.notes || \"\",\n      specialNeeds: pet?.specialNeeds || \"\",\n      preferredFood: pet?.preferredFood || \"\",\n      customerId: pet?.customerId || preSelectedCustomerId || \"\",\n    },\n  });\n\n  // Buscar clientes para o dropdown\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n    enabled: !preSelectedCustomerId, // Só busca se não tem cliente pré-selecionado\n  }) as { data: Customer[] };\n\n  // Resetar formulário quando pet ou modal abrem/fecham\n  useEffect(() => {\n    if (open) {\n      form.reset({\n        name: pet?.name || \"\",\n        species: pet?.species || \"\",\n        breed: pet?.breed || \"\",\n        color: pet?.color || \"\",\n        gender: pet?.gender || \"\",\n        birthDate: pet?.birthDate ? pet.birthDate.toString().split('T')[0] : undefined,\n        weight: pet?.weight || undefined,\n        notes: pet?.notes || \"\",\n        specialNeeds: pet?.specialNeeds || \"\",\n        preferredFood: pet?.preferredFood || \"\",\n        customerId: pet?.customerId || preSelectedCustomerId || \"\",\n      });\n    } else {\n      // Limpa o formulário quando o modal fecha\n      form.reset({\n        name: \"\",\n        species: \"\",\n        breed: \"\",\n        color: \"\",\n        gender: \"\",\n        birthDate: undefined,\n        weight: undefined,\n        notes: \"\",\n        specialNeeds: \"\",\n        preferredFood: \"\",\n        customerId: preSelectedCustomerId || \"\",\n      });\n    }\n  }, [open, pet, preSelectedCustomerId, form]);\n\n  const savePetMutation = useMutation({\n    mutationFn: async (data: PetFormData) => {\n      console.log(\"Mutation triggered - Sending pet data:\", data);\n      \n      const petData = {\n        ...data,\n        customerId: data.customerId || preSelectedCustomerId,\n        birthDate: data.birthDate ? new Date(data.birthDate) : null,\n        weight: data.weight ? Number(data.weight) : null,\n      };\n      \n      try {\n        if (pet) {\n          // Edit existing pet\n          console.log(\"Making PUT request to /api/pets\");\n          const result = await apiRequest(`/api/pets/${pet.id}`, \"PUT\", petData);\n          console.log(\"Pet update response:\", result);\n          return result;\n        } else {\n          // Create new pet\n          console.log(\"Making POST request to /api/pets\");\n          const result = await apiRequest(\"/api/pets\", \"POST\", petData);\n          console.log(\"Pet creation response:\", result);\n          return result;\n        }\n      } catch (error) {\n        console.error(\"Error in pet mutation:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: pet ? \"Pet atualizado\" : \"Pet cadastrado\",\n        description: pet ? \"Pet editado com sucesso!\" : \"Pet criado com sucesso!\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || (pet ? \"Erro ao atualizar pet\" : \"Erro ao cadastrar pet\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PetFormData) => {\n    console.log(\"Form submitted with pet data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"Form valid:\", form.formState.isValid);\n    \n    // Validação manual\n    if (!data.name || !data.species) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Preencha pelo menos o nome e espécie do pet.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!data.customerId && !preSelectedCustomerId) {\n      toast({\n        title: \"Cliente obrigatório\",\n        description: \"Selecione um cliente para o pet.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    console.log(\"Triggering pet mutation...\");\n    savePetMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-pet\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Heart className=\"w-5 h-5 text-red-500\" />\n            {pet ? \"Editar Pet\" : (preSelectedCustomerId ? \"Novo Pet\" : \"Cadastrar Pet\")}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit, (errors) => {\n          console.log(\"Form validation errors:\", errors);\n        })} className=\"space-y-6\">\n          \n          {/* Informações do Cliente */}\n          {!preSelectedCustomerId && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <User className=\"w-4 h-4\" />\n                  Cliente\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div>\n                  <Label htmlFor=\"customerId\">Cliente *</Label>\n                  <Select \n                    value={form.watch(\"customerId\")} \n                    onValueChange={(value) => form.setValue(\"customerId\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-customer\">\n                      <SelectValue placeholder=\"Selecione o cliente\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer) => (\n                        <SelectItem key={customer.id} value={customer.id}>\n                          {customer.name} - {customer.phone}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.customerId && (\n                    <span className=\"text-sm text-red-500\">\n                      {form.formState.errors.customerId.message}\n                    </span>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Informações Básicas do Pet */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Informações Básicas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nome do Pet *</Label>\n                  <Input\n                    id=\"name\"\n                    {...form.register(\"name\")}\n                    placeholder=\"Ex: Rex, Mimi, Thor\"\n                    data-testid=\"input-pet-name\"\n                    className={form.formState.errors.name ? \"border-red-500\" : \"\"}\n                  />\n                  {form.formState.errors.name && (\n                    <span className=\"text-sm text-red-500\">\n                      {form.formState.errors.name.message}\n                    </span>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"species\">Espécie *</Label>\n                  <Select \n                    value={form.watch(\"species\")} \n                    onValueChange={(value) => form.setValue(\"species\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-species\">\n                      <SelectValue placeholder=\"Selecione a espécie\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Cão\">🐶 Cão</SelectItem>\n                      <SelectItem value=\"Gato\">🐱 Gato</SelectItem>\n                      <SelectItem value=\"Coelho\">🐰 Coelho</SelectItem>\n                      <SelectItem value=\"Hamster\">🐹 Hamster</SelectItem>\n                      <SelectItem value=\"Pássaro\">🦜 Pássaro</SelectItem>\n                      <SelectItem value=\"Outro\">🐾 Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.species && (\n                    <span className=\"text-sm text-red-500\">\n                      {form.formState.errors.species.message}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"breed\">Raça</Label>\n                  <Input\n                    id=\"breed\"\n                    {...form.register(\"breed\")}\n                    placeholder=\"Ex: Labrador, Persa, SRD\"\n                    data-testid=\"input-pet-breed\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"color\">Cor</Label>\n                  <Input\n                    id=\"color\"\n                    {...form.register(\"color\")}\n                    placeholder=\"Ex: Marrom, Preto, Branco\"\n                    data-testid=\"input-pet-color\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"gender\">Sexo</Label>\n                  <Select \n                    value={form.watch(\"gender\") || \"\"} \n                    onValueChange={(value) => form.setValue(\"gender\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-gender\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Macho\">Macho</SelectItem>\n                      <SelectItem value=\"Fêmea\">Fêmea</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"birthDate\">Data de Nascimento</Label>\n                  <Input\n                    id=\"birthDate\"\n                    type=\"date\"\n                    {...form.register(\"birthDate\")}\n                    data-testid=\"input-pet-birthdate\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"weight\">Peso (kg)</Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    {...form.register(\"weight\", { valueAsNumber: true })}\n                    placeholder=\"5.5\"\n                    data-testid=\"input-pet-weight\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Informações Adicionais */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Informações Adicionais</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"preferredFood\">Ração Preferida</Label>\n                <Input\n                  id=\"preferredFood\"\n                  {...form.register(\"preferredFood\")}\n                  placeholder=\"Ex: Royal Canin, Premier, Pedigree\"\n                  data-testid=\"input-pet-food\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"specialNeeds\">Necessidades Especiais</Label>\n                <Textarea\n                  id=\"specialNeeds\"\n                  {...form.register(\"specialNeeds\")}\n                  placeholder=\"Ex: Medicamentos, alergias, cuidados especiais...\"\n                  data-testid=\"input-pet-special-needs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Observações Gerais</Label>\n                <Textarea\n                  id=\"notes\"\n                  {...form.register(\"notes\")}\n                  placeholder=\"Outras informações importantes sobre o pet...\"\n                  data-testid=\"input-pet-notes\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-pet-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={savePetMutation.isPending}\n              data-testid=\"button-pet-save\"\n              onClick={(e) => {\n                console.log(\"Pet save button clicked\");\n                console.log(\"Form valid:\", form.formState.isValid);\n                console.log(\"Form errors:\", form.formState.errors);\n                console.log(\"Form values:\", form.getValues());\n              }}\n            >\n              {savePetMutation.isPending ? \n                (pet ? \"Atualizando...\" : \"Cadastrando...\") : \n                (pet ? \"Atualizar Pet\" : \"Cadastrar Pet\")\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15231},"client/src/components/dashboard/package-analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Package, Users, TrendingUp, BarChart3 } from \"lucide-react\";\n\ninterface PackageAnalytics {\n  packageTypes: {\n    id: string;\n    name: string;\n    price: string;\n    activeClients: number;\n    totalRevenue: number;\n    averageUsage: number;\n  }[];\n  mostUsedServices: {\n    serviceName: string;\n    usageCount: number;\n    percentage: number;\n  }[];\n  overallStats: {\n    totalActivePackages: number;\n    totalActiveClients: number;\n    averagePackageUtilization: number;\n    monthlyRecurringRevenue: number;\n  };\n}\n\nexport function PackageAnalytics() {\n  const { data: analytics, isLoading } = useQuery<PackageAnalytics>({\n    queryKey: [\"/api/analytics/packages\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n            Análise de Pacotes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-20 bg-gray-200 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n            Análise de Pacotes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Package className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <p>Nenhum dado disponível</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <CardTitle className=\"flex items-center gap-2 text-lg font-semibold text-gray-900\">\n          <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n          Análise de Pacotes\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 space-y-6\">\n        {/* Estatísticas Gerais */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Package className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-800\">Pacotes Ativos</span>\n            </div>\n            <div className=\"text-2xl font-bold text-blue-900\">\n              {analytics.overallStats.totalActivePackages}\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Users className=\"w-4 h-4 text-green-600\" />\n              <span className=\"text-sm font-medium text-green-800\">Clientes Ativos</span>\n            </div>\n            <div className=\"text-2xl font-bold text-green-900\">\n              {analytics.overallStats.totalActiveClients}\n            </div>\n          </div>\n        </div>\n\n        {/* Tipos de Pacotes */}\n        <div>\n          <h4 className=\"text-sm font-semibold text-gray-900 mb-3 flex items-center gap-2\">\n            <Package className=\"w-4 h-4\" />\n            Pacotes por Tipo\n          </h4>\n          <div className=\"space-y-3\">\n            {analytics.packageTypes.map((packageType) => (\n              <div key={packageType.id} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div>\n                    <h5 className=\"font-medium text-gray-900\">{packageType.name}</h5>\n                    <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                      <span className=\"flex items-center gap-1\">\n                        <Users className=\"w-3 h-3\" />\n                        {packageType.activeClients} clientes\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <TrendingUp className=\"w-3 h-3\" />\n                        R$ {packageType.totalRevenue.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                      R$ {packageType.price}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-1\">\n                  <div className=\"flex justify-between text-xs text-gray-600\">\n                    <span>Uso Médio</span>\n                    <span>{packageType.averageUsage}%</span>\n                  </div>\n                  <Progress \n                    value={packageType.averageUsage} \n                    className=\"h-2\"\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Serviços Mais Utilizados */}\n        <div>\n          <h4 className=\"text-sm font-semibold text-gray-900 mb-3 flex items-center gap-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            Serviços Mais Utilizados\n          </h4>\n          <div className=\"space-y-2\">\n            {analytics.mostUsedServices.map((service, index) => (\n              <div key={service.serviceName} className=\"flex items-center justify-between py-2\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-xs font-semibold\">\n                    {index + 1}\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {service.serviceName}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-gray-600\">\n                    {service.usageCount} usos\n                  </span>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {service.percentage}%\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Métricas de Performance */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">Métricas Chave</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Utilização Média</span>\n              <div className=\"font-semibold text-gray-900\">\n                {analytics.overallStats.averagePackageUtilization}%\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Receita Mensal</span>\n              <div className=\"font-semibold text-gray-900\">\n                R$ {analytics.overallStats.monthlyRecurringRevenue.toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7615}}}